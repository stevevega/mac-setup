{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/guzzlehttp/promises/src/PromiseInterface.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"GuzzleHttp\\Promise","location":[1,0,1,29]},{"kind":2,"name":"GuzzleHttp\\Promise\\PromiseInterface","location":[12,0,92,1],"description":"A promise represents the eventual result of an asynchronous operation.\n\nThe primary way of interacting with a promise is through its then method,\nwhich registers callbacks to receive either a promiseâ€™s eventual value or\nthe reason why the promise cannot be fulfilled.","children":[{"kind":1024,"name":"PENDING","modifiers":1,"location":[14,10,14,29],"scope":"GuzzleHttp\\Promise\\PromiseInterface","value":"'pending'"},{"kind":1024,"name":"FULFILLED","modifiers":1,"location":[15,10,15,33],"scope":"GuzzleHttp\\Promise\\PromiseInterface","value":"'fulfilled'"},{"kind":1024,"name":"REJECTED","modifiers":1,"location":[16,10,16,31],"scope":"GuzzleHttp\\Promise\\PromiseInterface","value":"'rejected'"},{"kind":32,"name":"then","modifiers":1,"location":[27,4,30,6],"description":"Appends fulfillment and rejection handlers to the promise, and returns\na new promise resolving to the return value of the called handler.","scope":"GuzzleHttp\\Promise\\PromiseInterface","type":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$onFulfilled","location":[28,8,28,36],"description":"Invoked when the promise fulfills.","scope":"then","value":"null","type":"callable"},{"kind":128,"name":"$onRejected","location":[29,8,29,35],"description":"Invoked when the promise is rejected.\n","scope":"then","value":"null","type":"callable"}]},{"kind":32,"name":"otherwise","modifiers":1,"location":[42,4,42,52],"description":"Appends a rejection handler callback to the promise, and returns a new\npromise resolving to the return value of the callback if it is called,\nor to its original fulfillment value if the promise is instead\nfulfilled.","scope":"GuzzleHttp\\Promise\\PromiseInterface","type":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$onRejected","location":[42,30,42,50],"description":"Invoked when the promise is rejected.\n","scope":"otherwise","type":"callable"}]},{"kind":32,"name":"getState","modifiers":1,"location":[52,4,52,31],"description":"Get the state of the promise (\"pending\", \"rejected\", or \"fulfilled\").\n\nThe three states can be checked against the constants defined on\nPromiseInterface: PENDING, FULFILLED, and REJECTED.","scope":"GuzzleHttp\\Promise\\PromiseInterface","type":"string"},{"kind":32,"name":"resolve","modifiers":1,"location":[60,4,60,36],"description":"Resolve the promise with the given value.","scope":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$value","location":[60,28,60,34],"scope":"resolve","type":"mixed"}]},{"kind":32,"name":"reject","modifiers":1,"location":[68,4,68,36],"description":"Reject the promise with the given reason.","scope":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$reason","location":[68,27,68,34],"scope":"reject","type":"mixed"}]},{"kind":32,"name":"cancel","modifiers":1,"location":[75,4,75,29],"description":"Cancels the promise if possible.","scope":"GuzzleHttp\\Promise\\PromiseInterface"},{"kind":32,"name":"wait","modifiers":1,"location":[91,4,91,41],"description":"Waits until the promise completes if possible.\n\nPass $unwrap as true to unwrap the result of the promise, either\nreturning the resolved value or throwing the rejected exception.\n\nIf the promise cannot be waited on, then the promise will be rejected.","scope":"GuzzleHttp\\Promise\\PromiseInterface","type":"mixed","children":[{"kind":128,"name":"$unwrap","location":[91,25,91,39],"scope":"wait","value":"true","type":"bool"}]}]}]}}