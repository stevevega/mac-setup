{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/guzzle/guzzle/src/Guzzle/Http/Message/RequestFactoryInterface.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"Guzzle\\Http\\Message","location":[2,0,2,30]},{"kind":1,"name":"Collection","modifiers":4096,"location":[4,4,4,28],"associated":[{"kind":1,"name":"Guzzle\\Common\\Collection"}]},{"kind":1,"name":"EntityBodyInterface","modifiers":4096,"location":[5,4,5,35],"associated":[{"kind":1,"name":"Guzzle\\Http\\EntityBodyInterface"}]},{"kind":1,"name":"Url","modifiers":4096,"location":[6,4,6,19],"associated":[{"kind":1,"name":"Guzzle\\Http\\Url"}]},{"kind":2,"name":"Guzzle\\Http\\Message\\RequestFactoryInterface","location":[11,0,104,1],"description":"Request factory used to create HTTP requests","children":[{"kind":1024,"name":"OPTIONS_NONE","modifiers":1,"location":[13,10,13,26],"scope":"Guzzle\\Http\\Message\\RequestFactoryInterface","value":"0"},{"kind":1024,"name":"OPTIONS_AS_DEFAULTS","modifiers":1,"location":[14,10,14,33],"scope":"Guzzle\\Http\\Message\\RequestFactoryInterface","value":"1"},{"kind":32,"name":"fromMessage","modifiers":1,"location":[23,4,23,42],"description":"Create a new request based on an HTTP message","scope":"Guzzle\\Http\\Message\\RequestFactoryInterface","type":"Guzzle\\Http\\Message\\RequestInterface","children":[{"kind":128,"name":"$message","location":[23,32,23,40],"description":"HTTP message as a string\n","scope":"fromMessage","type":"string"}]},{"kind":32,"name":"fromParts","modifiers":1,"location":[45,4,52,6],"description":"Create a request from URL parts as returned from parse_url()","scope":"Guzzle\\Http\\Message\\RequestFactoryInterface","type":"Guzzle\\Http\\Message\\RequestInterface","children":[{"kind":128,"name":"$method","location":[46,8,46,15],"description":"HTTP method (GET, POST, PUT, HEAD, DELETE, etc)\n","scope":"fromParts","type":"string"},{"kind":128,"name":"$urlParts","location":[47,8,47,23],"description":"URL parts containing the same keys as parse_url()\n- scheme: e.g. http\n- host:   e.g. www.guzzle-project.com\n- port:   e.g. 80\n- user:   e.g. michael\n- pass:   e.g. rocks\n- path:   e.g. / OR /index.html\n- query:  after the question mark ?","scope":"fromParts","type":"array"},{"kind":128,"name":"$headers","location":[48,8,48,23],"description":"HTTP headers","scope":"fromParts","value":"null","type":"array|Guzzle\\Common\\Collection"},{"kind":128,"name":"$body","location":[49,8,49,20],"description":"Body to send in the request","scope":"fromParts","value":"null","type":"string|resource|array|Guzzle\\Http\\EntityBodyInterface"},{"kind":128,"name":"$protocol","location":[50,8,50,26],"description":"Protocol (HTTP, SPYDY, etc)","scope":"fromParts","value":"'HTTP'","type":"string"},{"kind":128,"name":"$protocolVersion","location":[51,8,51,32],"description":"1.0, 1.1, etc\n","scope":"fromParts","value":"'1.1'","type":"string"}]},{"kind":32,"name":"create","modifiers":1,"location":[65,4,65,99],"description":"Create a new request based on the HTTP method","scope":"Guzzle\\Http\\Message\\RequestFactoryInterface","type":"Guzzle\\Http\\Message\\RequestInterface","children":[{"kind":128,"name":"$method","location":[65,27,65,34],"description":"HTTP method (GET, POST, PUT, PATCH, HEAD, DELETE, ...)","scope":"create","type":"string"},{"kind":128,"name":"$url","location":[65,36,65,40],"description":"HTTP URL to connect to","scope":"create","type":"string|Guzzle\\Http\\Url"},{"kind":128,"name":"$headers","location":[65,42,65,57],"description":"HTTP headers","scope":"create","value":"null","type":"array|Guzzle\\Common\\Collection"},{"kind":128,"name":"$body","location":[65,59,65,71],"description":"Body to send in the request","scope":"create","value":"null","type":"string|resource|array|Guzzle\\Http\\EntityBodyInterface"},{"kind":128,"name":"$options","location":[65,73,65,97],"description":"Array of options to apply to the request\n","scope":"create","value":"array()","type":"array"}]},{"kind":32,"name":"applyOptions","modifiers":1,"location":[103,4,103,115],"description":"Apply an associative array of options to the request","scope":"Guzzle\\Http\\Message\\RequestFactoryInterface","children":[{"kind":128,"name":"$request","location":[103,33,103,58],"description":"Request to update","scope":"applyOptions","typeSource":1,"type":"Guzzle\\Http\\Message\\RequestInterface"},{"kind":128,"name":"$options","location":[103,60,103,84],"description":"Options to use with the request. Available options are:\n\"headers\": Associative array of headers\n\"query\": Associative array of query string values to add to the request\n\"body\": Body of a request, including an EntityBody, string, or array when sending POST requests.\n\"auth\": Array of HTTP authentication parameters to use with the request. The array must contain the\nusername in index [0], the password in index [2], and can optionally contain the authentication type\nin index [3]. The authentication types are: \"Basic\", \"Digest\", \"NTLM\", \"Any\" (defaults to \"Basic\").\n\"cookies\": Associative array of cookies\n\"allow_redirects\": Set to false to disable redirects\n\"save_to\": String, fopen resource, or EntityBody object used to store the body of the response\n\"events\": Associative array mapping event names to a closure or array of (priority, closure)\n\"plugins\": Array of plugins to add to the request\n\"exceptions\": Set to false to disable throwing exceptions on an HTTP level error (e.g. 404, 500, etc)\n\"params\": Set custom request data parameters on a request. (Note: these are not query string parameters)\n\"timeout\": Float describing the timeout of the request in seconds\n\"connect_timeout\": Float describing the number of seconds to wait while trying to connect. Use 0 to wait\nindefinitely.\n\"verify\": Set to true to enable SSL cert validation (the default), false to disable, or supply the path\nto a CA bundle to enable verification using a custom certificate.\n\"cert\": Set to a string to specify the path to a file containing a PEM formatted certificate. If a\npassword is required, then set an array containing the path to the PEM file followed by the the\npassword required for the certificate.\n\"ssl_key\": Specify the path to a file containing a private SSL key in PEM format. If a password is\nrequired, then set an array containing the path to the SSL key followed by the password required for\nthe certificate.\n\"proxy\": Specify an HTTP proxy (e.g. \"http://username:password@192.168.16.1:10\")\n\"debug\": Set to true to display all data sent over the wire","scope":"applyOptions","value":"array()","type":"array"},{"kind":128,"name":"$flags","location":[103,86,103,113],"description":"Bitwise flags to apply when applying the options to the request. Defaults to no special\noptions. `1` (OPTIONS_AS_DEFAULTS): When specified, options will only update a request when\nthe value does not already exist on the request. This is only supported by \"query\" and\n\"headers\". Other bitwise options may be added in the future.","scope":"applyOptions","value":"self::OPTIONS_NONE","type":"int"}]}]}]}}