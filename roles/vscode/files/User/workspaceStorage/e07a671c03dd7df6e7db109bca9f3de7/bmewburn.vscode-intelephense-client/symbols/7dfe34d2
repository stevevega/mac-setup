{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/google/protobuf/php/src/Google/Protobuf/Internal/FieldOptions.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"Google\\Protobuf\\Internal","location":[4,0,4,35]},{"kind":1,"name":"GPBType","modifiers":4096,"location":[6,4,6,36],"associated":[{"kind":1,"name":"Google\\Protobuf\\Internal\\GPBType"}]},{"kind":1,"name":"GPBWire","modifiers":4096,"location":[7,4,7,36],"associated":[{"kind":1,"name":"Google\\Protobuf\\Internal\\GPBWire"}]},{"kind":1,"name":"RepeatedField","modifiers":4096,"location":[8,4,8,42],"associated":[{"kind":1,"name":"Google\\Protobuf\\Internal\\RepeatedField"}]},{"kind":1,"name":"InputStream","modifiers":4096,"location":[9,4,9,40],"associated":[{"kind":1,"name":"Google\\Protobuf\\Internal\\InputStream"}]},{"kind":1,"name":"GPBUtil","modifiers":4096,"location":[11,4,11,36],"associated":[{"kind":1,"name":"Google\\Protobuf\\Internal\\GPBUtil"}]},{"kind":1,"name":"Google\\Protobuf\\Internal\\FieldOptions","location":[16,0,427,1],"associated":[{"kind":1,"name":"Google\\Protobuf\\Internal\\Message"}],"description":"Protobuf type <code>google.protobuf.FieldOptions</code>","children":[{"kind":16,"name":"$ctype","modifiers":4,"location":[28,12,28,22],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":16,"name":"$has_ctype","modifiers":4,"location":[29,12,29,30],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":16,"name":"$packed","modifiers":4,"location":[41,12,41,27],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":16,"name":"$has_packed","modifiers":4,"location":[42,12,42,31],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":16,"name":"$jstype","modifiers":4,"location":[58,12,58,23],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":16,"name":"$has_jstype","modifiers":4,"location":[59,12,59,31],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":16,"name":"$lazy","modifiers":4,"location":[90,12,90,25],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":16,"name":"$has_lazy","modifiers":4,"location":[91,12,91,29],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":16,"name":"$deprecated","modifiers":4,"location":[102,12,102,31],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":16,"name":"$has_deprecated","modifiers":4,"location":[103,12,103,35],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":16,"name":"$weak","modifiers":4,"location":[111,12,111,25],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":16,"name":"$has_weak","modifiers":4,"location":[112,12,112,29],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":16,"name":"$uninterpreted_option","modifiers":4,"location":[120,12,120,33],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":16,"name":"$has_uninterpreted_option","modifiers":4,"location":[121,12,121,45],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"__construct","modifiers":1,"location":[123,4,126,5],"description":"<pre>\nThe parser stores options it doesn't recognize here. See above.\n</pre>\n\n<code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"getCtype","modifiers":1,"location":[138,4,141,5],"description":"<pre>\nThe ctype option instructs the C++ code generator to use a different\nrepresentation of the field than it normally would.  See the specific\noptions below.  This option is not yet implemented in the open source\nrelease -- sorry, we'll try to include it in a future version!\n</pre>\n\n<code>optional .google.protobuf.FieldOptions.CType ctype = 1 [default = STRING];</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"setCtype","modifiers":1,"location":[153,4,158,5],"description":"<pre>\nThe ctype option instructs the C++ code generator to use a different\nrepresentation of the field than it normally would.  See the specific\noptions below.  This option is not yet implemented in the open source\nrelease -- sorry, we'll try to include it in a future version!\n</pre>\n\n<code>optional .google.protobuf.FieldOptions.CType ctype = 1 [default = STRING];</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions","children":[{"kind":128,"name":"$var","location":[153,29,153,33],"scope":"setCtype"}]},{"kind":32,"name":"hasCtype","modifiers":1,"location":[160,4,163,5],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"getPacked","modifiers":1,"location":[176,4,179,5],"description":"<pre>\nThe packed option can be enabled for repeated primitive fields to enable\na more efficient representation on the wire. Rather than repeatedly\nwriting the tag and type for each element, the entire array is encoded as\na single length-delimited blob. In proto3, only explicit setting it to\nfalse will avoid using packed encoding.\n</pre>\n\n<code>optional bool packed = 2;</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"setPacked","modifiers":1,"location":[192,4,197,5],"description":"<pre>\nThe packed option can be enabled for repeated primitive fields to enable\na more efficient representation on the wire. Rather than repeatedly\nwriting the tag and type for each element, the entire array is encoded as\na single length-delimited blob. In proto3, only explicit setting it to\nfalse will avoid using packed encoding.\n</pre>\n\n<code>optional bool packed = 2;</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions","children":[{"kind":128,"name":"$var","location":[192,30,192,34],"scope":"setPacked"}]},{"kind":32,"name":"hasPacked","modifiers":1,"location":[199,4,202,5],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"getJstype","modifiers":1,"location":[219,4,222,5],"description":"<pre>\nThe jstype option determines the JavaScript type used for values of the\nfield.  The option is permitted only for 64 bit integral and fixed types\n(int64, uint64, sint64, fixed64, sfixed64).  By default these types are\nrepresented as JavaScript strings.  This avoids loss of precision that can\nhappen when a large value is converted to a floating point JavaScript\nnumbers.  Specifying JS_NUMBER for the jstype causes the generated\nJavaScript code to use the JavaScript \"number\" type instead of strings.\nThis option is an enum to permit additional types to be added,\ne.g. goog.math.Integer.\n</pre>\n\n<code>optional .google.protobuf.FieldOptions.JSType jstype = 6 [default = JS_NORMAL];</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"setJstype","modifiers":1,"location":[239,4,244,5],"description":"<pre>\nThe jstype option determines the JavaScript type used for values of the\nfield.  The option is permitted only for 64 bit integral and fixed types\n(int64, uint64, sint64, fixed64, sfixed64).  By default these types are\nrepresented as JavaScript strings.  This avoids loss of precision that can\nhappen when a large value is converted to a floating point JavaScript\nnumbers.  Specifying JS_NUMBER for the jstype causes the generated\nJavaScript code to use the JavaScript \"number\" type instead of strings.\nThis option is an enum to permit additional types to be added,\ne.g. goog.math.Integer.\n</pre>\n\n<code>optional .google.protobuf.FieldOptions.JSType jstype = 6 [default = JS_NORMAL];</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions","children":[{"kind":128,"name":"$var","location":[239,30,239,34],"scope":"setJstype"}]},{"kind":32,"name":"hasJstype","modifiers":1,"location":[246,4,249,5],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"getLazy","modifiers":1,"location":[281,4,284,5],"description":"<pre>\nShould this field be parsed lazily?  Lazy applies only to message-type\nfields.  It means that when the outer message is initially parsed, the\ninner message's contents will not be parsed but instead stored in encoded\nform.  The inner message will actually be parsed when it is first accessed.\nThis is only a hint.  Implementations are free to choose whether to use\neager or lazy parsing regardless of the value of this option.  However,\nsetting this option true suggests that the protocol author believes that\nusing lazy parsing on this field is worth the additional bookkeeping\noverhead typically needed to implement it.\nThis option does not affect the public interface of any generated code;\nall method signatures remain the same.  Furthermore, thread-safety of the\ninterface is not affected by this option; const methods remain safe to\ncall from multiple threads concurrently, while non-const methods continue\nto require exclusive access.\nNote that implementations may choose not to check required fields within\na lazy sub-message.  That is, calling IsInitialized() on the outer message\nmay return true even if the inner message has missing required fields.\nThis is necessary because otherwise the inner message would have to be\nparsed in order to perform the check, defeating the purpose of lazy\nparsing.  An implementation which chooses not to check required fields\nmust be consistent about it.  That is, for any particular sub-message, the\nimplementation must either *always* check its required fields, or *never*\ncheck its required fields, regardless of whether or not the message has\nbeen parsed.\n</pre>\n\n<code>optional bool lazy = 5 [default = false];</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"setLazy","modifiers":1,"location":[316,4,321,5],"description":"<pre>\nShould this field be parsed lazily?  Lazy applies only to message-type\nfields.  It means that when the outer message is initially parsed, the\ninner message's contents will not be parsed but instead stored in encoded\nform.  The inner message will actually be parsed when it is first accessed.\nThis is only a hint.  Implementations are free to choose whether to use\neager or lazy parsing regardless of the value of this option.  However,\nsetting this option true suggests that the protocol author believes that\nusing lazy parsing on this field is worth the additional bookkeeping\noverhead typically needed to implement it.\nThis option does not affect the public interface of any generated code;\nall method signatures remain the same.  Furthermore, thread-safety of the\ninterface is not affected by this option; const methods remain safe to\ncall from multiple threads concurrently, while non-const methods continue\nto require exclusive access.\nNote that implementations may choose not to check required fields within\na lazy sub-message.  That is, calling IsInitialized() on the outer message\nmay return true even if the inner message has missing required fields.\nThis is necessary because otherwise the inner message would have to be\nparsed in order to perform the check, defeating the purpose of lazy\nparsing.  An implementation which chooses not to check required fields\nmust be consistent about it.  That is, for any particular sub-message, the\nimplementation must either *always* check its required fields, or *never*\ncheck its required fields, regardless of whether or not the message has\nbeen parsed.\n</pre>\n\n<code>optional bool lazy = 5 [default = false];</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions","children":[{"kind":128,"name":"$var","location":[316,28,316,32],"scope":"setLazy"}]},{"kind":32,"name":"hasLazy","modifiers":1,"location":[323,4,326,5],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"getDeprecated","modifiers":1,"location":[338,4,341,5],"description":"<pre>\nIs this field deprecated?\nDepending on the target platform, this can emit Deprecated annotations\nfor accessors, or it will be completely ignored; in the very least, this\nis a formalization for deprecating fields.\n</pre>\n\n<code>optional bool deprecated = 3 [default = false];</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"setDeprecated","modifiers":1,"location":[353,4,358,5],"description":"<pre>\nIs this field deprecated?\nDepending on the target platform, this can emit Deprecated annotations\nfor accessors, or it will be completely ignored; in the very least, this\nis a formalization for deprecating fields.\n</pre>\n\n<code>optional bool deprecated = 3 [default = false];</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions","children":[{"kind":128,"name":"$var","location":[353,34,353,38],"scope":"setDeprecated"}]},{"kind":32,"name":"hasDeprecated","modifiers":1,"location":[360,4,363,5],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"getWeak","modifiers":1,"location":[372,4,375,5],"description":"<pre>\nFor Google-internal migration only. Do not use.\n</pre>\n\n<code>optional bool weak = 10 [default = false];</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"setWeak","modifiers":1,"location":[384,4,389,5],"description":"<pre>\nFor Google-internal migration only. Do not use.\n</pre>\n\n<code>optional bool weak = 10 [default = false];</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions","children":[{"kind":128,"name":"$var","location":[384,28,384,32],"scope":"setWeak"}]},{"kind":32,"name":"hasWeak","modifiers":1,"location":[391,4,394,5],"scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"getUninterpretedOption","modifiers":1,"location":[403,4,406,5],"description":"<pre>\nThe parser stores options it doesn't recognize here. See above.\n</pre>\n\n<code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions"},{"kind":32,"name":"setUninterpretedOption","modifiers":1,"location":[415,4,420,5],"description":"<pre>\nThe parser stores options it doesn't recognize here. See above.\n</pre>\n\n<code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>","scope":"Google\\Protobuf\\Internal\\FieldOptions","children":[{"kind":128,"name":"$var","location":[415,43,415,48],"scope":"setUninterpretedOption"}]},{"kind":32,"name":"hasUninterpretedOption","modifiers":1,"location":[422,4,425,5],"scope":"Google\\Protobuf\\Internal\\FieldOptions"}]}]}}