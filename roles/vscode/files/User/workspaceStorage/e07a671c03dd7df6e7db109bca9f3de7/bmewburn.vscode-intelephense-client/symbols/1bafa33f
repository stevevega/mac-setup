{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/guzzle/guzzle/src/Guzzle/Common/Collection.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"Guzzle\\Common","location":[2,0,2,24]},{"kind":1,"name":"InvalidArgumentException","modifiers":4096,"location":[4,4,4,52],"associated":[{"kind":1,"name":"Guzzle\\Common\\Exception\\InvalidArgumentException"}]},{"kind":1,"name":"RuntimeException","modifiers":4096,"location":[5,4,5,44],"associated":[{"kind":1,"name":"Guzzle\\Common\\Exception\\RuntimeException"}]},{"kind":1,"name":"Guzzle\\Common\\Collection","location":[10,0,402,1],"associated":[{"kind":2,"name":"ArrayAccess"},{"kind":2,"name":"IteratorAggregate"},{"kind":2,"name":"Countable"},{"kind":2,"name":"Guzzle\\Common\\ToArrayInterface"}],"description":"Key value pair collection object","children":[{"kind":16,"name":"$data","modifiers":2,"location":[13,14,13,19],"description":"Data associated with the object.","scope":"Guzzle\\Common\\Collection","type":"array"},{"kind":32,"name":"__construct","modifiers":1,"location":[18,4,21,5],"scope":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$data","location":[18,32,18,53],"description":"Associative array of data to set","scope":"__construct","value":"array()","type":"array"}]},{"kind":32,"name":"fromConfig","modifiers":33,"location":[33,4,42,5],"description":"Create a new collection from an array, validate the keys, and add default values where missing","scope":"Guzzle\\Common\\Collection","type":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$config","location":[33,38,33,61],"description":"Configuration values to apply.","scope":"fromConfig","value":"array()","type":"array"},{"kind":128,"name":"$defaults","location":[33,63,33,88],"description":"Default parameters","scope":"fromConfig","value":"array()","type":"array"},{"kind":128,"name":"$required","location":[33,90,33,115],"description":"Required parameter names\n","scope":"fromConfig","value":"array()","type":"array"}]},{"kind":32,"name":"count","modifiers":1,"location":[44,4,47,5],"scope":"Guzzle\\Common\\Collection"},{"kind":32,"name":"getIterator","modifiers":1,"location":[49,4,52,5],"scope":"Guzzle\\Common\\Collection"},{"kind":32,"name":"toArray","modifiers":1,"location":[54,4,57,5],"scope":"Guzzle\\Common\\Collection"},{"kind":32,"name":"clear","modifiers":1,"location":[64,4,69,5],"description":"Removes all key value pairs","scope":"Guzzle\\Common\\Collection","type":"Guzzle\\Common\\Collection"},{"kind":32,"name":"getAll","modifiers":1,"location":[78,4,81,5],"description":"Get all or a subset of matching key value pairs","scope":"Guzzle\\Common\\Collection","type":"array","children":[{"kind":128,"name":"$keys","location":[78,27,78,45],"description":"Pass an array of keys to retrieve only a subset of key value pairs\n","scope":"getAll","value":"null","type":"array"}]},{"kind":32,"name":"get","modifiers":1,"location":[90,4,93,5],"description":"Get a specific key value.","scope":"Guzzle\\Common\\Collection","type":"mixed|null","children":[{"kind":128,"name":"$key","location":[90,24,90,28],"description":"Key to retrieve.\n","scope":"get","type":"string"}]},{"kind":32,"name":"set","modifiers":1,"location":[103,4,108,5],"description":"Set a key value pair","scope":"Guzzle\\Common\\Collection","type":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$key","location":[103,24,103,28],"description":"Key to set","scope":"set","type":"string"},{"kind":128,"name":"$value","location":[103,30,103,36],"description":"Value to set\n","scope":"set","type":"mixed"}]},{"kind":32,"name":"add","modifiers":1,"location":[119,4,130,5],"description":"Add a value to a key.  If a key of the same name has already been added, the key value will be converted into an\narray and the new value will be pushed to the end of the array.","scope":"Guzzle\\Common\\Collection","type":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$key","location":[119,24,119,28],"description":"Key to add","scope":"add","type":"string"},{"kind":128,"name":"$value","location":[119,30,119,36],"description":"Value to add to the key\n","scope":"add","type":"mixed"}]},{"kind":32,"name":"remove","modifiers":1,"location":[139,4,144,5],"description":"Remove a specific key value pair","scope":"Guzzle\\Common\\Collection","type":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$key","location":[139,27,139,31],"description":"A key to remove\n","scope":"remove","type":"string"}]},{"kind":32,"name":"getKeys","modifiers":1,"location":[151,4,154,5],"description":"Get all keys in the collection","scope":"Guzzle\\Common\\Collection","type":"array"},{"kind":32,"name":"hasKey","modifiers":1,"location":[163,4,166,5],"description":"Returns whether or not the specified key is present.","scope":"Guzzle\\Common\\Collection","type":"bool","children":[{"kind":128,"name":"$key","location":[163,27,163,31],"description":"The key for which to check the existence.\n","scope":"hasKey","type":"string"}]},{"kind":32,"name":"keySearch","modifiers":1,"location":[175,4,184,5],"description":"Case insensitive search the keys in the collection","scope":"Guzzle\\Common\\Collection","type":"bool|string","children":[{"kind":128,"name":"$key","location":[175,30,175,34],"description":"Key to search for\n","scope":"keySearch","type":"string"}]},{"kind":32,"name":"hasValue","modifiers":1,"location":[193,4,196,5],"description":"Checks if any keys contains a certain value","scope":"Guzzle\\Common\\Collection","type":"mixed","children":[{"kind":128,"name":"$value","location":[193,29,193,35],"description":"Value to search for\n","scope":"hasValue","type":"string"}]},{"kind":32,"name":"replace","modifiers":1,"location":[205,4,210,5],"description":"Replace the data of the object with the value of an array","scope":"Guzzle\\Common\\Collection","type":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$data","location":[205,28,205,39],"description":"Associative array of data\n","scope":"replace","type":"array"}]},{"kind":32,"name":"merge","modifiers":1,"location":[219,4,226,5],"description":"Add and merge in a Collection or array of key value pair data.","scope":"Guzzle\\Common\\Collection","type":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$data","location":[219,26,219,31],"description":"Associative array of key value pair data\n","scope":"merge","type":"Guzzle\\Common\\Collection|array"}]},{"kind":32,"name":"overwriteWith","modifiers":1,"location":[235,4,248,5],"description":"Over write key value pairs in this collection with all of the data from an array or collection.","scope":"Guzzle\\Common\\Collection","type":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$data","location":[235,34,235,39],"description":"Values to override over this config\n","scope":"overwriteWith","type":"array|Traversable"}]},{"kind":32,"name":"map","modifiers":1,"location":[261,4,269,5],"description":"Returns a Collection containing all the elements of the collection after applying the callback function to each\none. The Closure should accept three parameters: (string) $key, (string) $value, (array) $context and return a\nmodified value","scope":"Guzzle\\Common\\Collection","type":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$closure","location":[261,24,261,41],"description":"Closure to apply","scope":"map","typeSource":1,"type":"Closure"},{"kind":128,"name":"$context","location":[261,43,261,67],"description":"Context to pass to the closure","scope":"map","value":"array()","type":"array"},{"kind":128,"name":"$static","location":[261,69,261,83],"description":"Set to TRUE to use the same class as the return rather than returning a Collection\n","scope":"map","value":"true","type":"bool"}]},{"kind":32,"name":"filter","modifiers":1,"location":[281,4,291,5],"description":"Iterates over each key value pair in the collection passing them to the Closure. If the  Closure function returns\ntrue, the current value from input is returned into the result Collection.  The Closure must accept three\nparameters: (string) $key, (string) $value and return Boolean TRUE or FALSE for each value.","scope":"Guzzle\\Common\\Collection","type":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$closure","location":[281,27,281,44],"description":"Closure evaluation function","scope":"filter","typeSource":1,"type":"Closure"},{"kind":128,"name":"$static","location":[281,46,281,60],"description":"Set to TRUE to use the same class as the return rather than returning a Collection\n","scope":"filter","value":"true","type":"bool"}]},{"kind":32,"name":"offsetExists","modifiers":1,"location":[293,4,296,5],"scope":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$offset","location":[293,33,293,40],"scope":"offsetExists"}]},{"kind":32,"name":"offsetGet","modifiers":1,"location":[298,4,301,5],"scope":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$offset","location":[298,30,298,37],"scope":"offsetGet"}]},{"kind":32,"name":"offsetSet","modifiers":1,"location":[303,4,306,5],"scope":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$offset","location":[303,30,303,37],"scope":"offsetSet"},{"kind":128,"name":"$value","location":[303,39,303,45],"scope":"offsetSet"}]},{"kind":32,"name":"offsetUnset","modifiers":1,"location":[308,4,311,5],"scope":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$offset","location":[308,32,308,39],"scope":"offsetUnset"}]},{"kind":32,"name":"setPath","modifiers":1,"location":[322,4,340,5],"description":"Set a value into a nested array key. Keys will be created as needed to set the value.","scope":"Guzzle\\Common\\Collection","type":"Guzzle\\Common\\Collection","children":[{"kind":128,"name":"$path","location":[322,28,322,33],"description":"Path to set","scope":"setPath","type":"string"},{"kind":128,"name":"$value","location":[322,35,322,41],"description":"Value to set at the key\n","scope":"setPath","type":"mixed"}]},{"kind":32,"name":"getPath","modifiers":1,"location":[353,4,382,5],"description":"Gets a value from the collection using an array path (e.g. foo/baz/bar would retrieve bar from two nested arrays)\nAllows for wildcard searches which recursively combine matches up to the level at which the wildcard occurs. This\ncan be useful for accepting any key of a sub-array and combining matching keys from each diverging path.","scope":"Guzzle\\Common\\Collection","type":"mixed|null","children":[{"kind":128,"name":"$path","location":[353,28,353,33],"description":"Path to traverse and retrieve a value from","scope":"getPath","type":"string"},{"kind":128,"name":"$separator","location":[353,35,353,51],"description":"Character used to add depth to the search","scope":"getPath","value":"'/'","type":"string"},{"kind":128,"name":"$data","location":[353,53,353,65],"description":"Optional data to descend into (used when wildcards are encountered)\n","scope":"getPath","value":"null","type":"mixed"}]},{"kind":32,"name":"inject","modifiers":1,"location":[392,4,401,5],"description":"Inject configuration settings into an input string","scope":"Guzzle\\Common\\Collection","type":"string","children":[{"kind":128,"name":"$input","location":[392,27,392,33],"description":"Input to inject\n","scope":"inject","type":"string"}]}]}]}}