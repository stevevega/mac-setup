{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/phpdocumentor/reflection-docblock/src/DocBlock/TagFactory.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"phpDocumentor\\Reflection\\DocBlock","location":[12,0,12,44]},{"kind":1,"name":"TypeContext","modifiers":4096,"location":[14,4,14,57],"associated":[{"kind":1,"name":"phpDocumentor\\Reflection\\Types\\Context"}]},{"kind":2,"name":"phpDocumentor\\Reflection\\DocBlock\\TagFactory","location":[16,0,92,1],"description":"This file is part of phpDocumentor.\n\nFor the full copyright and license information, please view the LICENSE\nfile that was distributed with this source code.","children":[{"kind":32,"name":"addParameter","modifiers":1,"location":[41,4,41,48],"description":"Adds a parameter to the service locator that can be injected in a tag's factory method.\n\nWhen calling a tag's \"create\" method we always check the signature for dependencies to inject. One way is to\ntypehint a parameter in the signature so that we can use that interface or class name to inject a dependency\n(see {@see addService()} for more information on that).\n\nAnother way is to check the name of the argument against the names in the Service Locator. With this method\nyou can add a variable that will be inserted when a tag's create method is not typehinted and has a matching\nname.\n\nBe aware that there are two reserved names:\n\n- name, representing the name of the tag.\n- body, representing the complete body of the tag.\n\nThese parameters are injected at the last moment and will override any existing parameter with those names.","scope":"phpDocumentor\\Reflection\\DocBlock\\TagFactory","type":"void","children":[{"kind":128,"name":"$name","location":[41,33,41,38],"scope":"addParameter","type":"string"},{"kind":128,"name":"$value","location":[41,40,41,46],"scope":"addParameter","type":"mixed"}]},{"kind":32,"name":"addService","modifiers":1,"location":[57,4,57,41],"description":"Registers a service with the Service Locator using the FQCN of the class or the alias, if provided.\n\nWhen calling a tag's \"create\" method we always check the signature for dependencies to inject. If a parameter\nhas a typehint then the ServiceLocator is queried to see if a Service is registered for that typehint.\n\nBecause interfaces are regularly used as type-hints this method provides an alias parameter; if the FQCN of the\ninterface is passed as alias then every time that interface is requested the provided service will be returned.","scope":"phpDocumentor\\Reflection\\DocBlock\\TagFactory","type":"void","children":[{"kind":128,"name":"$service","location":[57,31,57,39],"scope":"addService","type":"object"}]},{"kind":32,"name":"create","modifiers":1,"location":[69,4,69,66],"description":"Factory method responsible for instantiating the correct sub type.","scope":"phpDocumentor\\Reflection\\DocBlock\\TagFactory","type":"phpDocumentor\\Reflection\\DocBlock\\Tag","children":[{"kind":128,"name":"$tagLine","location":[69,27,69,35],"description":"The text for this tag, including description.","scope":"create","type":"string"},{"kind":128,"name":"$context","location":[69,37,69,64],"scope":"create","value":"null","typeSource":1,"type":"phpDocumentor\\Reflection\\Types\\Context"}]},{"kind":32,"name":"registerTagHandler","modifiers":1,"location":[91,4,91,59],"description":"Registers a handler for tags.\n\nIf you want to use your own tags then you can use this method to instruct the TagFactory to register the name\nof a tag with the FQCN of a 'Tag Handler'. The Tag handler should implement the {@see Tag} interface (and thus\nthe create method).","scope":"phpDocumentor\\Reflection\\DocBlock\\TagFactory","type":"void","children":[{"kind":128,"name":"$tagName","location":[91,39,91,47],"description":"Name of tag to register a handler for. When registering a namespaced tag, the full\nname, along with a prefixing slash MUST be provided.","scope":"registerTagHandler","type":"string"},{"kind":128,"name":"$handler","location":[91,49,91,57],"description":"FQCN of handler.\n","scope":"registerTagHandler","type":"string"}]}]}]}}