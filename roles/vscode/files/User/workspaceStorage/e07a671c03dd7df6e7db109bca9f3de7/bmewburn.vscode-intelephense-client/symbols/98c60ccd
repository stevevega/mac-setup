{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/symfony/yaml/Parser.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"Symfony\\Component\\Yaml","location":[11,0,11,33]},{"kind":1,"name":"ParseException","modifiers":4096,"location":[13,4,13,51],"associated":[{"kind":1,"name":"Symfony\\Component\\Yaml\\Exception\\ParseException"}]},{"kind":1,"name":"TaggedValue","modifiers":4096,"location":[14,4,14,42],"associated":[{"kind":1,"name":"Symfony\\Component\\Yaml\\Tag\\TaggedValue"}]},{"kind":1,"name":"Symfony\\Component\\Yaml\\Parser","location":[21,0,1049,1],"description":"Parser parses YAML strings to convert them to PHP arrays.","children":[{"kind":1024,"name":"TAG_PATTERN","modifiers":1,"location":[23,10,23,47],"scope":"Symfony\\Component\\Yaml\\Parser","value":"'(?P<tag>![\\w!.\\/:-]+)'"},{"kind":1024,"name":"BLOCK_SCALAR_HEADER_PATTERN","modifiers":1,"location":[24,10,24,130],"scope":"Symfony\\Component\\Yaml\\Parser","value":"'(?P<separator>\\||>)(?P<modifiers>\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?P<comments> +#.*)?'"},{"kind":16,"name":"$offset","modifiers":4,"location":[26,12,26,23],"scope":"Symfony\\Component\\Yaml\\Parser"},{"kind":16,"name":"$totalNumberOfLines","modifiers":4,"location":[27,12,27,31],"scope":"Symfony\\Component\\Yaml\\Parser"},{"kind":16,"name":"$lines","modifiers":4,"location":[28,12,28,28],"scope":"Symfony\\Component\\Yaml\\Parser"},{"kind":16,"name":"$currentLineNb","modifiers":4,"location":[29,12,29,31],"scope":"Symfony\\Component\\Yaml\\Parser"},{"kind":16,"name":"$currentLine","modifiers":4,"location":[30,12,30,29],"scope":"Symfony\\Component\\Yaml\\Parser"},{"kind":16,"name":"$refs","modifiers":4,"location":[31,12,31,27],"scope":"Symfony\\Component\\Yaml\\Parser"},{"kind":16,"name":"$skippedLineNumbers","modifiers":4,"location":[32,12,32,41],"scope":"Symfony\\Component\\Yaml\\Parser"},{"kind":16,"name":"$locallySkippedLineNumbers","modifiers":4,"location":[33,12,33,48],"scope":"Symfony\\Component\\Yaml\\Parser"},{"kind":32,"name":"__construct","modifiers":1,"location":[35,4,48,5],"scope":"Symfony\\Component\\Yaml\\Parser"},{"kind":32,"name":"parse","modifiers":1,"location":[60,4,124,5],"description":"Parses a YAML string to a PHP value.","scope":"Symfony\\Component\\Yaml\\Parser","type":"mixed","children":[{"kind":128,"name":"$value","location":[60,26,60,32],"description":"A YAML string","scope":"parse","type":"string"},{"kind":128,"name":"$flags","location":[60,34,60,44],"description":"A bit field of PARSE_* constants to customize the YAML parser behavior\n","scope":"parse","value":"0","type":"int"}]},{"kind":32,"name":"doParse","modifiers":4,"location":[126,4,429,5],"scope":"Symfony\\Component\\Yaml\\Parser","children":[{"kind":128,"name":"$value","location":[126,29,126,35],"scope":"doParse"},{"kind":128,"name":"$flags","location":[126,37,126,43],"scope":"doParse"}]},{"kind":32,"name":"parseBlock","modifiers":4,"location":[431,4,450,5],"scope":"Symfony\\Component\\Yaml\\Parser","children":[{"kind":128,"name":"$offset","location":[431,32,431,39],"scope":"parseBlock"},{"kind":128,"name":"$yaml","location":[431,41,431,46],"scope":"parseBlock"},{"kind":128,"name":"$flags","location":[431,48,431,54],"scope":"parseBlock"}]},{"kind":32,"name":"getRealCurrentLineNb","modifiers":4,"location":[457,4,470,5],"description":"Returns the current line number (takes the offset into account).","scope":"Symfony\\Component\\Yaml\\Parser","type":"int"},{"kind":32,"name":"getCurrentLineIndentation","modifiers":4,"location":[477,4,480,5],"description":"Returns the current line indentation.","scope":"Symfony\\Component\\Yaml\\Parser","type":"int"},{"kind":32,"name":"getNextEmbedBlock","modifiers":4,"location":[492,4,595,5],"description":"Returns the next embed block of YAML.","scope":"Symfony\\Component\\Yaml\\Parser","type":"string","children":[{"kind":128,"name":"$indentation","location":[492,39,492,58],"description":"The indent level at which the block is to be read, or null for default","scope":"getNextEmbedBlock","value":"null","type":"int"},{"kind":128,"name":"$inSequence","location":[492,60,492,79],"description":"True if the enclosing data structure is a sequence\n","scope":"getNextEmbedBlock","value":"false","type":"bool"}]},{"kind":32,"name":"moveToNextLine","modifiers":4,"location":[602,4,611,5],"description":"Moves the parser to the next line.","scope":"Symfony\\Component\\Yaml\\Parser","type":"bool"},{"kind":32,"name":"moveToPreviousLine","modifiers":4,"location":[618,4,627,5],"description":"Moves the parser to the previous line.","scope":"Symfony\\Component\\Yaml\\Parser","type":"bool"},{"kind":32,"name":"parseValue","modifiers":4,"location":[640,4,710,5],"description":"Parses a YAML value.","scope":"Symfony\\Component\\Yaml\\Parser","type":"mixed","children":[{"kind":128,"name":"$value","location":[640,32,640,38],"description":"A YAML value","scope":"parseValue","type":"string"},{"kind":128,"name":"$flags","location":[640,40,640,46],"description":"A bit field of PARSE_* constants to customize the YAML parser behavior","scope":"parseValue","type":"int"},{"kind":128,"name":"$context","location":[640,48,640,56],"description":"The parser context (either sequence or mapping)\n","scope":"parseValue","type":"string"}]},{"kind":32,"name":"parseBlockScalar","modifiers":4,"location":[721,4,821,5],"description":"Parses a block scalar.","scope":"Symfony\\Component\\Yaml\\Parser","type":"string","children":[{"kind":128,"name":"$style","location":[721,38,721,44],"description":"The style indicator that was used to begin this block scalar (| or >)","scope":"parseBlockScalar","type":"string"},{"kind":128,"name":"$chomping","location":[721,46,721,60],"description":"The chomping indicator that was used to begin this block scalar (+ or -)","scope":"parseBlockScalar","value":"''","type":"string"},{"kind":128,"name":"$indentation","location":[721,62,721,78],"description":"The indentation indicator that was used to begin this block scalar\n","scope":"parseBlockScalar","value":"0","type":"int"}]},{"kind":32,"name":"isNextLineIndented","modifiers":4,"location":[828,4,846,5],"description":"Returns true if the next line is indented.","scope":"Symfony\\Component\\Yaml\\Parser","type":"bool"},{"kind":32,"name":"isCurrentLineEmpty","modifiers":4,"location":[853,4,856,5],"description":"Returns true if the current line is blank or if it is a comment line.","scope":"Symfony\\Component\\Yaml\\Parser","type":"bool"},{"kind":32,"name":"isCurrentLineBlank","modifiers":4,"location":[863,4,866,5],"description":"Returns true if the current line is blank.","scope":"Symfony\\Component\\Yaml\\Parser","type":"bool"},{"kind":32,"name":"isCurrentLineComment","modifiers":4,"location":[873,4,879,5],"description":"Returns true if the current line is a comment line.","scope":"Symfony\\Component\\Yaml\\Parser","type":"bool"},{"kind":32,"name":"isCurrentLineLastLineInDocument","modifiers":4,"location":[881,4,884,5],"scope":"Symfony\\Component\\Yaml\\Parser"},{"kind":32,"name":"cleanup","modifiers":4,"location":[893,4,922,5],"description":"Cleanups a YAML string to be parsed.","scope":"Symfony\\Component\\Yaml\\Parser","type":"string","children":[{"kind":128,"name":"$value","location":[893,29,893,35],"description":"The input YAML string\n","scope":"cleanup","type":"string"}]},{"kind":32,"name":"isNextLineUnIndentedCollection","modifiers":4,"location":[929,4,947,5],"description":"Returns true if the next line starts unindented collection.","scope":"Symfony\\Component\\Yaml\\Parser","type":"bool"},{"kind":32,"name":"isStringUnIndentedCollectionItem","modifiers":4,"location":[954,4,957,5],"description":"Returns true if the string is un-indented collection item.","scope":"Symfony\\Component\\Yaml\\Parser","type":"bool"},{"kind":32,"name":"isBlockScalarHeader","modifiers":4,"location":[964,4,967,5],"description":"Tests whether or not the current line is the header of a block scalar.","scope":"Symfony\\Component\\Yaml\\Parser","type":"bool"},{"kind":32,"name":"preg_match","modifiers":33,"location":[982,4,1009,5],"description":"A local wrapper for `preg_match` which will throw a ParseException if there\nis an internal error in the PCRE engine.\n\nThis avoids us needing to check for \"false\" every time PCRE is used\nin the YAML engine","scope":"Symfony\\Component\\Yaml\\Parser","children":[{"kind":128,"name":"$pattern","location":[982,38,982,46],"scope":"preg_match"},{"kind":128,"name":"$subject","location":[982,48,982,56],"scope":"preg_match"},{"kind":128,"name":"$matches","location":[982,58,982,74],"scope":"preg_match","value":"null"},{"kind":128,"name":"$flags","location":[982,76,982,86],"scope":"preg_match","value":"0"},{"kind":128,"name":"$offset","location":[982,88,982,99],"scope":"preg_match","value":"0"}]},{"kind":32,"name":"trimTag","modifiers":4,"location":[1017,4,1024,5],"description":"Trim the tag on top of the value.\n\nPrevent values such as `!foo {quz: bar}` to be considered as\na mapping block.","scope":"Symfony\\Component\\Yaml\\Parser","children":[{"kind":128,"name":"$value","location":[1017,29,1017,35],"scope":"trimTag"}]},{"kind":32,"name":"getLineTag","modifiers":4,"location":[1026,4,1048,5],"scope":"Symfony\\Component\\Yaml\\Parser","children":[{"kind":128,"name":"$value","location":[1026,32,1026,38],"scope":"getLineTag"},{"kind":128,"name":"$flags","location":[1026,40,1026,46],"scope":"getLineTag"},{"kind":128,"name":"$nextLineCheck","location":[1026,48,1026,69],"scope":"getLineTag","value":"true"}]}]}]}}