{"uri":"file:///Users/vega/Code/huli/manager-web/src/library/HH/Util/Base2n.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"HH\\Util","location":[11,0,11,18]},{"kind":1,"name":"HH\\Util\\Base2n","location":[26,0,302,1],"description":"Class for binary-to-text encoding with a base of 2^n\n\nThe Base2n class is for binary-to-text conversion. It employs a\ngeneralization of the algorithms used by many encoding schemes that\nuse a fixed number of bits to encode each character. In other words,\nthe base is a power of 2.\n\nEarlier versions of this class were named\nFixedBitNotation and FixedBitEncoding.","children":[{"kind":16,"name":"$_chars","modifiers":2,"location":[28,14,28,21],"scope":"HH\\Util\\Base2n"},{"kind":16,"name":"$_bitsPerCharacter","modifiers":2,"location":[29,14,29,32],"scope":"HH\\Util\\Base2n"},{"kind":16,"name":"$_radix","modifiers":2,"location":[30,14,30,21],"scope":"HH\\Util\\Base2n"},{"kind":16,"name":"$_rightPadFinalBits","modifiers":2,"location":[31,14,31,33],"scope":"HH\\Util\\Base2n"},{"kind":16,"name":"$_padFinalGroup","modifiers":2,"location":[32,14,32,29],"scope":"HH\\Util\\Base2n"},{"kind":16,"name":"$_padCharacter","modifiers":2,"location":[33,14,33,28],"scope":"HH\\Util\\Base2n"},{"kind":16,"name":"$_caseSensitive","modifiers":2,"location":[34,14,34,29],"scope":"HH\\Util\\Base2n"},{"kind":16,"name":"$_charmap","modifiers":2,"location":[35,14,35,23],"scope":"HH\\Util\\Base2n"},{"kind":32,"name":"__construct","modifiers":1,"location":[49,4,117,5],"description":"Constructor","scope":"HH\\Util\\Base2n","children":[{"kind":128,"name":"$bitsPerCharacter","location":[50,8,50,25],"description":"Bits to use for each encoded character","scope":"__construct","type":"integer"},{"kind":128,"name":"$chars","location":[51,8,51,83],"description":"Base character alphabet","scope":"__construct","value":"'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_'","type":"string"},{"kind":128,"name":"$caseSensitive","location":[52,8,52,29],"description":"To decode in a case-sensitive manner","scope":"__construct","value":"TRUE","type":"boolean"},{"kind":128,"name":"$rightPadFinalBits","location":[52,31,52,57],"description":"How to encode last character","scope":"__construct","value":"FALSE","type":"boolean"},{"kind":128,"name":"$padFinalGroup","location":[53,8,53,30],"description":"Add padding to end of encoded output","scope":"__construct","value":"FALSE","type":"boolean"},{"kind":128,"name":"$padCharacter","location":[53,32,53,51],"description":"Character to use for padding\n","scope":"__construct","value":"'='","type":"string"}]},{"kind":32,"name":"encode","modifiers":1,"location":[125,4,194,5],"description":"Encode a string","scope":"HH\\Util\\Base2n","type":"string","children":[{"kind":128,"name":"$rawString","location":[125,27,125,37],"description":"Binary data to encode","scope":"encode","type":"string"}]},{"kind":32,"name":"decode","modifiers":1,"location":[203,4,301,5],"description":"Decode a string","scope":"HH\\Util\\Base2n","type":"string","children":[{"kind":128,"name":"$encodedString","location":[203,27,203,41],"description":"Data to decode","scope":"decode","type":"string"},{"kind":128,"name":"$strict","location":[203,43,203,58],"description":"Returns NULL if $encodedString contains an undecodable character","scope":"decode","value":"FALSE","type":"boolean"}]}]}]}}