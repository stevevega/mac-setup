{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/google/protobuf/php/src/Google/Protobuf/Internal/SourceCodeInfo_Location.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"Google\\Protobuf\\Internal","location":[4,0,4,35]},{"kind":1,"name":"GPBType","modifiers":4096,"location":[6,4,6,36],"associated":[{"kind":1,"name":"Google\\Protobuf\\Internal\\GPBType"}]},{"kind":1,"name":"GPBWire","modifiers":4096,"location":[7,4,7,36],"associated":[{"kind":1,"name":"Google\\Protobuf\\Internal\\GPBWire"}]},{"kind":1,"name":"RepeatedField","modifiers":4096,"location":[8,4,8,42],"associated":[{"kind":1,"name":"Google\\Protobuf\\Internal\\RepeatedField"}]},{"kind":1,"name":"InputStream","modifiers":4096,"location":[9,4,9,40],"associated":[{"kind":1,"name":"Google\\Protobuf\\Internal\\InputStream"}]},{"kind":1,"name":"GPBUtil","modifiers":4096,"location":[11,4,11,36],"associated":[{"kind":1,"name":"Google\\Protobuf\\Internal\\GPBUtil"}]},{"kind":1,"name":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location","location":[16,0,377,1],"associated":[{"kind":1,"name":"Google\\Protobuf\\Internal\\Message"}],"description":"Protobuf type <code>google.protobuf.SourceCodeInfo.Location</code>","children":[{"kind":16,"name":"$path","modifiers":4,"location":[45,12,45,17],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":16,"name":"$has_path","modifiers":4,"location":[46,12,46,29],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":16,"name":"$span","modifiers":4,"location":[58,12,58,17],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":16,"name":"$has_span","modifiers":4,"location":[59,12,59,29],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":16,"name":"$leading_comments","modifiers":4,"location":[102,12,102,34],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":16,"name":"$has_leading_comments","modifiers":4,"location":[103,12,103,41],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":16,"name":"$trailing_comments","modifiers":4,"location":[107,12,107,35],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":16,"name":"$has_trailing_comments","modifiers":4,"location":[108,12,108,42],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":16,"name":"$leading_detached_comments","modifiers":4,"location":[112,12,112,38],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":16,"name":"$has_leading_detached_comments","modifiers":4,"location":[113,12,113,50],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":32,"name":"__construct","modifiers":1,"location":[115,4,118,5],"description":"<code>repeated string leading_detached_comments = 6;</code>","scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":32,"name":"getPath","modifiers":1,"location":[147,4,150,5],"description":"<pre>\nIdentifies which part of the FileDescriptorProto was defined at this\nlocation.\nEach element is a field number or an index.  They form a path from\nthe root FileDescriptorProto to the place where the definition.  For\nexample, this path:\n[ 4, 3, 2, 7, 1 ]\nrefers to:\nfile.message_type(3)  // 4, 3\n.field(7)         // 2, 7\n.name()           // 1\nThis is because FileDescriptorProto.message_type has field number 4:\nrepeated DescriptorProto message_type = 4;\nand DescriptorProto.field has field number 2:\nrepeated FieldDescriptorProto field = 2;\nand FieldDescriptorProto.name has field number 1:\noptional string name = 1;\nThus, the above path gives the location of a field name.  If we removed\nthe last element:\n[ 4, 3, 2, 7 ]\nthis path refers to the whole field declaration (from the beginning\nof the label to the terminating semicolon).\n</pre>\n\n<code>repeated int32 path = 1 [packed = true];</code>","scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":32,"name":"setPath","modifiers":1,"location":[179,4,184,5],"description":"<pre>\nIdentifies which part of the FileDescriptorProto was defined at this\nlocation.\nEach element is a field number or an index.  They form a path from\nthe root FileDescriptorProto to the place where the definition.  For\nexample, this path:\n[ 4, 3, 2, 7, 1 ]\nrefers to:\nfile.message_type(3)  // 4, 3\n.field(7)         // 2, 7\n.name()           // 1\nThis is because FileDescriptorProto.message_type has field number 4:\nrepeated DescriptorProto message_type = 4;\nand DescriptorProto.field has field number 2:\nrepeated FieldDescriptorProto field = 2;\nand FieldDescriptorProto.name has field number 1:\noptional string name = 1;\nThus, the above path gives the location of a field name.  If we removed\nthe last element:\n[ 4, 3, 2, 7 ]\nthis path refers to the whole field declaration (from the beginning\nof the label to the terminating semicolon).\n</pre>\n\n<code>repeated int32 path = 1 [packed = true];</code>","scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location","children":[{"kind":128,"name":"$var","location":[179,28,179,33],"scope":"setPath"}]},{"kind":32,"name":"hasPath","modifiers":1,"location":[186,4,189,5],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":32,"name":"getSpan","modifiers":1,"location":[202,4,205,5],"description":"<pre>\nAlways has exactly three or four elements: start line, start column,\nend line (optional, otherwise assumed same as start line), end column.\nThese are packed into a single field for efficiency.  Note that line\nand column numbers are zero-based -- typically you will want to add\n1 to each before displaying to a user.\n</pre>\n\n<code>repeated int32 span = 2 [packed = true];</code>","scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":32,"name":"setSpan","modifiers":1,"location":[218,4,223,5],"description":"<pre>\nAlways has exactly three or four elements: start line, start column,\nend line (optional, otherwise assumed same as start line), end column.\nThese are packed into a single field for efficiency.  Note that line\nand column numbers are zero-based -- typically you will want to add\n1 to each before displaying to a user.\n</pre>\n\n<code>repeated int32 span = 2 [packed = true];</code>","scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location","children":[{"kind":128,"name":"$var","location":[218,28,218,33],"scope":"setSpan"}]},{"kind":32,"name":"hasSpan","modifiers":1,"location":[225,4,228,5],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":32,"name":"getLeadingComments","modifiers":1,"location":[272,4,275,5],"description":"<pre>\nIf this SourceCodeInfo represents a complete declaration, these are any\ncomments appearing before and after the declaration which appear to be\nattached to the declaration.\nA series of line comments appearing on consecutive lines, with no other\ntokens appearing on those lines, will be treated as a single comment.\nleading_detached_comments will keep paragraphs of comments that appear\nbefore (but not connected to) the current element. Each paragraph,\nseparated by empty lines, will be one comment element in the repeated\nfield.\nOnly the comment content is provided; comment markers (e.g. //) are\nstripped out.  For block comments, leading whitespace and an asterisk\nwill be stripped from the beginning of each line other than the first.\nNewlines are included in the output.\nExamples:\noptional int32 foo = 1;  // Comment attached to foo.\n// Comment attached to bar.\noptional int32 bar = 2;\noptional string baz = 3;\n// Comment attached to baz.\n// Another line attached to baz.\n// Comment attached to qux.\n//\n// Another line attached to qux.\noptional double qux = 4;\n// Detached comment for corge. This is not leading or trailing comments\n// to qux or corge because there are blank lines separating it from\n// both.\n// Detached comment for corge paragraph 2.\noptional string corge = 5;\n/&#42; Block comment attached\n* to corge.  Leading asterisks\n* will be removed. *&#47;\n/&#42; Block comment attached to\n* grault. *&#47;\noptional int32 grault = 6;\n// ignored detached comments.\n</pre>\n\n<code>optional string leading_comments = 3;</code>","scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":32,"name":"setLeadingComments","modifiers":1,"location":[319,4,324,5],"description":"<pre>\nIf this SourceCodeInfo represents a complete declaration, these are any\ncomments appearing before and after the declaration which appear to be\nattached to the declaration.\nA series of line comments appearing on consecutive lines, with no other\ntokens appearing on those lines, will be treated as a single comment.\nleading_detached_comments will keep paragraphs of comments that appear\nbefore (but not connected to) the current element. Each paragraph,\nseparated by empty lines, will be one comment element in the repeated\nfield.\nOnly the comment content is provided; comment markers (e.g. //) are\nstripped out.  For block comments, leading whitespace and an asterisk\nwill be stripped from the beginning of each line other than the first.\nNewlines are included in the output.\nExamples:\noptional int32 foo = 1;  // Comment attached to foo.\n// Comment attached to bar.\noptional int32 bar = 2;\noptional string baz = 3;\n// Comment attached to baz.\n// Another line attached to baz.\n// Comment attached to qux.\n//\n// Another line attached to qux.\noptional double qux = 4;\n// Detached comment for corge. This is not leading or trailing comments\n// to qux or corge because there are blank lines separating it from\n// both.\n// Detached comment for corge paragraph 2.\noptional string corge = 5;\n/&#42; Block comment attached\n* to corge.  Leading asterisks\n* will be removed. *&#47;\n/&#42; Block comment attached to\n* grault. *&#47;\noptional int32 grault = 6;\n// ignored detached comments.\n</pre>\n\n<code>optional string leading_comments = 3;</code>","scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location","children":[{"kind":128,"name":"$var","location":[319,39,319,43],"scope":"setLeadingComments"}]},{"kind":32,"name":"hasLeadingComments","modifiers":1,"location":[326,4,329,5],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":32,"name":"getTrailingComments","modifiers":1,"location":[334,4,337,5],"description":"<code>optional string trailing_comments = 4;</code>","scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":32,"name":"setTrailingComments","modifiers":1,"location":[342,4,347,5],"description":"<code>optional string trailing_comments = 4;</code>","scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location","children":[{"kind":128,"name":"$var","location":[342,40,342,44],"scope":"setTrailingComments"}]},{"kind":32,"name":"hasTrailingComments","modifiers":1,"location":[349,4,352,5],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":32,"name":"getLeadingDetachedComments","modifiers":1,"location":[357,4,360,5],"description":"<code>repeated string leading_detached_comments = 6;</code>","scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"},{"kind":32,"name":"setLeadingDetachedComments","modifiers":1,"location":[365,4,370,5],"description":"<code>repeated string leading_detached_comments = 6;</code>","scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location","children":[{"kind":128,"name":"$var","location":[365,47,365,52],"scope":"setLeadingDetachedComments"}]},{"kind":32,"name":"hasLeadingDetachedComments","modifiers":1,"location":[372,4,375,5],"scope":"Google\\Protobuf\\Internal\\SourceCodeInfo_Location"}]}]}}