{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/sebastian/comparator/src/ArrayComparator.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"SebastianBergmann\\Comparator","location":[10,0,10,39]},{"kind":1,"name":"SebastianBergmann\\Comparator\\ArrayComparator","location":[15,0,131,1],"associated":[{"kind":1,"name":"SebastianBergmann\\Comparator\\Comparator"}],"description":"Compares arrays for equality.","children":[{"kind":32,"name":"accepts","modifiers":1,"location":[24,4,27,5],"description":"Returns whether the comparator can compare two values.","scope":"SebastianBergmann\\Comparator\\ArrayComparator","type":"bool","children":[{"kind":128,"name":"$expected","location":[24,28,24,37],"description":"The first value to compare","scope":"accepts","type":"mixed"},{"kind":128,"name":"$actual","location":[24,39,24,46],"description":"The second value to compare","scope":"accepts","type":"mixed"}]},{"kind":32,"name":"assertEquals","modifiers":1,"location":[41,4,125,5],"description":"Asserts that two values are equal.","scope":"SebastianBergmann\\Comparator\\ArrayComparator","children":[{"kind":128,"name":"$expected","location":[41,33,41,42],"description":"First value to compare","scope":"assertEquals","type":"mixed"},{"kind":128,"name":"$actual","location":[41,44,41,51],"description":"Second value to compare","scope":"assertEquals","type":"mixed"},{"kind":128,"name":"$delta","location":[41,53,41,65],"description":"Allowed numerical distance between two values to consider them equal","scope":"assertEquals","value":"0.0","type":"float"},{"kind":128,"name":"$canonicalize","location":[41,67,41,88],"description":"Arrays are sorted before comparison when set to true","scope":"assertEquals","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[41,90,41,109],"description":"Case is ignored when set to true","scope":"assertEquals","value":"false","type":"bool"},{"kind":128,"name":"$processed","location":[41,111,41,138],"description":"List of already processed elements (used to prevent infinite recursion)\n","scope":"assertEquals","value":"array()","type":"array"}]},{"kind":32,"name":"indent","modifiers":2,"location":[127,4,130,5],"scope":"SebastianBergmann\\Comparator\\ArrayComparator","children":[{"kind":128,"name":"$lines","location":[127,30,127,36],"scope":"indent"}]}]}]}}