{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/aws/aws-sdk-php/src/Aws/DynamoDb/Session/SessionHandler.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"Aws\\DynamoDb\\Session","location":[16,0,16,31]},{"kind":1,"name":"Ua","modifiers":4096,"location":[18,4,18,34],"associated":[{"kind":1,"name":"Aws\\Common\\Enum\\UaString"}]},{"kind":1,"name":"DynamoDbClient","modifiers":4096,"location":[19,4,19,31],"associated":[{"kind":1,"name":"Aws\\DynamoDb\\DynamoDbClient"}]},{"kind":1,"name":"LockingStrategyInterface","modifiers":4096,"location":[20,4,20,65],"associated":[{"kind":1,"name":"Aws\\DynamoDb\\Session\\LockingStrategy\\LockingStrategyInterface"}]},{"kind":1,"name":"LockingStrategyFactory","modifiers":4096,"location":[21,4,21,63],"associated":[{"kind":1,"name":"Aws\\DynamoDb\\Session\\LockingStrategy\\LockingStrategyFactory"}]},{"kind":1,"name":"WriteRequestBatch","modifiers":4096,"location":[22,4,22,53],"associated":[{"kind":1,"name":"Aws\\DynamoDb\\Model\\BatchRequest\\WriteRequestBatch"}]},{"kind":1,"name":"DeleteRequest","modifiers":4096,"location":[23,4,23,49],"associated":[{"kind":1,"name":"Aws\\DynamoDb\\Model\\BatchRequest\\DeleteRequest"}]},{"kind":1,"name":"Aws\\DynamoDb\\Session\\SessionHandler","location":[41,0,459,1],"associated":[{"kind":2,"name":"Aws\\DynamoDb\\Session\\SessionHandlerInterface"}],"description":"Provides an interface for using Amazon DynamoDB as a session store by hooking into PHP's session handler hooks. Once\nregistered, You may use the native `$_SESSION` superglobal and session functions, and the sessions will be stored\nautomatically in DynamoDB. DynamoDB is a great session storage solution due to its speed, scalability, and fault\ntolerance.\n\nFor maximum performance, we recommend that you keep the size of your sessions small. Items greater than 1KB require\nmore throughput in DynamoDB. Also, in this version of the session handler, session locking is turned off by default\nsince it can drive up latencies and costs under high traffic and poor session management, especially when using ajax.\nOnly turn it on if you need it.\n\nBy far, the most expensive operation is garbage collection. Therefore, we encourage you to carefully consider your\nsession garbage collection strategy. We recommend that you change the `session.gc_probability` ini setting to 0 so\nthat garbage collection is not triggered randomly. You should consider using a cron job or similar scheduling\ntechnique for triggering garbage collection at appropriate times.","children":[{"kind":16,"name":"$client","modifiers":2,"location":[46,14,46,21],"description":"The DynamoDB client","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"Aws\\DynamoDb\\DynamoDbClient"},{"kind":16,"name":"$lockingStrategy","modifiers":2,"location":[51,14,51,30],"description":"The locking strategy","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"Aws\\DynamoDb\\Session\\LockingStrategy\\LockingStrategyInterface"},{"kind":16,"name":"$config","modifiers":2,"location":[56,14,56,21],"description":"The config for the handler and locking strategy","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"Aws\\DynamoDb\\Session\\SessionHandlerConfig"},{"kind":16,"name":"$savePath","modifiers":2,"location":[61,14,61,23],"description":"The session save path","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"string"},{"kind":16,"name":"$sessionName","modifiers":2,"location":[66,14,66,26],"description":"The session name","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"string"},{"kind":16,"name":"$dataRead","modifiers":2,"location":[71,14,71,23],"description":"Stores the serialized data that was read for tracking changes","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"string"},{"kind":16,"name":"$openSessionId","modifiers":2,"location":[76,14,76,28],"description":"Keeps track of the open session's ID","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"string"},{"kind":16,"name":"$sessionWritten","modifiers":2,"location":[81,14,81,29],"description":"Keeps track of whether the session has been written","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"bool"},{"kind":32,"name":"factory","modifiers":33,"location":[104,4,119,5],"description":"Factory method to create a new DynamoDB Session Handler\n\nThe configuration array accepts the following array keys and values:\n- locking_strategy:         Locking strategy fused for doing session locking. Default: null\n- dynamodb_client:          DynamoDbClient object used for performing DynamoDB operations\n- table_name:               Name of the DynamoDB table in which to store the sessions. Default: \"sessions\"\n- hash_key:                 Name of the hash key in the DynamoDB sessions table. Default: \"id\"\n- session_lifetime:         Lifetime of an inactive session before it should be garbage collected.\n- consistent_read:          Whether or not to use DynamoDB consistent reads for `GetItem`. Default: true\n- automatic_gc:             Whether or not to use PHP's session auto garbage collection triggers.\n- gc_batch_size:            Batch size used for removing expired sessions during garbage collection. Default: 25\n- gc_operation_delay:       Delay between service operations during garbage collection\n- max_lock_wait_time:       Maximum time (in seconds) to wait to acquire a lock before giving up\n- min_lock_retry_microtime: Minimum time (in microseconds) to wait between attempts to acquire a lock\n- max_lock_retry_microtime: Maximum time (in microseconds) to wait between attempts to acquire a lock","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"Aws\\DynamoDb\\Session\\SessionHandler","children":[{"kind":128,"name":"$config","location":[104,35,104,58],"description":"Configuration options\n","scope":"factory","value":"array()","type":"array"}]},{"kind":32,"name":"__construct","modifiers":1,"location":[128,4,136,5],"description":"Constructs a new DynamoDB Session Handler","scope":"Aws\\DynamoDb\\Session\\SessionHandler","children":[{"kind":128,"name":"$client","location":[129,8,129,30],"description":"Client for doing DynamoDB operations","scope":"__construct","typeSource":1,"type":"Aws\\DynamoDb\\DynamoDbClient"},{"kind":128,"name":"$strategy","location":[130,8,130,42],"description":"Locking strategy for performing session locking logic","scope":"__construct","typeSource":1,"type":"Aws\\DynamoDb\\Session\\LockingStrategy\\LockingStrategyInterface"},{"kind":128,"name":"$config","location":[131,8,131,36],"description":"Configuration options for the session handler","scope":"__construct","typeSource":1,"type":"Aws\\DynamoDb\\Session\\SessionHandlerConfig"}]},{"kind":32,"name":"__destruct","modifiers":1,"location":[146,4,149,5],"description":"Destruct the session handler and make sure the session gets written\n\nNOTE: It is usually better practice to call `session_write_close()` manually in your application as soon as\nsession modifications are complete. This is especially true if session locking is enabled.","scope":"Aws\\DynamoDb\\Session\\SessionHandler"},{"kind":32,"name":"register","modifiers":1,"location":[158,4,173,5],"description":"Register the DynamoDB session handler.\n\nUses the PHP-provided method to register this class as a session handler.","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"bool"},{"kind":32,"name":"isSessionOpen","modifiers":1,"location":[180,4,183,5],"description":"Checks if the session is open and writable","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"bool"},{"kind":32,"name":"isSessionWritten","modifiers":1,"location":[190,4,193,5],"description":"Checks if the session has been written","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"bool"},{"kind":32,"name":"createSessionsTable","modifiers":1,"location":[205,4,246,5],"description":"Creates a table in DynamoDB for session storage according to provided configuration options.\n\nNote: This is a one-time operation. It may be better to do this via the AWS management console ahead of time.","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"array","children":[{"kind":128,"name":"$readCapacityUnits","location":[205,40,205,58],"description":"RCUs for table read throughput","scope":"createSessionsTable","type":"int"},{"kind":128,"name":"$writeCapacityUnits","location":[205,60,205,79],"description":"WCUs table write throughput\n","scope":"createSessionsTable","type":"int"}]},{"kind":32,"name":"open","modifiers":1,"location":[258,4,264,5],"description":"Open a session for writing. Triggered by session_start()\n\nPart of the standard PHP session handler interface","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"bool","children":[{"kind":128,"name":"$savePath","location":[258,25,258,34],"description":"The session save path","scope":"open","type":"string"},{"kind":128,"name":"$sessionName","location":[258,36,258,48],"description":"The session name\n","scope":"open","type":"string"}]},{"kind":32,"name":"close","modifiers":1,"location":[273,4,283,5],"description":"Close a session from writing\n\nPart of the standard PHP session handler interface","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"bool"},{"kind":32,"name":"read","modifiers":1,"location":[294,4,314,5],"description":"Read a session stored in DynamoDB\n\nPart of the standard PHP session handler interface","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"string","children":[{"kind":128,"name":"$id","location":[294,25,294,28],"description":"The session ID\n","scope":"read","type":"string"}]},{"kind":32,"name":"write","modifiers":1,"location":[326,4,336,5],"description":"Write a session to DynamoDB\n\nPart of the standard PHP session handler interface","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"bool","children":[{"kind":128,"name":"$id","location":[326,26,326,29],"description":"The session ID","scope":"write","type":"string"},{"kind":128,"name":"$data","location":[326,31,326,36],"description":"The serialized session data to write\n","scope":"write","type":"string"}]},{"kind":32,"name":"destroy","modifiers":1,"location":[347,4,355,5],"description":"Delete a session stored in DynamoDB\n\nPart of the standard PHP session handler interface","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"bool","children":[{"kind":128,"name":"$id","location":[347,28,347,31],"description":"The session ID\n","scope":"destroy","type":"string"}]},{"kind":32,"name":"gc","modifiers":1,"location":[366,4,375,5],"description":"Triggers garbage collection on expired sessions\n\nPart of the standard PHP session handler interface","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"bool","children":[{"kind":128,"name":"$maxLifetime","location":[366,23,366,35],"description":"The value of `session.gc_maxlifetime`. Ignored\n","scope":"gc","type":"int"}]},{"kind":32,"name":"garbageCollect","modifiers":1,"location":[383,4,446,5],"description":"Performs garbage collection on the sessions stored in the DynamoDB table\n\nIf triggering garbage collection manually, use this method. If your garbage collection is triggered automatically\nby php (not recommended), then use the `gc` method.","scope":"Aws\\DynamoDb\\Session\\SessionHandler"},{"kind":32,"name":"formatId","modifiers":2,"location":[455,4,458,5],"description":"Prepend the session ID with the session name","scope":"Aws\\DynamoDb\\Session\\SessionHandler","type":"string","children":[{"kind":128,"name":"$id","location":[455,32,455,35],"description":"The session ID\n","scope":"formatId","type":"string"}]}]}]}}