{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/phpunit/phpunit/src/Framework/Assert/Functions.php","root":{"kind":0,"name":"","children":[{"kind":64,"name":"any","location":[16,0,22,1],"description":"Returns a matcher that matches when the method is executed\nzero or more times.","type":"PHPUnit_Framework_MockObject_Matcher_AnyInvokedCount"},{"kind":64,"name":"anything","location":[29,0,35,1],"description":"Returns a PHPUnit_Framework_Constraint_IsAnything matcher object.","type":"PHPUnit_Framework_Constraint_IsAnything"},{"kind":64,"name":"arrayHasKey","location":[44,0,50,1],"description":"Returns a PHPUnit_Framework_Constraint_ArrayHasKey matcher object.","type":"PHPUnit_Framework_Constraint_ArrayHasKey","children":[{"kind":128,"name":"$key","location":[44,21,44,25],"scope":"arrayHasKey","type":"mixed"}]},{"kind":64,"name":"assertArrayHasKey","location":[59,0,65,1],"description":"Asserts that an array has a specified key.","children":[{"kind":128,"name":"$key","location":[59,27,59,31],"scope":"assertArrayHasKey","type":"mixed"},{"kind":128,"name":"$array","location":[59,33,59,39],"scope":"assertArrayHasKey","type":"array|ArrayAccess"},{"kind":128,"name":"$message","location":[59,41,59,54],"scope":"assertArrayHasKey","value":"''","type":"string"}]},{"kind":64,"name":"assertArraySubset","location":[75,0,81,1],"description":"Asserts that an array has a specified subset.","children":[{"kind":128,"name":"$subset","location":[75,27,75,34],"scope":"assertArraySubset","type":"array|ArrayAccess"},{"kind":128,"name":"$array","location":[75,36,75,42],"scope":"assertArraySubset","type":"array|ArrayAccess"},{"kind":128,"name":"$strict","location":[75,44,75,59],"description":"Check for object identity","scope":"assertArraySubset","value":"false","type":"bool"},{"kind":128,"name":"$message","location":[75,61,75,74],"scope":"assertArraySubset","value":"''","type":"string"}]},{"kind":64,"name":"assertArrayNotHasKey","location":[90,0,96,1],"description":"Asserts that an array does not have a specified key.","children":[{"kind":128,"name":"$key","location":[90,30,90,34],"scope":"assertArrayNotHasKey","type":"mixed"},{"kind":128,"name":"$array","location":[90,36,90,42],"scope":"assertArrayNotHasKey","type":"array|ArrayAccess"},{"kind":128,"name":"$message","location":[90,44,90,57],"scope":"assertArrayNotHasKey","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeContains","location":[110,0,116,1],"description":"Asserts that a haystack that is stored in a static attribute of a class\nor an attribute of an object contains a needle.","children":[{"kind":128,"name":"$needle","location":[110,33,110,40],"scope":"assertAttributeContains","type":"mixed"},{"kind":128,"name":"$haystackAttributeName","location":[110,42,110,64],"scope":"assertAttributeContains","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[110,66,110,88],"scope":"assertAttributeContains","type":"mixed"},{"kind":128,"name":"$message","location":[110,90,110,103],"scope":"assertAttributeContains","value":"''","type":"string"},{"kind":128,"name":"$ignoreCase","location":[110,105,110,124],"scope":"assertAttributeContains","value":"false","type":"bool"},{"kind":128,"name":"$checkForObjectIdentity","location":[110,126,110,156],"scope":"assertAttributeContains","value":"true","type":"bool"},{"kind":128,"name":"$checkForNonObjectIdentity","location":[110,158,110,192],"scope":"assertAttributeContains","value":"false","type":"bool"}]},{"kind":64,"name":"assertAttributeContainsOnly","location":[128,0,134,1],"description":"Asserts that a haystack that is stored in a static attribute of a class\nor an attribute of an object contains only values of a given type.","children":[{"kind":128,"name":"$type","location":[128,37,128,42],"scope":"assertAttributeContainsOnly","type":"string"},{"kind":128,"name":"$haystackAttributeName","location":[128,44,128,66],"scope":"assertAttributeContainsOnly","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[128,68,128,90],"scope":"assertAttributeContainsOnly","type":"mixed"},{"kind":128,"name":"$isNativeType","location":[128,92,128,112],"scope":"assertAttributeContainsOnly","value":"null","type":"bool"},{"kind":128,"name":"$message","location":[128,114,128,127],"scope":"assertAttributeContainsOnly","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeCount","location":[145,0,151,1],"description":"Asserts the number of elements of an array, Countable or Traversable\nthat is stored in an attribute.","children":[{"kind":128,"name":"$expectedCount","location":[145,30,145,44],"scope":"assertAttributeCount","type":"int"},{"kind":128,"name":"$haystackAttributeName","location":[145,46,145,68],"scope":"assertAttributeCount","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[145,70,145,92],"scope":"assertAttributeCount","type":"mixed"},{"kind":128,"name":"$message","location":[145,94,145,107],"scope":"assertAttributeCount","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeEmpty","location":[161,0,167,1],"description":"Asserts that a static attribute of a class or an attribute of an object\nis empty.","children":[{"kind":128,"name":"$haystackAttributeName","location":[161,30,161,52],"scope":"assertAttributeEmpty","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[161,54,161,76],"scope":"assertAttributeEmpty","type":"mixed"},{"kind":128,"name":"$message","location":[161,78,161,91],"scope":"assertAttributeEmpty","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeEquals","location":[181,0,187,1],"description":"Asserts that a variable is equal to an attribute of an object.","children":[{"kind":128,"name":"$expected","location":[181,31,181,40],"scope":"assertAttributeEquals","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[181,42,181,62],"scope":"assertAttributeEquals","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[181,64,181,84],"scope":"assertAttributeEquals","type":"string"},{"kind":128,"name":"$message","location":[181,86,181,99],"scope":"assertAttributeEquals","value":"''","type":"string"},{"kind":128,"name":"$delta","location":[181,101,181,113],"scope":"assertAttributeEquals","value":"0.0","type":"float"},{"kind":128,"name":"$maxDepth","location":[181,115,181,129],"scope":"assertAttributeEquals","value":"10","type":"int"},{"kind":128,"name":"$canonicalize","location":[181,131,181,152],"scope":"assertAttributeEquals","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[181,154,181,173],"scope":"assertAttributeEquals","value":"false","type":"bool"}]},{"kind":64,"name":"assertAttributeGreaterThan","location":[197,0,203,1],"description":"Asserts that an attribute is greater than another value.","children":[{"kind":128,"name":"$expected","location":[197,36,197,45],"scope":"assertAttributeGreaterThan","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[197,47,197,67],"scope":"assertAttributeGreaterThan","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[197,69,197,89],"scope":"assertAttributeGreaterThan","type":"string"},{"kind":128,"name":"$message","location":[197,91,197,104],"scope":"assertAttributeGreaterThan","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeGreaterThanOrEqual","location":[213,0,219,1],"description":"Asserts that an attribute is greater than or equal to another value.","children":[{"kind":128,"name":"$expected","location":[213,43,213,52],"scope":"assertAttributeGreaterThanOrEqual","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[213,54,213,74],"scope":"assertAttributeGreaterThanOrEqual","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[213,76,213,96],"scope":"assertAttributeGreaterThanOrEqual","type":"string"},{"kind":128,"name":"$message","location":[213,98,213,111],"scope":"assertAttributeGreaterThanOrEqual","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeInstanceOf","location":[229,0,235,1],"description":"Asserts that an attribute is of a given type.","children":[{"kind":128,"name":"$expected","location":[229,35,229,44],"scope":"assertAttributeInstanceOf","type":"string"},{"kind":128,"name":"$attributeName","location":[229,46,229,60],"scope":"assertAttributeInstanceOf","type":"string"},{"kind":128,"name":"$classOrObject","location":[229,62,229,76],"scope":"assertAttributeInstanceOf","type":"mixed"},{"kind":128,"name":"$message","location":[229,78,229,91],"scope":"assertAttributeInstanceOf","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeInternalType","location":[245,0,251,1],"description":"Asserts that an attribute is of a given type.","children":[{"kind":128,"name":"$expected","location":[245,37,245,46],"scope":"assertAttributeInternalType","type":"string"},{"kind":128,"name":"$attributeName","location":[245,48,245,62],"scope":"assertAttributeInternalType","type":"string"},{"kind":128,"name":"$classOrObject","location":[245,64,245,78],"scope":"assertAttributeInternalType","type":"mixed"},{"kind":128,"name":"$message","location":[245,80,245,93],"scope":"assertAttributeInternalType","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeLessThan","location":[261,0,267,1],"description":"Asserts that an attribute is smaller than another value.","children":[{"kind":128,"name":"$expected","location":[261,33,261,42],"scope":"assertAttributeLessThan","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[261,44,261,64],"scope":"assertAttributeLessThan","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[261,66,261,86],"scope":"assertAttributeLessThan","type":"string"},{"kind":128,"name":"$message","location":[261,88,261,101],"scope":"assertAttributeLessThan","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeLessThanOrEqual","location":[277,0,283,1],"description":"Asserts that an attribute is smaller than or equal to another value.","children":[{"kind":128,"name":"$expected","location":[277,40,277,49],"scope":"assertAttributeLessThanOrEqual","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[277,51,277,71],"scope":"assertAttributeLessThanOrEqual","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[277,73,277,93],"scope":"assertAttributeLessThanOrEqual","type":"string"},{"kind":128,"name":"$message","location":[277,95,277,108],"scope":"assertAttributeLessThanOrEqual","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeNotContains","location":[297,0,303,1],"description":"Asserts that a haystack that is stored in a static attribute of a class\nor an attribute of an object does not contain a needle.","children":[{"kind":128,"name":"$needle","location":[297,36,297,43],"scope":"assertAttributeNotContains","type":"mixed"},{"kind":128,"name":"$haystackAttributeName","location":[297,45,297,67],"scope":"assertAttributeNotContains","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[297,69,297,91],"scope":"assertAttributeNotContains","type":"mixed"},{"kind":128,"name":"$message","location":[297,93,297,106],"scope":"assertAttributeNotContains","value":"''","type":"string"},{"kind":128,"name":"$ignoreCase","location":[297,108,297,127],"scope":"assertAttributeNotContains","value":"false","type":"bool"},{"kind":128,"name":"$checkForObjectIdentity","location":[297,129,297,159],"scope":"assertAttributeNotContains","value":"true","type":"bool"},{"kind":128,"name":"$checkForNonObjectIdentity","location":[297,161,297,195],"scope":"assertAttributeNotContains","value":"false","type":"bool"}]},{"kind":64,"name":"assertAttributeNotContainsOnly","location":[316,0,322,1],"description":"Asserts that a haystack that is stored in a static attribute of a class\nor an attribute of an object does not contain only values of a given\ntype.","children":[{"kind":128,"name":"$type","location":[316,40,316,45],"scope":"assertAttributeNotContainsOnly","type":"string"},{"kind":128,"name":"$haystackAttributeName","location":[316,47,316,69],"scope":"assertAttributeNotContainsOnly","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[316,71,316,93],"scope":"assertAttributeNotContainsOnly","type":"mixed"},{"kind":128,"name":"$isNativeType","location":[316,95,316,115],"scope":"assertAttributeNotContainsOnly","value":"null","type":"bool"},{"kind":128,"name":"$message","location":[316,117,316,130],"scope":"assertAttributeNotContainsOnly","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeNotCount","location":[333,0,339,1],"description":"Asserts the number of elements of an array, Countable or Traversable\nthat is stored in an attribute.","children":[{"kind":128,"name":"$expectedCount","location":[333,33,333,47],"scope":"assertAttributeNotCount","type":"int"},{"kind":128,"name":"$haystackAttributeName","location":[333,49,333,71],"scope":"assertAttributeNotCount","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[333,73,333,95],"scope":"assertAttributeNotCount","type":"mixed"},{"kind":128,"name":"$message","location":[333,97,333,110],"scope":"assertAttributeNotCount","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeNotEmpty","location":[349,0,355,1],"description":"Asserts that a static attribute of a class or an attribute of an object\nis not empty.","children":[{"kind":128,"name":"$haystackAttributeName","location":[349,33,349,55],"scope":"assertAttributeNotEmpty","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[349,57,349,79],"scope":"assertAttributeNotEmpty","type":"mixed"},{"kind":128,"name":"$message","location":[349,81,349,94],"scope":"assertAttributeNotEmpty","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeNotEquals","location":[369,0,375,1],"description":"Asserts that a variable is not equal to an attribute of an object.","children":[{"kind":128,"name":"$expected","location":[369,34,369,43],"scope":"assertAttributeNotEquals","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[369,45,369,65],"scope":"assertAttributeNotEquals","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[369,67,369,87],"scope":"assertAttributeNotEquals","type":"string"},{"kind":128,"name":"$message","location":[369,89,369,102],"scope":"assertAttributeNotEquals","value":"''","type":"string"},{"kind":128,"name":"$delta","location":[369,104,369,116],"scope":"assertAttributeNotEquals","value":"0.0","type":"float"},{"kind":128,"name":"$maxDepth","location":[369,118,369,132],"scope":"assertAttributeNotEquals","value":"10","type":"int"},{"kind":128,"name":"$canonicalize","location":[369,134,369,155],"scope":"assertAttributeNotEquals","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[369,157,369,176],"scope":"assertAttributeNotEquals","value":"false","type":"bool"}]},{"kind":64,"name":"assertAttributeNotInstanceOf","location":[385,0,391,1],"description":"Asserts that an attribute is of a given type.","children":[{"kind":128,"name":"$expected","location":[385,38,385,47],"scope":"assertAttributeNotInstanceOf","type":"string"},{"kind":128,"name":"$attributeName","location":[385,49,385,63],"scope":"assertAttributeNotInstanceOf","type":"string"},{"kind":128,"name":"$classOrObject","location":[385,65,385,79],"scope":"assertAttributeNotInstanceOf","type":"mixed"},{"kind":128,"name":"$message","location":[385,81,385,94],"scope":"assertAttributeNotInstanceOf","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeNotInternalType","location":[401,0,407,1],"description":"Asserts that an attribute is of a given type.","children":[{"kind":128,"name":"$expected","location":[401,40,401,49],"scope":"assertAttributeNotInternalType","type":"string"},{"kind":128,"name":"$attributeName","location":[401,51,401,65],"scope":"assertAttributeNotInternalType","type":"string"},{"kind":128,"name":"$classOrObject","location":[401,67,401,81],"scope":"assertAttributeNotInternalType","type":"mixed"},{"kind":128,"name":"$message","location":[401,83,401,96],"scope":"assertAttributeNotInternalType","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeNotSame","location":[418,0,424,1],"description":"Asserts that a variable and an attribute of an object do not have the\nsame type and value.","children":[{"kind":128,"name":"$expected","location":[418,32,418,41],"scope":"assertAttributeNotSame","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[418,43,418,63],"scope":"assertAttributeNotSame","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[418,65,418,85],"scope":"assertAttributeNotSame","type":"object"},{"kind":128,"name":"$message","location":[418,87,418,100],"scope":"assertAttributeNotSame","value":"''","type":"string"}]},{"kind":64,"name":"assertAttributeSame","location":[435,0,441,1],"description":"Asserts that a variable and an attribute of an object have the same type\nand value.","children":[{"kind":128,"name":"$expected","location":[435,29,435,38],"scope":"assertAttributeSame","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[435,40,435,60],"scope":"assertAttributeSame","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[435,62,435,82],"scope":"assertAttributeSame","type":"object"},{"kind":128,"name":"$message","location":[435,84,435,97],"scope":"assertAttributeSame","value":"''","type":"string"}]},{"kind":64,"name":"assertClassHasAttribute","location":[450,0,456,1],"description":"Asserts that a class has a specified attribute.","children":[{"kind":128,"name":"$attributeName","location":[450,33,450,47],"scope":"assertClassHasAttribute","type":"string"},{"kind":128,"name":"$className","location":[450,49,450,59],"scope":"assertClassHasAttribute","type":"string"},{"kind":128,"name":"$message","location":[450,61,450,74],"scope":"assertClassHasAttribute","value":"''","type":"string"}]},{"kind":64,"name":"assertClassHasStaticAttribute","location":[465,0,471,1],"description":"Asserts that a class has a specified static attribute.","children":[{"kind":128,"name":"$attributeName","location":[465,39,465,53],"scope":"assertClassHasStaticAttribute","type":"string"},{"kind":128,"name":"$className","location":[465,55,465,65],"scope":"assertClassHasStaticAttribute","type":"string"},{"kind":128,"name":"$message","location":[465,67,465,80],"scope":"assertClassHasStaticAttribute","value":"''","type":"string"}]},{"kind":64,"name":"assertClassNotHasAttribute","location":[480,0,486,1],"description":"Asserts that a class does not have a specified attribute.","children":[{"kind":128,"name":"$attributeName","location":[480,36,480,50],"scope":"assertClassNotHasAttribute","type":"string"},{"kind":128,"name":"$className","location":[480,52,480,62],"scope":"assertClassNotHasAttribute","type":"string"},{"kind":128,"name":"$message","location":[480,64,480,77],"scope":"assertClassNotHasAttribute","value":"''","type":"string"}]},{"kind":64,"name":"assertClassNotHasStaticAttribute","location":[495,0,501,1],"description":"Asserts that a class does not have a specified static attribute.","children":[{"kind":128,"name":"$attributeName","location":[495,42,495,56],"scope":"assertClassNotHasStaticAttribute","type":"string"},{"kind":128,"name":"$className","location":[495,58,495,68],"scope":"assertClassNotHasStaticAttribute","type":"string"},{"kind":128,"name":"$message","location":[495,70,495,83],"scope":"assertClassNotHasStaticAttribute","value":"''","type":"string"}]},{"kind":64,"name":"assertContains","location":[513,0,519,1],"description":"Asserts that a haystack contains a needle.","children":[{"kind":128,"name":"$needle","location":[513,24,513,31],"scope":"assertContains","type":"mixed"},{"kind":128,"name":"$haystack","location":[513,33,513,42],"scope":"assertContains","type":"mixed"},{"kind":128,"name":"$message","location":[513,44,513,57],"scope":"assertContains","value":"''","type":"string"},{"kind":128,"name":"$ignoreCase","location":[513,59,513,78],"scope":"assertContains","value":"false","type":"bool"},{"kind":128,"name":"$checkForObjectIdentity","location":[513,80,513,110],"scope":"assertContains","value":"true","type":"bool"},{"kind":128,"name":"$checkForNonObjectIdentity","location":[513,112,513,146],"scope":"assertContains","value":"false","type":"bool"}]},{"kind":64,"name":"assertContainsOnly","location":[529,0,535,1],"description":"Asserts that a haystack contains only values of a given type.","children":[{"kind":128,"name":"$type","location":[529,28,529,33],"scope":"assertContainsOnly","type":"string"},{"kind":128,"name":"$haystack","location":[529,35,529,44],"scope":"assertContainsOnly","type":"mixed"},{"kind":128,"name":"$isNativeType","location":[529,46,529,66],"scope":"assertContainsOnly","value":"null","type":"bool"},{"kind":128,"name":"$message","location":[529,68,529,81],"scope":"assertContainsOnly","value":"''","type":"string"}]},{"kind":64,"name":"assertContainsOnlyInstancesOf","location":[544,0,550,1],"description":"Asserts that a haystack contains only instances of a given classname","children":[{"kind":128,"name":"$classname","location":[544,39,544,49],"scope":"assertContainsOnlyInstancesOf","type":"string"},{"kind":128,"name":"$haystack","location":[544,51,544,60],"scope":"assertContainsOnlyInstancesOf","type":"array|Traversable"},{"kind":128,"name":"$message","location":[544,62,544,75],"scope":"assertContainsOnlyInstancesOf","value":"''","type":"string"}]},{"kind":64,"name":"assertCount","location":[559,0,565,1],"description":"Asserts the number of elements of an array, Countable or Traversable.","children":[{"kind":128,"name":"$expectedCount","location":[559,21,559,35],"scope":"assertCount","type":"int"},{"kind":128,"name":"$haystack","location":[559,37,559,46],"scope":"assertCount","type":"mixed"},{"kind":128,"name":"$message","location":[559,48,559,61],"scope":"assertCount","value":"''","type":"string"}]},{"kind":64,"name":"assertEmpty","location":[575,0,581,1],"description":"Asserts that a variable is empty.","children":[{"kind":128,"name":"$actual","location":[575,21,575,28],"scope":"assertEmpty","type":"mixed"},{"kind":128,"name":"$message","location":[575,30,575,43],"scope":"assertEmpty","value":"''","type":"string"}]},{"kind":64,"name":"assertEqualXMLStructure","location":[591,0,597,1],"description":"Asserts that a hierarchy of DOMElements matches.","children":[{"kind":128,"name":"$expectedElement","location":[591,33,591,60],"scope":"assertEqualXMLStructure","typeSource":1,"type":"DOMElement"},{"kind":128,"name":"$actualElement","location":[591,62,591,87],"scope":"assertEqualXMLStructure","typeSource":1,"type":"DOMElement"},{"kind":128,"name":"$checkAttributes","location":[591,89,591,113],"scope":"assertEqualXMLStructure","value":"false","type":"bool"},{"kind":128,"name":"$message","location":[591,115,591,128],"scope":"assertEqualXMLStructure","value":"''","type":"string"}]},{"kind":64,"name":"assertEquals","location":[610,0,616,1],"description":"Asserts that two variables are equal.","children":[{"kind":128,"name":"$expected","location":[610,22,610,31],"scope":"assertEquals","type":"mixed"},{"kind":128,"name":"$actual","location":[610,33,610,40],"scope":"assertEquals","type":"mixed"},{"kind":128,"name":"$message","location":[610,42,610,55],"scope":"assertEquals","value":"''","type":"string"},{"kind":128,"name":"$delta","location":[610,57,610,69],"scope":"assertEquals","value":"0.0","type":"float"},{"kind":128,"name":"$maxDepth","location":[610,71,610,85],"scope":"assertEquals","value":"10","type":"int"},{"kind":128,"name":"$canonicalize","location":[610,87,610,108],"scope":"assertEquals","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[610,110,610,129],"scope":"assertEquals","value":"false","type":"bool"}]},{"kind":64,"name":"assertNotTrue","location":[626,0,632,1],"description":"Asserts that a condition is not true.","children":[{"kind":128,"name":"$condition","location":[626,23,626,33],"scope":"assertNotTrue","type":"bool"},{"kind":128,"name":"$message","location":[626,35,626,48],"scope":"assertNotTrue","value":"''","type":"string"}]},{"kind":64,"name":"assertFalse","location":[642,0,648,1],"description":"Asserts that a condition is false.","children":[{"kind":128,"name":"$condition","location":[642,21,642,31],"scope":"assertFalse","type":"bool"},{"kind":128,"name":"$message","location":[642,33,642,46],"scope":"assertFalse","value":"''","type":"string"}]},{"kind":64,"name":"assertFileEquals","location":[660,0,666,1],"description":"Asserts that the contents of one file is equal to the contents of another\nfile.","children":[{"kind":128,"name":"$expected","location":[660,26,660,35],"scope":"assertFileEquals","type":"string"},{"kind":128,"name":"$actual","location":[660,37,660,44],"scope":"assertFileEquals","type":"string"},{"kind":128,"name":"$message","location":[660,46,660,59],"scope":"assertFileEquals","value":"''","type":"string"},{"kind":128,"name":"$canonicalize","location":[660,61,660,82],"scope":"assertFileEquals","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[660,84,660,103],"scope":"assertFileEquals","value":"false","type":"bool"}]},{"kind":64,"name":"assertFileExists","location":[674,0,680,1],"description":"Asserts that a file exists.","children":[{"kind":128,"name":"$filename","location":[674,26,674,35],"scope":"assertFileExists","type":"string"},{"kind":128,"name":"$message","location":[674,37,674,50],"scope":"assertFileExists","value":"''","type":"string"}]},{"kind":64,"name":"assertFileNotEquals","location":[692,0,698,1],"description":"Asserts that the contents of one file is not equal to the contents of\nanother file.","children":[{"kind":128,"name":"$expected","location":[692,29,692,38],"scope":"assertFileNotEquals","type":"string"},{"kind":128,"name":"$actual","location":[692,40,692,47],"scope":"assertFileNotEquals","type":"string"},{"kind":128,"name":"$message","location":[692,49,692,62],"scope":"assertFileNotEquals","value":"''","type":"string"},{"kind":128,"name":"$canonicalize","location":[692,64,692,85],"scope":"assertFileNotEquals","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[692,87,692,106],"scope":"assertFileNotEquals","value":"false","type":"bool"}]},{"kind":64,"name":"assertFileNotExists","location":[706,0,712,1],"description":"Asserts that a file does not exist.","children":[{"kind":128,"name":"$filename","location":[706,29,706,38],"scope":"assertFileNotExists","type":"string"},{"kind":128,"name":"$message","location":[706,40,706,53],"scope":"assertFileNotExists","value":"''","type":"string"}]},{"kind":64,"name":"assertGreaterThan","location":[721,0,727,1],"description":"Asserts that a value is greater than another value.","children":[{"kind":128,"name":"$expected","location":[721,27,721,36],"scope":"assertGreaterThan","type":"mixed"},{"kind":128,"name":"$actual","location":[721,38,721,45],"scope":"assertGreaterThan","type":"mixed"},{"kind":128,"name":"$message","location":[721,47,721,60],"scope":"assertGreaterThan","value":"''","type":"string"}]},{"kind":64,"name":"assertGreaterThanOrEqual","location":[736,0,742,1],"description":"Asserts that a value is greater than or equal to another value.","children":[{"kind":128,"name":"$expected","location":[736,34,736,43],"scope":"assertGreaterThanOrEqual","type":"mixed"},{"kind":128,"name":"$actual","location":[736,45,736,52],"scope":"assertGreaterThanOrEqual","type":"mixed"},{"kind":128,"name":"$message","location":[736,54,736,67],"scope":"assertGreaterThanOrEqual","value":"''","type":"string"}]},{"kind":64,"name":"assertInstanceOf","location":[751,0,757,1],"description":"Asserts that a variable is of a given type.","children":[{"kind":128,"name":"$expected","location":[751,26,751,35],"scope":"assertInstanceOf","type":"string"},{"kind":128,"name":"$actual","location":[751,37,751,44],"scope":"assertInstanceOf","type":"mixed"},{"kind":128,"name":"$message","location":[751,46,751,59],"scope":"assertInstanceOf","value":"''","type":"string"}]},{"kind":64,"name":"assertInternalType","location":[766,0,772,1],"description":"Asserts that a variable is of a given type.","children":[{"kind":128,"name":"$expected","location":[766,28,766,37],"scope":"assertInternalType","type":"string"},{"kind":128,"name":"$actual","location":[766,39,766,46],"scope":"assertInternalType","type":"mixed"},{"kind":128,"name":"$message","location":[766,48,766,61],"scope":"assertInternalType","value":"''","type":"string"}]},{"kind":64,"name":"assertJson","location":[780,0,786,1],"description":"Asserts that a string is a valid JSON string.","children":[{"kind":128,"name":"$actualJson","location":[780,20,780,31],"scope":"assertJson","type":"string"},{"kind":128,"name":"$message","location":[780,33,780,46],"scope":"assertJson","value":"''","type":"string"}]},{"kind":64,"name":"assertJsonFileEqualsJsonFile","location":[795,0,801,1],"description":"Asserts that two JSON files are equal.","children":[{"kind":128,"name":"$expectedFile","location":[795,38,795,51],"scope":"assertJsonFileEqualsJsonFile","type":"string"},{"kind":128,"name":"$actualFile","location":[795,53,795,64],"scope":"assertJsonFileEqualsJsonFile","type":"string"},{"kind":128,"name":"$message","location":[795,66,795,79],"scope":"assertJsonFileEqualsJsonFile","value":"''","type":"string"}]},{"kind":64,"name":"assertJsonFileNotEqualsJsonFile","location":[810,0,816,1],"description":"Asserts that two JSON files are not equal.","children":[{"kind":128,"name":"$expectedFile","location":[810,41,810,54],"scope":"assertJsonFileNotEqualsJsonFile","type":"string"},{"kind":128,"name":"$actualFile","location":[810,56,810,67],"scope":"assertJsonFileNotEqualsJsonFile","type":"string"},{"kind":128,"name":"$message","location":[810,69,810,82],"scope":"assertJsonFileNotEqualsJsonFile","value":"''","type":"string"}]},{"kind":64,"name":"assertJsonStringEqualsJsonFile","location":[825,0,831,1],"description":"Asserts that the generated JSON encoded object and the content of the given file are equal.","children":[{"kind":128,"name":"$expectedFile","location":[825,40,825,53],"scope":"assertJsonStringEqualsJsonFile","type":"string"},{"kind":128,"name":"$actualJson","location":[825,55,825,66],"scope":"assertJsonStringEqualsJsonFile","type":"string"},{"kind":128,"name":"$message","location":[825,68,825,81],"scope":"assertJsonStringEqualsJsonFile","value":"''","type":"string"}]},{"kind":64,"name":"assertJsonStringEqualsJsonString","location":[840,0,846,1],"description":"Asserts that two given JSON encoded objects or arrays are equal.","children":[{"kind":128,"name":"$expectedJson","location":[840,42,840,55],"scope":"assertJsonStringEqualsJsonString","type":"string"},{"kind":128,"name":"$actualJson","location":[840,57,840,68],"scope":"assertJsonStringEqualsJsonString","type":"string"},{"kind":128,"name":"$message","location":[840,70,840,83],"scope":"assertJsonStringEqualsJsonString","value":"''","type":"string"}]},{"kind":64,"name":"assertJsonStringNotEqualsJsonFile","location":[855,0,861,1],"description":"Asserts that the generated JSON encoded object and the content of the given file are not equal.","children":[{"kind":128,"name":"$expectedFile","location":[855,43,855,56],"scope":"assertJsonStringNotEqualsJsonFile","type":"string"},{"kind":128,"name":"$actualJson","location":[855,58,855,69],"scope":"assertJsonStringNotEqualsJsonFile","type":"string"},{"kind":128,"name":"$message","location":[855,71,855,84],"scope":"assertJsonStringNotEqualsJsonFile","value":"''","type":"string"}]},{"kind":64,"name":"assertJsonStringNotEqualsJsonString","location":[870,0,876,1],"description":"Asserts that two given JSON encoded objects or arrays are not equal.","children":[{"kind":128,"name":"$expectedJson","location":[870,45,870,58],"scope":"assertJsonStringNotEqualsJsonString","type":"string"},{"kind":128,"name":"$actualJson","location":[870,60,870,71],"scope":"assertJsonStringNotEqualsJsonString","type":"string"},{"kind":128,"name":"$message","location":[870,73,870,86],"scope":"assertJsonStringNotEqualsJsonString","value":"''","type":"string"}]},{"kind":64,"name":"assertLessThan","location":[885,0,891,1],"description":"Asserts that a value is smaller than another value.","children":[{"kind":128,"name":"$expected","location":[885,24,885,33],"scope":"assertLessThan","type":"mixed"},{"kind":128,"name":"$actual","location":[885,35,885,42],"scope":"assertLessThan","type":"mixed"},{"kind":128,"name":"$message","location":[885,44,885,57],"scope":"assertLessThan","value":"''","type":"string"}]},{"kind":64,"name":"assertLessThanOrEqual","location":[900,0,906,1],"description":"Asserts that a value is smaller than or equal to another value.","children":[{"kind":128,"name":"$expected","location":[900,31,900,40],"scope":"assertLessThanOrEqual","type":"mixed"},{"kind":128,"name":"$actual","location":[900,42,900,49],"scope":"assertLessThanOrEqual","type":"mixed"},{"kind":128,"name":"$message","location":[900,51,900,64],"scope":"assertLessThanOrEqual","value":"''","type":"string"}]},{"kind":64,"name":"assertFinite","location":[914,0,920,1],"description":"Asserts that a variable is finite.","children":[{"kind":128,"name":"$actual","location":[914,22,914,29],"scope":"assertFinite","type":"mixed"},{"kind":128,"name":"$message","location":[914,31,914,44],"scope":"assertFinite","value":"''","type":"string"}]},{"kind":64,"name":"assertInfinite","location":[928,0,934,1],"description":"Asserts that a variable is infinite.","children":[{"kind":128,"name":"$actual","location":[928,24,928,31],"scope":"assertInfinite","type":"mixed"},{"kind":128,"name":"$message","location":[928,33,928,46],"scope":"assertInfinite","value":"''","type":"string"}]},{"kind":64,"name":"assertNan","location":[942,0,948,1],"description":"Asserts that a variable is nan.","children":[{"kind":128,"name":"$actual","location":[942,19,942,26],"scope":"assertNan","type":"mixed"},{"kind":128,"name":"$message","location":[942,28,942,41],"scope":"assertNan","value":"''","type":"string"}]},{"kind":64,"name":"assertNotContains","location":[960,0,966,1],"description":"Asserts that a haystack does not contain a needle.","children":[{"kind":128,"name":"$needle","location":[960,27,960,34],"scope":"assertNotContains","type":"mixed"},{"kind":128,"name":"$haystack","location":[960,36,960,45],"scope":"assertNotContains","type":"mixed"},{"kind":128,"name":"$message","location":[960,47,960,60],"scope":"assertNotContains","value":"''","type":"string"},{"kind":128,"name":"$ignoreCase","location":[960,62,960,81],"scope":"assertNotContains","value":"false","type":"bool"},{"kind":128,"name":"$checkForObjectIdentity","location":[960,83,960,113],"scope":"assertNotContains","value":"true","type":"bool"},{"kind":128,"name":"$checkForNonObjectIdentity","location":[960,115,960,149],"scope":"assertNotContains","value":"false","type":"bool"}]},{"kind":64,"name":"assertNotContainsOnly","location":[976,0,982,1],"description":"Asserts that a haystack does not contain only values of a given type.","children":[{"kind":128,"name":"$type","location":[976,31,976,36],"scope":"assertNotContainsOnly","type":"string"},{"kind":128,"name":"$haystack","location":[976,38,976,47],"scope":"assertNotContainsOnly","type":"mixed"},{"kind":128,"name":"$isNativeType","location":[976,49,976,69],"scope":"assertNotContainsOnly","value":"null","type":"bool"},{"kind":128,"name":"$message","location":[976,71,976,84],"scope":"assertNotContainsOnly","value":"''","type":"string"}]},{"kind":64,"name":"assertNotCount","location":[991,0,997,1],"description":"Asserts the number of elements of an array, Countable or Traversable.","children":[{"kind":128,"name":"$expectedCount","location":[991,24,991,38],"scope":"assertNotCount","type":"int"},{"kind":128,"name":"$haystack","location":[991,40,991,49],"scope":"assertNotCount","type":"mixed"},{"kind":128,"name":"$message","location":[991,51,991,64],"scope":"assertNotCount","value":"''","type":"string"}]},{"kind":64,"name":"assertNotEmpty","location":[1007,0,1013,1],"description":"Asserts that a variable is not empty.","children":[{"kind":128,"name":"$actual","location":[1007,24,1007,31],"scope":"assertNotEmpty","type":"mixed"},{"kind":128,"name":"$message","location":[1007,33,1007,46],"scope":"assertNotEmpty","value":"''","type":"string"}]},{"kind":64,"name":"assertNotEquals","location":[1026,0,1032,1],"description":"Asserts that two variables are not equal.","children":[{"kind":128,"name":"$expected","location":[1026,25,1026,34],"scope":"assertNotEquals","type":"mixed"},{"kind":128,"name":"$actual","location":[1026,36,1026,43],"scope":"assertNotEquals","type":"mixed"},{"kind":128,"name":"$message","location":[1026,45,1026,58],"scope":"assertNotEquals","value":"''","type":"string"},{"kind":128,"name":"$delta","location":[1026,60,1026,72],"scope":"assertNotEquals","value":"0.0","type":"float"},{"kind":128,"name":"$maxDepth","location":[1026,74,1026,88],"scope":"assertNotEquals","value":"10","type":"int"},{"kind":128,"name":"$canonicalize","location":[1026,90,1026,111],"scope":"assertNotEquals","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[1026,113,1026,132],"scope":"assertNotEquals","value":"false","type":"bool"}]},{"kind":64,"name":"assertNotInstanceOf","location":[1041,0,1047,1],"description":"Asserts that a variable is not of a given type.","children":[{"kind":128,"name":"$expected","location":[1041,29,1041,38],"scope":"assertNotInstanceOf","type":"string"},{"kind":128,"name":"$actual","location":[1041,40,1041,47],"scope":"assertNotInstanceOf","type":"mixed"},{"kind":128,"name":"$message","location":[1041,49,1041,62],"scope":"assertNotInstanceOf","value":"''","type":"string"}]},{"kind":64,"name":"assertNotInternalType","location":[1056,0,1062,1],"description":"Asserts that a variable is not of a given type.","children":[{"kind":128,"name":"$expected","location":[1056,31,1056,40],"scope":"assertNotInternalType","type":"string"},{"kind":128,"name":"$actual","location":[1056,42,1056,49],"scope":"assertNotInternalType","type":"mixed"},{"kind":128,"name":"$message","location":[1056,51,1056,64],"scope":"assertNotInternalType","value":"''","type":"string"}]},{"kind":64,"name":"assertNotFalse","location":[1072,0,1078,1],"description":"Asserts that a condition is not false.","children":[{"kind":128,"name":"$condition","location":[1072,24,1072,34],"scope":"assertNotFalse","type":"bool"},{"kind":128,"name":"$message","location":[1072,36,1072,49],"scope":"assertNotFalse","value":"''","type":"string"}]},{"kind":64,"name":"assertNotNull","location":[1086,0,1092,1],"description":"Asserts that a variable is not null.","children":[{"kind":128,"name":"$actual","location":[1086,23,1086,30],"scope":"assertNotNull","type":"mixed"},{"kind":128,"name":"$message","location":[1086,32,1086,45],"scope":"assertNotNull","value":"''","type":"string"}]},{"kind":64,"name":"assertNotRegExp","location":[1101,0,1107,1],"description":"Asserts that a string does not match a given regular expression.","children":[{"kind":128,"name":"$pattern","location":[1101,25,1101,33],"scope":"assertNotRegExp","type":"string"},{"kind":128,"name":"$string","location":[1101,35,1101,42],"scope":"assertNotRegExp","type":"string"},{"kind":128,"name":"$message","location":[1101,44,1101,57],"scope":"assertNotRegExp","value":"''","type":"string"}]},{"kind":64,"name":"assertNotSame","location":[1118,0,1124,1],"description":"Asserts that two variables do not have the same type and value.\nUsed on objects, it asserts that two variables do not reference\nthe same object.","children":[{"kind":128,"name":"$expected","location":[1118,23,1118,32],"scope":"assertNotSame","type":"mixed"},{"kind":128,"name":"$actual","location":[1118,34,1118,41],"scope":"assertNotSame","type":"mixed"},{"kind":128,"name":"$message","location":[1118,43,1118,56],"scope":"assertNotSame","value":"''","type":"string"}]},{"kind":64,"name":"assertNotSameSize","location":[1134,0,1140,1],"description":"Assert that the size of two arrays (or `Countable` or `Traversable` objects)\nis not the same.","children":[{"kind":128,"name":"$expected","location":[1134,27,1134,36],"scope":"assertNotSameSize","type":"array|Countable|Traversable"},{"kind":128,"name":"$actual","location":[1134,38,1134,45],"scope":"assertNotSameSize","type":"array|Countable|Traversable"},{"kind":128,"name":"$message","location":[1134,47,1134,60],"scope":"assertNotSameSize","value":"''","type":"string"}]},{"kind":64,"name":"assertNull","location":[1148,0,1154,1],"description":"Asserts that a variable is null.","children":[{"kind":128,"name":"$actual","location":[1148,20,1148,27],"scope":"assertNull","type":"mixed"},{"kind":128,"name":"$message","location":[1148,29,1148,42],"scope":"assertNull","value":"''","type":"string"}]},{"kind":64,"name":"assertObjectHasAttribute","location":[1163,0,1169,1],"description":"Asserts that an object has a specified attribute.","children":[{"kind":128,"name":"$attributeName","location":[1163,34,1163,48],"scope":"assertObjectHasAttribute","type":"string"},{"kind":128,"name":"$object","location":[1163,50,1163,57],"scope":"assertObjectHasAttribute","type":"object"},{"kind":128,"name":"$message","location":[1163,59,1163,72],"scope":"assertObjectHasAttribute","value":"''","type":"string"}]},{"kind":64,"name":"assertObjectNotHasAttribute","location":[1178,0,1184,1],"description":"Asserts that an object does not have a specified attribute.","children":[{"kind":128,"name":"$attributeName","location":[1178,37,1178,51],"scope":"assertObjectNotHasAttribute","type":"string"},{"kind":128,"name":"$object","location":[1178,53,1178,60],"scope":"assertObjectNotHasAttribute","type":"object"},{"kind":128,"name":"$message","location":[1178,62,1178,75],"scope":"assertObjectNotHasAttribute","value":"''","type":"string"}]},{"kind":64,"name":"assertRegExp","location":[1193,0,1199,1],"description":"Asserts that a string matches a given regular expression.","children":[{"kind":128,"name":"$pattern","location":[1193,22,1193,30],"scope":"assertRegExp","type":"string"},{"kind":128,"name":"$string","location":[1193,32,1193,39],"scope":"assertRegExp","type":"string"},{"kind":128,"name":"$message","location":[1193,41,1193,54],"scope":"assertRegExp","value":"''","type":"string"}]},{"kind":64,"name":"assertSame","location":[1210,0,1216,1],"description":"Asserts that two variables have the same type and value.\nUsed on objects, it asserts that two variables reference\nthe same object.","children":[{"kind":128,"name":"$expected","location":[1210,20,1210,29],"scope":"assertSame","type":"mixed"},{"kind":128,"name":"$actual","location":[1210,31,1210,38],"scope":"assertSame","type":"mixed"},{"kind":128,"name":"$message","location":[1210,40,1210,53],"scope":"assertSame","value":"''","type":"string"}]},{"kind":64,"name":"assertSameSize","location":[1226,0,1232,1],"description":"Assert that the size of two arrays (or `Countable` or `Traversable` objects)\nis the same.","children":[{"kind":128,"name":"$expected","location":[1226,24,1226,33],"scope":"assertSameSize","type":"array|Countable|Traversable"},{"kind":128,"name":"$actual","location":[1226,35,1226,42],"scope":"assertSameSize","type":"array|Countable|Traversable"},{"kind":128,"name":"$message","location":[1226,44,1226,57],"scope":"assertSameSize","value":"''","type":"string"}]},{"kind":64,"name":"assertStringEndsNotWith","location":[1241,0,1247,1],"description":"Asserts that a string ends not with a given prefix.","children":[{"kind":128,"name":"$suffix","location":[1241,33,1241,40],"scope":"assertStringEndsNotWith","type":"string"},{"kind":128,"name":"$string","location":[1241,42,1241,49],"scope":"assertStringEndsNotWith","type":"string"},{"kind":128,"name":"$message","location":[1241,51,1241,64],"scope":"assertStringEndsNotWith","value":"''","type":"string"}]},{"kind":64,"name":"assertStringEndsWith","location":[1256,0,1262,1],"description":"Asserts that a string ends with a given prefix.","children":[{"kind":128,"name":"$suffix","location":[1256,30,1256,37],"scope":"assertStringEndsWith","type":"string"},{"kind":128,"name":"$string","location":[1256,39,1256,46],"scope":"assertStringEndsWith","type":"string"},{"kind":128,"name":"$message","location":[1256,48,1256,61],"scope":"assertStringEndsWith","value":"''","type":"string"}]},{"kind":64,"name":"assertStringEqualsFile","location":[1274,0,1280,1],"description":"Asserts that the contents of a string is equal\nto the contents of a file.","children":[{"kind":128,"name":"$expectedFile","location":[1274,32,1274,45],"scope":"assertStringEqualsFile","type":"string"},{"kind":128,"name":"$actualString","location":[1274,47,1274,60],"scope":"assertStringEqualsFile","type":"string"},{"kind":128,"name":"$message","location":[1274,62,1274,75],"scope":"assertStringEqualsFile","value":"''","type":"string"},{"kind":128,"name":"$canonicalize","location":[1274,77,1274,98],"scope":"assertStringEqualsFile","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[1274,100,1274,119],"scope":"assertStringEqualsFile","value":"false","type":"bool"}]},{"kind":64,"name":"assertStringMatchesFormat","location":[1289,0,1295,1],"description":"Asserts that a string matches a given format string.","children":[{"kind":128,"name":"$format","location":[1289,35,1289,42],"scope":"assertStringMatchesFormat","type":"string"},{"kind":128,"name":"$string","location":[1289,44,1289,51],"scope":"assertStringMatchesFormat","type":"string"},{"kind":128,"name":"$message","location":[1289,53,1289,66],"scope":"assertStringMatchesFormat","value":"''","type":"string"}]},{"kind":64,"name":"assertStringMatchesFormatFile","location":[1304,0,1310,1],"description":"Asserts that a string matches a given format file.","children":[{"kind":128,"name":"$formatFile","location":[1304,39,1304,50],"scope":"assertStringMatchesFormatFile","type":"string"},{"kind":128,"name":"$string","location":[1304,52,1304,59],"scope":"assertStringMatchesFormatFile","type":"string"},{"kind":128,"name":"$message","location":[1304,61,1304,74],"scope":"assertStringMatchesFormatFile","value":"''","type":"string"}]},{"kind":64,"name":"assertStringNotEqualsFile","location":[1322,0,1328,1],"description":"Asserts that the contents of a string is not equal\nto the contents of a file.","children":[{"kind":128,"name":"$expectedFile","location":[1322,35,1322,48],"scope":"assertStringNotEqualsFile","type":"string"},{"kind":128,"name":"$actualString","location":[1322,50,1322,63],"scope":"assertStringNotEqualsFile","type":"string"},{"kind":128,"name":"$message","location":[1322,65,1322,78],"scope":"assertStringNotEqualsFile","value":"''","type":"string"},{"kind":128,"name":"$canonicalize","location":[1322,80,1322,101],"scope":"assertStringNotEqualsFile","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[1322,103,1322,122],"scope":"assertStringNotEqualsFile","value":"false","type":"bool"}]},{"kind":64,"name":"assertStringNotMatchesFormat","location":[1337,0,1343,1],"description":"Asserts that a string does not match a given format string.","children":[{"kind":128,"name":"$format","location":[1337,38,1337,45],"scope":"assertStringNotMatchesFormat","type":"string"},{"kind":128,"name":"$string","location":[1337,47,1337,54],"scope":"assertStringNotMatchesFormat","type":"string"},{"kind":128,"name":"$message","location":[1337,56,1337,69],"scope":"assertStringNotMatchesFormat","value":"''","type":"string"}]},{"kind":64,"name":"assertStringNotMatchesFormatFile","location":[1352,0,1358,1],"description":"Asserts that a string does not match a given format string.","children":[{"kind":128,"name":"$formatFile","location":[1352,42,1352,53],"scope":"assertStringNotMatchesFormatFile","type":"string"},{"kind":128,"name":"$string","location":[1352,55,1352,62],"scope":"assertStringNotMatchesFormatFile","type":"string"},{"kind":128,"name":"$message","location":[1352,64,1352,77],"scope":"assertStringNotMatchesFormatFile","value":"''","type":"string"}]},{"kind":64,"name":"assertStringStartsNotWith","location":[1367,0,1373,1],"description":"Asserts that a string starts not with a given prefix.","children":[{"kind":128,"name":"$prefix","location":[1367,35,1367,42],"scope":"assertStringStartsNotWith","type":"string"},{"kind":128,"name":"$string","location":[1367,44,1367,51],"scope":"assertStringStartsNotWith","type":"string"},{"kind":128,"name":"$message","location":[1367,53,1367,66],"scope":"assertStringStartsNotWith","value":"''","type":"string"}]},{"kind":64,"name":"assertStringStartsWith","location":[1382,0,1388,1],"description":"Asserts that a string starts with a given prefix.","children":[{"kind":128,"name":"$prefix","location":[1382,32,1382,39],"scope":"assertStringStartsWith","type":"string"},{"kind":128,"name":"$string","location":[1382,41,1382,48],"scope":"assertStringStartsWith","type":"string"},{"kind":128,"name":"$message","location":[1382,50,1382,63],"scope":"assertStringStartsWith","value":"''","type":"string"}]},{"kind":64,"name":"assertThat","location":[1397,0,1403,1],"description":"Evaluates a PHPUnit_Framework_Constraint matcher object.","children":[{"kind":128,"name":"$value","location":[1397,20,1397,26],"scope":"assertThat","type":"mixed"},{"kind":128,"name":"$constraint","location":[1397,28,1397,68],"scope":"assertThat","typeSource":1,"type":"PHPUnit_Framework_Constraint"},{"kind":128,"name":"$message","location":[1397,70,1397,83],"scope":"assertThat","value":"''","type":"string"}]},{"kind":64,"name":"assertTrue","location":[1413,0,1419,1],"description":"Asserts that a condition is true.","children":[{"kind":128,"name":"$condition","location":[1413,20,1413,30],"scope":"assertTrue","type":"bool"},{"kind":128,"name":"$message","location":[1413,32,1413,45],"scope":"assertTrue","value":"''","type":"string"}]},{"kind":64,"name":"assertXmlFileEqualsXmlFile","location":[1428,0,1434,1],"description":"Asserts that two XML files are equal.","children":[{"kind":128,"name":"$expectedFile","location":[1428,36,1428,49],"scope":"assertXmlFileEqualsXmlFile","type":"string"},{"kind":128,"name":"$actualFile","location":[1428,51,1428,62],"scope":"assertXmlFileEqualsXmlFile","type":"string"},{"kind":128,"name":"$message","location":[1428,64,1428,77],"scope":"assertXmlFileEqualsXmlFile","value":"''","type":"string"}]},{"kind":64,"name":"assertXmlFileNotEqualsXmlFile","location":[1443,0,1449,1],"description":"Asserts that two XML files are not equal.","children":[{"kind":128,"name":"$expectedFile","location":[1443,39,1443,52],"scope":"assertXmlFileNotEqualsXmlFile","type":"string"},{"kind":128,"name":"$actualFile","location":[1443,54,1443,65],"scope":"assertXmlFileNotEqualsXmlFile","type":"string"},{"kind":128,"name":"$message","location":[1443,67,1443,80],"scope":"assertXmlFileNotEqualsXmlFile","value":"''","type":"string"}]},{"kind":64,"name":"assertXmlStringEqualsXmlFile","location":[1458,0,1464,1],"description":"Asserts that two XML documents are equal.","children":[{"kind":128,"name":"$expectedFile","location":[1458,38,1458,51],"scope":"assertXmlStringEqualsXmlFile","type":"string"},{"kind":128,"name":"$actualXml","location":[1458,53,1458,63],"scope":"assertXmlStringEqualsXmlFile","type":"string"},{"kind":128,"name":"$message","location":[1458,65,1458,78],"scope":"assertXmlStringEqualsXmlFile","value":"''","type":"string"}]},{"kind":64,"name":"assertXmlStringEqualsXmlString","location":[1473,0,1479,1],"description":"Asserts that two XML documents are equal.","children":[{"kind":128,"name":"$expectedXml","location":[1473,40,1473,52],"scope":"assertXmlStringEqualsXmlString","type":"string"},{"kind":128,"name":"$actualXml","location":[1473,54,1473,64],"scope":"assertXmlStringEqualsXmlString","type":"string"},{"kind":128,"name":"$message","location":[1473,66,1473,79],"scope":"assertXmlStringEqualsXmlString","value":"''","type":"string"}]},{"kind":64,"name":"assertXmlStringNotEqualsXmlFile","location":[1488,0,1494,1],"description":"Asserts that two XML documents are not equal.","children":[{"kind":128,"name":"$expectedFile","location":[1488,41,1488,54],"scope":"assertXmlStringNotEqualsXmlFile","type":"string"},{"kind":128,"name":"$actualXml","location":[1488,56,1488,66],"scope":"assertXmlStringNotEqualsXmlFile","type":"string"},{"kind":128,"name":"$message","location":[1488,68,1488,81],"scope":"assertXmlStringNotEqualsXmlFile","value":"''","type":"string"}]},{"kind":64,"name":"assertXmlStringNotEqualsXmlString","location":[1503,0,1509,1],"description":"Asserts that two XML documents are not equal.","children":[{"kind":128,"name":"$expectedXml","location":[1503,43,1503,55],"scope":"assertXmlStringNotEqualsXmlString","type":"string"},{"kind":128,"name":"$actualXml","location":[1503,57,1503,67],"scope":"assertXmlStringNotEqualsXmlString","type":"string"},{"kind":128,"name":"$message","location":[1503,69,1503,82],"scope":"assertXmlStringNotEqualsXmlString","value":"''","type":"string"}]},{"kind":64,"name":"at","location":[1519,0,1525,1],"description":"Returns a matcher that matches when the method is executed\nat the given $index.","type":"PHPUnit_Framework_MockObject_Matcher_InvokedAtIndex","children":[{"kind":128,"name":"$index","location":[1519,12,1519,18],"scope":"at","type":"int"}]},{"kind":64,"name":"atLeastOnce","location":[1532,0,1538,1],"description":"Returns a matcher that matches when the method is executed at least once.","type":"PHPUnit_Framework_MockObject_Matcher_InvokedAtLeastOnce"},{"kind":64,"name":"attribute","location":[1548,0,1554,1],"description":"Returns a PHPUnit_Framework_Constraint_Attribute matcher object.","type":"PHPUnit_Framework_Constraint_Attribute","children":[{"kind":128,"name":"$constraint","location":[1548,19,1548,59],"scope":"attribute","typeSource":1,"type":"PHPUnit_Framework_Constraint"},{"kind":128,"name":"$attributeName","location":[1548,61,1548,75],"scope":"attribute","type":"string"}]},{"kind":64,"name":"attributeEqualTo","location":[1570,0,1576,1],"description":"Returns a PHPUnit_Framework_Constraint_IsEqual matcher object\nthat is wrapped in a PHPUnit_Framework_Constraint_Attribute matcher\nobject.","type":"PHPUnit_Framework_Constraint_Attribute","children":[{"kind":128,"name":"$attributeName","location":[1570,26,1570,40],"scope":"attributeEqualTo","type":"string"},{"kind":128,"name":"$value","location":[1570,42,1570,48],"scope":"attributeEqualTo","type":"mixed"},{"kind":128,"name":"$delta","location":[1570,50,1570,62],"scope":"attributeEqualTo","value":"0.0","type":"float"},{"kind":128,"name":"$maxDepth","location":[1570,64,1570,78],"scope":"attributeEqualTo","value":"10","type":"int"},{"kind":128,"name":"$canonicalize","location":[1570,80,1570,101],"scope":"attributeEqualTo","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[1570,103,1570,122],"scope":"attributeEqualTo","value":"false","type":"bool"}]},{"kind":64,"name":"callback","location":[1585,0,1591,1],"description":"Returns a PHPUnit_Framework_Constraint_Callback matcher object.","type":"PHPUnit_Framework_Constraint_Callback","children":[{"kind":128,"name":"$callback","location":[1585,18,1585,27],"scope":"callback","type":"callable"}]},{"kind":64,"name":"classHasAttribute","location":[1600,0,1606,1],"description":"Returns a PHPUnit_Framework_Constraint_ClassHasAttribute matcher object.","type":"PHPUnit_Framework_Constraint_ClassHasAttribute","children":[{"kind":128,"name":"$attributeName","location":[1600,27,1600,41],"scope":"classHasAttribute","type":"string"}]},{"kind":64,"name":"classHasStaticAttribute","location":[1616,0,1622,1],"description":"Returns a PHPUnit_Framework_Constraint_ClassHasStaticAttribute matcher\nobject.","type":"PHPUnit_Framework_Constraint_ClassHasStaticAttribute","children":[{"kind":128,"name":"$attributeName","location":[1616,33,1616,47],"scope":"classHasStaticAttribute","type":"string"}]},{"kind":64,"name":"contains","location":[1634,0,1640,1],"description":"Returns a PHPUnit_Framework_Constraint_TraversableContains matcher\nobject.","type":"PHPUnit_Framework_Constraint_TraversableContains","children":[{"kind":128,"name":"$value","location":[1634,18,1634,24],"scope":"contains","type":"mixed"},{"kind":128,"name":"$checkForObjectIdentity","location":[1634,26,1634,56],"scope":"contains","value":"true","type":"bool"},{"kind":128,"name":"$checkForNonObjectIdentity","location":[1634,58,1634,92],"scope":"contains","value":"false","type":"bool"}]},{"kind":64,"name":"containsOnly","location":[1650,0,1656,1],"description":"Returns a PHPUnit_Framework_Constraint_TraversableContainsOnly matcher\nobject.","type":"PHPUnit_Framework_Constraint_TraversableContainsOnly","children":[{"kind":128,"name":"$type","location":[1650,22,1650,27],"scope":"containsOnly","type":"string"}]},{"kind":64,"name":"containsOnlyInstancesOf","location":[1666,0,1672,1],"description":"Returns a PHPUnit_Framework_Constraint_TraversableContainsOnly matcher\nobject.","type":"PHPUnit_Framework_Constraint_TraversableContainsOnly","children":[{"kind":128,"name":"$classname","location":[1666,33,1666,43],"scope":"containsOnlyInstancesOf","type":"string"}]},{"kind":64,"name":"countOf","location":[1681,0,1687,1],"description":"Returns a PHPUnit_Framework_Constraint_Count matcher object.","type":"Count","children":[{"kind":128,"name":"$count","location":[1681,17,1681,23],"scope":"countOf","type":"int"}]},{"kind":64,"name":"equalTo","location":[1700,0,1706,1],"description":"Returns a PHPUnit_Framework_Constraint_IsEqual matcher object.","type":"PHPUnit_Framework_Constraint_IsEqual","children":[{"kind":128,"name":"$value","location":[1700,17,1700,23],"scope":"equalTo","type":"mixed"},{"kind":128,"name":"$delta","location":[1700,25,1700,37],"scope":"equalTo","value":"0.0","type":"float"},{"kind":128,"name":"$maxDepth","location":[1700,39,1700,53],"scope":"equalTo","value":"10","type":"int"},{"kind":128,"name":"$canonicalize","location":[1700,55,1700,76],"scope":"equalTo","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[1700,78,1700,97],"scope":"equalTo","value":"false","type":"bool"}]},{"kind":64,"name":"exactly","location":[1716,0,1722,1],"description":"Returns a matcher that matches when the method is executed\nexactly $count times.","type":"PHPUnit_Framework_MockObject_Matcher_InvokedCount","children":[{"kind":128,"name":"$count","location":[1716,17,1716,23],"scope":"exactly","type":"int"}]},{"kind":64,"name":"fileExists","location":[1729,0,1735,1],"description":"Returns a PHPUnit_Framework_Constraint_FileExists matcher object.","type":"PHPUnit_Framework_Constraint_FileExists"},{"kind":64,"name":"greaterThan","location":[1744,0,1750,1],"description":"Returns a PHPUnit_Framework_Constraint_GreaterThan matcher object.","type":"PHPUnit_Framework_Constraint_GreaterThan","children":[{"kind":128,"name":"$value","location":[1744,21,1744,27],"scope":"greaterThan","type":"mixed"}]},{"kind":64,"name":"greaterThanOrEqual","location":[1761,0,1767,1],"description":"Returns a PHPUnit_Framework_Constraint_Or matcher object that wraps\na PHPUnit_Framework_Constraint_IsEqual and a\nPHPUnit_Framework_Constraint_GreaterThan matcher object.","type":"PHPUnit_Framework_Constraint_Or","children":[{"kind":128,"name":"$value","location":[1761,28,1761,34],"scope":"greaterThanOrEqual","type":"mixed"}]},{"kind":64,"name":"identicalTo","location":[1776,0,1782,1],"description":"Returns a PHPUnit_Framework_Constraint_IsIdentical matcher object.","type":"PHPUnit_Framework_Constraint_IsIdentical","children":[{"kind":128,"name":"$value","location":[1776,21,1776,27],"scope":"identicalTo","type":"mixed"}]},{"kind":64,"name":"isEmpty","location":[1789,0,1795,1],"description":"Returns a PHPUnit_Framework_Constraint_IsEmpty matcher object.","type":"PHPUnit_Framework_Constraint_IsEmpty"},{"kind":64,"name":"isFalse","location":[1802,0,1808,1],"description":"Returns a PHPUnit_Framework_Constraint_IsFalse matcher object.","type":"PHPUnit_Framework_Constraint_IsFalse"},{"kind":64,"name":"isInstanceOf","location":[1817,0,1823,1],"description":"Returns a PHPUnit_Framework_Constraint_IsInstanceOf matcher object.","type":"PHPUnit_Framework_Constraint_IsInstanceOf","children":[{"kind":128,"name":"$className","location":[1817,22,1817,32],"scope":"isInstanceOf","type":"string"}]},{"kind":64,"name":"isJson","location":[1830,0,1836,1],"description":"Returns a PHPUnit_Framework_Constraint_IsJson matcher object.","type":"PHPUnit_Framework_Constraint_IsJson"},{"kind":64,"name":"isNull","location":[1843,0,1849,1],"description":"Returns a PHPUnit_Framework_Constraint_IsNull matcher object.","type":"PHPUnit_Framework_Constraint_IsNull"},{"kind":64,"name":"isTrue","location":[1856,0,1862,1],"description":"Returns a PHPUnit_Framework_Constraint_IsTrue matcher object.","type":"PHPUnit_Framework_Constraint_IsTrue"},{"kind":64,"name":"isType","location":[1871,0,1877,1],"description":"Returns a PHPUnit_Framework_Constraint_IsType matcher object.","type":"PHPUnit_Framework_Constraint_IsType","children":[{"kind":128,"name":"$type","location":[1871,16,1871,21],"scope":"isType","type":"string"}]},{"kind":64,"name":"lessThan","location":[1886,0,1892,1],"description":"Returns a PHPUnit_Framework_Constraint_LessThan matcher object.","type":"PHPUnit_Framework_Constraint_LessThan","children":[{"kind":128,"name":"$value","location":[1886,18,1886,24],"scope":"lessThan","type":"mixed"}]},{"kind":64,"name":"lessThanOrEqual","location":[1903,0,1909,1],"description":"Returns a PHPUnit_Framework_Constraint_Or matcher object that wraps\na PHPUnit_Framework_Constraint_IsEqual and a\nPHPUnit_Framework_Constraint_LessThan matcher object.","type":"PHPUnit_Framework_Constraint_Or","children":[{"kind":128,"name":"$value","location":[1903,25,1903,31],"scope":"lessThanOrEqual","type":"mixed"}]},{"kind":64,"name":"logicalAnd","location":[1916,0,1922,1],"description":"Returns a PHPUnit_Framework_Constraint_And matcher object.","type":"PHPUnit_Framework_Constraint_And"},{"kind":64,"name":"logicalNot","location":[1931,0,1937,1],"description":"Returns a PHPUnit_Framework_Constraint_Not matcher object.","type":"PHPUnit_Framework_Constraint_Not","children":[{"kind":128,"name":"$constraint","location":[1931,20,1931,60],"scope":"logicalNot","typeSource":1,"type":"PHPUnit_Framework_Constraint"}]},{"kind":64,"name":"logicalOr","location":[1944,0,1950,1],"description":"Returns a PHPUnit_Framework_Constraint_Or matcher object.","type":"PHPUnit_Framework_Constraint_Or"},{"kind":64,"name":"logicalXor","location":[1957,0,1963,1],"description":"Returns a PHPUnit_Framework_Constraint_Xor matcher object.","type":"PHPUnit_Framework_Constraint_Xor"},{"kind":64,"name":"matches","location":[1972,0,1978,1],"description":"Returns a PHPUnit_Framework_Constraint_StringMatches matcher object.","type":"PHPUnit_Framework_Constraint_StringMatches","children":[{"kind":128,"name":"$string","location":[1972,17,1972,24],"scope":"matches","type":"string"}]},{"kind":64,"name":"matchesRegularExpression","location":[1987,0,1993,1],"description":"Returns a PHPUnit_Framework_Constraint_PCREMatch matcher object.","type":"PHPUnit_Framework_Constraint_PCREMatch","children":[{"kind":128,"name":"$pattern","location":[1987,34,1987,42],"scope":"matchesRegularExpression","type":"string"}]},{"kind":64,"name":"never","location":[2000,0,2006,1],"description":"Returns a matcher that matches when the method is never executed.","type":"PHPUnit_Framework_MockObject_Matcher_InvokedCount"},{"kind":64,"name":"objectHasAttribute","location":[2015,0,2021,1],"description":"Returns a PHPUnit_Framework_Constraint_ObjectHasAttribute matcher object.","type":"PHPUnit_Framework_Constraint_ObjectHasAttribute","children":[{"kind":128,"name":"$attributeName","location":[2015,28,2015,42],"scope":"objectHasAttribute","type":"string"}]},{"kind":64,"name":"onConsecutiveCalls","location":[2028,0,2034,1],"type":"PHPUnit_Framework_MockObject_Stub_ConsecutiveCalls"},{"kind":64,"name":"once","location":[2041,0,2047,1],"description":"Returns a matcher that matches when the method is executed exactly once.","type":"PHPUnit_Framework_MockObject_Matcher_InvokedCount"},{"kind":64,"name":"returnArgument","location":[2054,0,2060,1],"type":"PHPUnit_Framework_MockObject_Stub_ReturnArgument","children":[{"kind":128,"name":"$argumentIndex","location":[2054,24,2054,38],"scope":"returnArgument","type":"int"}]},{"kind":64,"name":"returnCallback","location":[2067,0,2073,1],"type":"PHPUnit_Framework_MockObject_Stub_ReturnCallback","children":[{"kind":128,"name":"$callback","location":[2067,24,2067,33],"scope":"returnCallback","type":"mixed"}]},{"kind":64,"name":"returnSelf","location":[2082,0,2088,1],"description":"Returns the current object.\n\nThis method is useful when mocking a fluent interface.","type":"PHPUnit_Framework_MockObject_Stub_ReturnSelf"},{"kind":64,"name":"returnValue","location":[2095,0,2101,1],"type":"PHPUnit_Framework_MockObject_Stub_Return","children":[{"kind":128,"name":"$value","location":[2095,21,2095,27],"scope":"returnValue","type":"mixed"}]},{"kind":64,"name":"returnValueMap","location":[2108,0,2114,1],"type":"PHPUnit_Framework_MockObject_Stub_ReturnValueMap","children":[{"kind":128,"name":"$valueMap","location":[2108,24,2108,39],"scope":"returnValueMap","type":"array"}]},{"kind":64,"name":"stringContains","location":[2124,0,2130,1],"description":"Returns a PHPUnit_Framework_Constraint_StringContains matcher object.","type":"PHPUnit_Framework_Constraint_StringContains","children":[{"kind":128,"name":"$string","location":[2124,24,2124,31],"scope":"stringContains","type":"string"},{"kind":128,"name":"$case","location":[2124,33,2124,45],"scope":"stringContains","value":"true","type":"bool"}]},{"kind":64,"name":"stringEndsWith","location":[2139,0,2145,1],"description":"Returns a PHPUnit_Framework_Constraint_StringEndsWith matcher object.","type":"PHPUnit_Framework_Constraint_StringEndsWith","children":[{"kind":128,"name":"$suffix","location":[2139,24,2139,31],"scope":"stringEndsWith","type":"mixed"}]},{"kind":64,"name":"stringStartsWith","location":[2154,0,2160,1],"description":"Returns a PHPUnit_Framework_Constraint_StringStartsWith matcher object.","type":"PHPUnit_Framework_Constraint_StringStartsWith","children":[{"kind":128,"name":"$prefix","location":[2154,26,2154,33],"scope":"stringStartsWith","type":"mixed"}]},{"kind":64,"name":"throwException","location":[2167,0,2173,1],"type":"PHPUnit_Framework_MockObject_Stub_Exception","children":[{"kind":128,"name":"$exception","location":[2167,24,2167,44],"scope":"throwException","typeSource":1,"type":"Exception"}]}]}}