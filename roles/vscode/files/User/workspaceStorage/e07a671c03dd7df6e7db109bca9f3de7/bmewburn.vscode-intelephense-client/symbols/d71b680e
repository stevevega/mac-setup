{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/zetacomponents/console-tools/src/input.php","root":{"kind":0,"name":"","children":[{"kind":1,"name":"ezcConsoleInput","location":[126,0,1410,1],"description":"The ezcConsoleInput class handles the given options and arguments on the console.\n\nThis class allows the complete handling of options and arguments submitted\nto a console based application.\n\nThe next example demonstrate how to capture the console options: \n\n<code>\n$optionHandler = new ezcConsoleInput();\n\n// Register simple parameter -h/--help\n$optionHandler->registerOption( new ezcConsoleOption( 'h', 'help' ) );\n\n// Register complex parameter -f/--file\n$file = new ezcConsoleOption(\n'f',\n'file',\nezcConsoleInput::TYPE_STRING,\nnull,\nfalse,\n'Process a file.',\n'Processes a single file.'\n);\n$optionHandler->registerOption( $file );\n\n// Manipulate parameter -f/--file after registration\n$file->multiple = true;\n\n// Register another complex parameter that depends on -f and excludes -h\n$dir = new ezcConsoleOption(\n'd',\n'dir',\nezcConsoleInput::TYPE_STRING,\nnull,\ntrue,\n'Process a directory.',\n'Processes a complete directory.',\narray( new ezcConsoleOptionRule( $optionHandler->getOption( 'f' ) ) ),\narray( new ezcConsoleOptionRule( $optionHandler->getOption( 'h' ) ) )\n);\n$optionHandler->registerOption( $dir );\n\n// Register an alias for this parameter\n$optionHandler->registerAlias( 'e', 'extended-dir', $dir );\n\n// Process registered parameters and handle errors\ntry\n{\n$optionHandler->process( array( 'example_input.php', '-h' ) );\n}\ncatch ( ezcConsoleOptionException $e )\n{\necho $e->getMessage();\nexit( 1 );\n}\n\n// Process a single parameter\n$file = $optionHandler->getOption( 'f' );\nif ( $file->value === false )\n{\necho \"Parameter -{$file->short}/--{$file->long} was not submitted.\\n\";\n}\nelseif ( $file->value === true )\n{\necho \"Parameter -{$file->short}/--{$file->long} was submitted without value.\\n\";\n}\nelse\n{\necho \"Parameter -{$file->short}/--{$file->long} was submitted with value '\".var_export($file->value, true).\"'.\\n\";\n}\n\n// Process all parameters at once:\nforeach ( $optionHandler->getOptionValues() as $paramShort => $val )\n{\nswitch ( true )\n{\ncase $val === false:\necho \"Parameter $paramShort was not submitted.\\n\";\nbreak;\ncase $val === true:\necho \"Parameter $paramShort was submitted without a value.\\n\";\nbreak;\ncase is_array( $val ):\necho \"Parameter $paramShort was submitted multiple times with value: '\".implode(', ', $val).\"'.\\n\";\nbreak;\ndefault:\necho \"Parameter $paramShort was submitted with value: '$val'.\\n\";\nbreak;\n}\n}\n</code>","children":[{"kind":16,"name":"$argumentDefinition","modifiers":256,"location":[27,0,125,3],"description":"Optional argument definition.","type":"ezcConsoleArguments"},{"kind":1024,"name":"TYPE_NONE","modifiers":1,"location":[131,10,131,27],"scope":"ezcConsoleInput","value":"1"},{"kind":1024,"name":"TYPE_INT","modifiers":1,"location":[136,10,136,27],"scope":"ezcConsoleInput","value":"2"},{"kind":1024,"name":"TYPE_STRING","modifiers":1,"location":[141,10,141,27],"scope":"ezcConsoleInput","value":"3"},{"kind":16,"name":"$options","modifiers":4,"location":[156,12,156,30],"scope":"ezcConsoleInput","type":"array(array)"},{"kind":16,"name":"$optionShort","modifiers":4,"location":[165,12,165,34],"scope":"ezcConsoleInput","type":"array(string=>int)"},{"kind":16,"name":"$optionLong","modifiers":4,"location":[174,12,174,33],"scope":"ezcConsoleInput","type":"array(string=>int)"},{"kind":16,"name":"$arguments","modifiers":4,"location":[181,12,181,32],"scope":"ezcConsoleInput","type":"array(string)"},{"kind":16,"name":"$processed","modifiers":4,"location":[188,12,188,30],"scope":"ezcConsoleInput","type":"bool"},{"kind":16,"name":"$helpOptionSet","modifiers":4,"location":[195,12,195,34],"scope":"ezcConsoleInput","type":"bool"},{"kind":16,"name":"$stringTool","modifiers":4,"location":[202,12,202,23],"scope":"ezcConsoleInput","type":"ezcConsoleStringTool"},{"kind":16,"name":"$validator","modifiers":4,"location":[209,12,209,22],"scope":"ezcConsoleInput","type":"ezcConsoleInputValidator"},{"kind":16,"name":"$helpGenerator","modifiers":4,"location":[216,12,216,26],"scope":"ezcConsoleInput","type":"ezcConsoleInputHelpGenerator"},{"kind":16,"name":"$properties","modifiers":2,"location":[223,14,223,35],"scope":"ezcConsoleInput","type":"array(string=>mixed)"},{"kind":32,"name":"__construct","modifiers":1,"location":[228,4,236,5],"description":"Creates an input handler.","scope":"ezcConsoleInput"},{"kind":32,"name":"registerOption","modifiers":1,"location":[251,4,274,5],"description":"Registers the new option $option.\n\nThis method adds the new option $option to your option collection. If\nalready an option with the assigned short or long value exists, an\nexception will be thrown.","scope":"ezcConsoleInput","type":"ezcConsoleOption","children":[{"kind":128,"name":"$option","location":[251,36,251,60],"scope":"registerOption","typeSource":1,"type":"ezcConsoleOption"}]},{"kind":32,"name":"registerAlias","modifiers":1,"location":[299,4,311,5],"description":"Registers an alias for an option.\n\nRegisters a new alias for an existing option. Aliases can\nbe used as if they were a normal option.\n\nThe alias is registered with the short option name $short and the\nlong option name $long. The alias references to the existing \noption $option.","scope":"ezcConsoleInput","type":"void","children":[{"kind":128,"name":"$short","location":[299,35,299,41],"scope":"registerAlias","type":"string"},{"kind":128,"name":"$long","location":[299,43,299,48],"scope":"registerAlias","type":"string"},{"kind":128,"name":"$option","location":[299,50,299,74],"scope":"registerAlias","typeSource":1,"type":"ezcConsoleOption"}]},{"kind":32,"name":"registerOptionString","modifiers":1,"location":[335,4,377,5],"description":"Registers options according to a string specification.\n\nAccepts a string to define parameters and registers all parameters as\noptions accordingly. String definition, specified in $optionDef, looks\nlike this:\n\n<code>\n[s:|size:][u:|user:][a:|all:]\n</code>\n\nThis string registers 3 parameters:\n-s / --size\n-u / --user\n-a / --all","scope":"ezcConsoleInput","type":"void","children":[{"kind":128,"name":"$optionDef","location":[335,42,335,52],"scope":"registerOptionString","type":"string"}]},{"kind":32,"name":"unregisterOption","modifiers":1,"location":[394,4,426,5],"description":"Removes an option.\n\nThis function removes an option. All dependencies to that \nspecific option are removed completely from every other registered \noption.","scope":"ezcConsoleInput","type":"void","children":[{"kind":128,"name":"$option","location":[394,38,394,62],"description":"The option object to unregister.\n","scope":"unregisterOption","typeSource":1,"type":"ezcConsoleOption"}]},{"kind":32,"name":"unregisterAlias","modifiers":1,"location":[445,4,466,5],"description":"Removes an alias to an option.\n\nThis function removes an alias with the short name $short and long\nname $long.","scope":"ezcConsoleInput","type":"void","children":[{"kind":128,"name":"$short","location":[445,37,445,43],"scope":"unregisterAlias","type":"string"},{"kind":128,"name":"$long","location":[445,45,445,50],"scope":"unregisterAlias","type":"string"}]},{"kind":32,"name":"getOption","modifiers":1,"location":[480,4,492,5],"description":"Returns the definition object for the option with the name $name.\n\nThis method receives the long or short name of an option and\nreturns the ezcConsoleOption object.","scope":"ezcConsoleInput","type":"ezcConsoleOption","children":[{"kind":128,"name":"$name","location":[480,31,480,36],"description":"Short or long name of the option (without - or --).","scope":"getOption","type":"string"}]},{"kind":32,"name":"process","modifiers":1,"location":[524,4,550,5],"description":"Process the input parameters.\n\nActually process the input options and arguments according to the actual \nsettings.\n\nPer default this method uses $argc and $argv for processing. You can \noverride this setting with your own input, if necessary, using the\nparameters of this method. (Attention, first argument is always the pro\ngram name itself!)\n\nAll exceptions thrown by this method contain an additional attribute \"option\"\nwhich specifies the parameter on which the error occurred.","scope":"ezcConsoleInput","type":"void","children":[{"kind":128,"name":"$args","location":[524,29,524,47],"description":"The arguments","scope":"process","value":"null","type":"array(string)"}]},{"kind":32,"name":"setOptionDefaults","modifiers":4,"location":[558,4,571,5],"description":"Sets defaults for options that have not been submitted.\n\nChecks all options if they have been submited. If not and a default \nvalues is present, this is set as the options value.","scope":"ezcConsoleInput"},{"kind":32,"name":"processOptions","modifiers":4,"location":[591,4,631,5],"description":"Reads the submitted options from $args array.\n\nReturns the next index to check for arguments.","scope":"ezcConsoleInput","children":[{"kind":128,"name":"$args","location":[591,37,591,48],"scope":"processOptions","type":"array(string)"}]},{"kind":32,"name":"reset","modifiers":1,"location":[641,4,655,5],"description":"Resets all option and argument values.\n\nThis method is called automatically by {@link process()}, if this method\nis called twice or more, and may also be used to manually reset the\nvalues of all registered {@ezcConsoleOption} and {@link\nezcConsoleArgument} objects.","scope":"ezcConsoleInput"},{"kind":32,"name":"hasOption","modifiers":1,"location":[665,4,676,5],"description":"Returns true if an option with the given name exists, otherwise false.\n\nChecks if an option with the given name is registered.","scope":"ezcConsoleInput","type":"bool","children":[{"kind":128,"name":"$name","location":[665,31,665,36],"description":"Short or long name of the option.","scope":"hasOption","type":"string"}]},{"kind":32,"name":"getOptions","modifiers":1,"location":[693,4,696,5],"description":"Returns an array of all registered options.\n\nReturns an array of all registered options in the following format:\n<code>\narray( \n0 => ezcConsoleOption,\n1 => ezcConsoleOption,\n2 => ezcConsoleOption,\n...\n);\n</code>","scope":"ezcConsoleInput","type":"array(string=>ezcConsoleOption)"},{"kind":32,"name":"getOptionValues","modifiers":1,"location":[709,4,720,5],"description":"Returns the values of all submitted options.\n\nReturns an array of all values submitted to the options. The array is \nindexed by the parameters short name (excluding the '-' prefix). The array\ndoes not contain any parameter, which value is 'false' (meaning: the\nparameter was not submitted).","scope":"ezcConsoleInput","type":"array(string=>mixed)","children":[{"kind":128,"name":"$longnames","location":[709,37,709,55],"description":"Wheather to use longnames for indexing.","scope":"getOptionValues","value":"false","type":"bool"}]},{"kind":32,"name":"getArguments","modifiers":1,"location":[738,4,741,5],"description":"Returns arguments provided to the program.\n\nThis method returns all arguments provided to a program in an\nint indexed array. Arguments are sorted in the way\nthey are submitted to the program. You can disable arguments\nthrough the 'arguments' flag of a parameter, if you want\nto disallow arguments.\n\nArguments are either the last part of the program call (if the\nlast parameter is not a 'multiple' one) or divided via the '--'\nmethod which is commonly used on Unix (if the last parameter\naccepts multiple values this is required).","scope":"ezcConsoleInput","type":"array(string)"},{"kind":32,"name":"getHelp","modifiers":1,"location":[790,4,822,5],"description":"Get help information for your options.\n\nThis method returns an array of help information for your options,\nindexed by int. Each help info has 2 fields:\n\n0 => The options names (\"<short> / <long>\")\n1 => The help text (depending on the $long parameter)\n\nThe $long options determines if you want to get the short or long help\ntexts. The array returned can be used by {@link ezcConsoleTable}.\n\nIf using the second options, you can filter the options shown in the\nhelp output (e.g. to show short help for related options). Provide\nas simple number indexed array of short and/or long values to set a filter.\n\nThe $paramGrouping option can be used to group options in the help\noutput. The structure of this array parameter is as follows:\n\n<code>\narray(\n'First section' => array(\n'input',\n'output'\n'overwrite',\n),\n'Second section' => array(\n'v',\n'h',\n),\n)\n</code>\n\nAs can be seen, short option names are possible as well as long ones.\nThe key of the first array level is the name of the section, which is\nassigned to an array of options to group under this section. The $params\nparameter still influences if an option is displayed at all.","scope":"ezcConsoleInput","type":"array(array(string))","children":[{"kind":128,"name":"$long","location":[790,29,790,42],"scope":"getHelp","value":"false","type":"bool"},{"kind":128,"name":"$params","location":[790,44,790,67],"scope":"getHelp","value":"array()","type":"array(string)"},{"kind":128,"name":"$paramGrouping","location":[790,69,790,96],"scope":"getHelp","value":"null","type":"array(string=>array(string))"}]},{"kind":32,"name":"getOptionHelpWithoutGrouping","modifiers":4,"location":[834,4,840,5],"description":"Creates the option help array in the original, ungrouped way.\n\nCreates the original help array generated by {@link getHelp()}. The\n$long and $params options are the same as they are for this method.","scope":"ezcConsoleInput","type":"array","children":[{"kind":128,"name":"$long","location":[834,51,834,56],"scope":"getOptionHelpWithoutGrouping","type":"bool"},{"kind":128,"name":"$params","location":[834,58,834,65],"scope":"getOptionHelpWithoutGrouping","type":"array"}]},{"kind":32,"name":"getOptionHelpWithGrouping","modifiers":4,"location":[850,4,875,5],"description":"Generates options helo array with ordering and grouping.","scope":"ezcConsoleInput","type":"array()","children":[{"kind":128,"name":"$long","location":[850,48,850,53],"scope":"getOptionHelpWithGrouping","type":"mixed"},{"kind":128,"name":"$params","location":[850,55,850,62],"scope":"getOptionHelpWithGrouping","type":"mixed"},{"kind":128,"name":"$paramGrouping","location":[850,64,850,78],"scope":"getOptionHelpWithGrouping","type":"mixed"}]},{"kind":32,"name":"getHelpTable","modifiers":1,"location":[914,4,924,5],"description":"Get help information for your options as a table.\n\nThis method provides the information returned by \n{@link ezcConsoleInput::getHelp()} in a table.\n\nThe $paramGrouping option can be used to group options in the help\noutput. The structure of this array parameter is as follows:\n\n<code>\narray(\n'First section' => array(\n'input',\n'output'\n'overwrite',\n),\n'Second section' => array(\n'v',\n'h',\n),\n)\n</code>\n\nAs can be seen, short option names are possible as well as long ones.\nThe key of the first array level is the name of the section, which is\nassigned to an array of options to group under this section. The $params\nparameter still influences if an option as displayed at all.","scope":"ezcConsoleInput","type":"ezcConsoleTable","children":[{"kind":128,"name":"$table","location":[914,34,914,56],"description":"The table object to fill.","scope":"getHelpTable","typeSource":1,"type":"ezcConsoleTable"},{"kind":128,"name":"$long","location":[914,58,914,71],"description":"Set this to true for getting the \nlong help version.","scope":"getHelpTable","value":"false","type":"bool"},{"kind":128,"name":"$params","location":[914,73,914,96],"description":"Set of option names to generate help \nfor, default is all.","scope":"getHelpTable","value":"array()","type":"array(string)"},{"kind":128,"name":"$paramGrouping","location":[914,98,914,119],"scope":"getHelpTable","value":"null","type":"array(string=>array(string))"}]},{"kind":32,"name":"getHelpText","modifiers":1,"location":[966,4,1001,5],"description":"Returns a standard help output for your program.\n\nThis method generates a help text as it's commonly known from Unix\ncommand line programs. The output will contain the synopsis, your \nprovided program description and the selected parameter help\nas also provided by {@link ezcConsoleInput::getHelp()}. The returned\nstring can directly be printed to the console.\n\nThe $paramGrouping option can be used to group options in the help\noutput. The structure of this array parameter is as follows:\n\n<code>\narray(\n'First section' => array(\n'input',\n'output'\n'overwrite',\n),\n'Second section' => array(\n'v',\n'h',\n),\n)\n</code>\n\nAs can be seen, short option names are possible as well as long ones.\nThe key of the first array level is the name of the section, which is\nassigned to an array of options to group under this section. The $params\nparameter still influences if an option as displayed at all.","scope":"ezcConsoleInput","type":"string","children":[{"kind":128,"name":"$programDesc","location":[966,33,966,45],"description":"The description of your program.","scope":"getHelpText","type":"string"},{"kind":128,"name":"$width","location":[966,47,966,58],"description":"The width to adjust the output text to.","scope":"getHelpText","value":"80","type":"int"},{"kind":128,"name":"$long","location":[966,60,966,73],"description":"Set this to true for getting the long \nhelp version.","scope":"getHelpText","value":"false","type":"bool"},{"kind":128,"name":"$params","location":[966,75,966,95],"description":"Set of option names to generate help \nfor, default is all.","scope":"getHelpText","value":"null","type":"array(string)"},{"kind":128,"name":"$paramGrouping","location":[966,97,966,118],"scope":"getHelpText","value":"null","type":"array(string=>array(string))"}]},{"kind":32,"name":"getSynopsis","modifiers":1,"location":[1015,4,1018,5],"description":"Returns the synopsis string for the program.\n\nThis gives you a synopsis definition for the options and arguments \ndefined with this instance of ezcConsoleInput. You can filter the \noptions named in the synopsis by submitting their short names in an\narray as the parameter of this method. If the parameter $optionNames\nis set, only those options are listed in the synopsis.","scope":"ezcConsoleInput","type":"string","children":[{"kind":128,"name":"$optionNames","location":[1015,33,1015,58],"scope":"getSynopsis","value":"null","type":"array(string)"}]},{"kind":32,"name":"helpOptionSet","modifiers":1,"location":[1027,4,1030,5],"description":"Returns if a help option was set.\nThis method returns if an option was submitted, which was defined to be\na help option, using the isHelpOption flag.","scope":"ezcConsoleInput","type":"bool"},{"kind":32,"name":"__get","modifiers":1,"location":[1042,4,1049,5],"description":"Property read access.","scope":"ezcConsoleInput","type":"mixed","children":[{"kind":128,"name":"$propertyName","location":[1042,27,1042,40],"description":"Name of the property.","scope":"__get","type":"string"}]},{"kind":32,"name":"__set","modifiers":1,"location":[1059,4,1073,5],"description":"Property set access.","scope":"ezcConsoleInput","type":"void","children":[{"kind":128,"name":"$propertyName","location":[1059,27,1059,40],"scope":"__set","type":"string"},{"kind":128,"name":"$propertyValue","location":[1059,42,1059,56],"scope":"__set","type":"string"}]},{"kind":32,"name":"__isset","modifiers":1,"location":[1082,4,1085,5],"description":"Property isset access.","scope":"ezcConsoleInput","type":"bool","children":[{"kind":128,"name":"$propertyName","location":[1082,29,1082,42],"description":"Name of the property.","scope":"__isset","type":"string"}]},{"kind":32,"name":"createOptionSynopsis","modifiers":2,"location":[1107,4,1158,5],"description":"Returns the synopsis string for a single option and its dependencies.\n\nThis method returns a part of the program synopsis, specifically for a\ncertain parameter. The method recursively adds depending parameters up\nto the 2nd depth level to the synopsis. The second parameter is used\nto store the short names of all options that have already been used in \nthe synopsis (to avoid adding an option twice). The 3rd parameter \ndetermines the actual deps in the option dependency recursion to \nterminate that after 2 recursions.","scope":"ezcConsoleInput","type":"string","children":[{"kind":128,"name":"$option","location":[1107,45,1107,69],"description":"The option to include.","scope":"createOptionSynopsis","typeSource":1,"type":"ezcConsoleOption"},{"kind":128,"name":"$usedOptions","location":[1107,71,1107,84],"description":"Array of used option short names.","scope":"createOptionSynopsis","type":"array(string)"},{"kind":128,"name":"$depth","location":[1107,86,1107,96],"description":"Current recursion depth.","scope":"createOptionSynopsis","value":"0","type":"int"}]},{"kind":32,"name":"processOption","modifiers":4,"location":[1177,4,1236,5],"description":"Process an option.\n\nThis method does the processing of a single option.","scope":"ezcConsoleInput","type":"void","children":[{"kind":128,"name":"$args","location":[1177,36,1177,47],"description":"The arguments array.","scope":"processOption","type":"array(string)"},{"kind":128,"name":"$i","location":[1177,49,1177,52],"description":"The current position in the arguments array.","scope":"processOption","type":"int"}]},{"kind":32,"name":"processArguments","modifiers":4,"location":[1245,4,1319,5],"description":"Process arguments given to the program.","scope":"ezcConsoleInput","type":"void","children":[{"kind":128,"name":"$args","location":[1245,39,1245,50],"description":"The arguments array.","scope":"processArguments","type":"array(string)"},{"kind":128,"name":"$i","location":[1245,52,1245,55],"description":"Current index in arguments array.","scope":"processArguments","type":"int"}]},{"kind":32,"name":"argumentsAllowed","modifiers":2,"location":[1326,4,1336,5],"description":"Returns if arguments are allowed with the current option submition.","scope":"ezcConsoleInput","type":"bool"},{"kind":32,"name":"checkRules","modifiers":4,"location":[1348,4,1359,5],"description":"Check the rules that may be associated with an option.\n\nOptions are allowed to have rules associated for dependencies to other\noptions and exclusion of other options or arguments. This method\nprocesses the checks.","scope":"ezcConsoleInput"},{"kind":32,"name":"isCorrectType","modifiers":4,"location":[1369,4,1387,5],"description":"Checks if a value is of a given type. Converts the value to the\ncorrect PHP type on success.","scope":"ezcConsoleInput","type":"bool","children":[{"kind":128,"name":"$type","location":[1369,36,1369,41],"description":"The type to check for. One of self::TYPE_*.","scope":"isCorrectType","type":"int"},{"kind":128,"name":"$val","location":[1369,43,1369,48],"description":"The value to check. Will possibly altered!","scope":"isCorrectType","type":"string"}]},{"kind":32,"name":"preprocessLongOption","modifiers":4,"location":[1400,4,1409,5],"description":"Split parameter and value for long option names. \n\nThis method checks for long options, if the value is passed using =. If\nthis is the case parameter and value get split and replaced in the\narguments array.","scope":"ezcConsoleInput","type":"void","children":[{"kind":128,"name":"$args","location":[1400,43,1400,55],"description":"The arguments array","scope":"preprocessLongOption","type":"array(string)"},{"kind":128,"name":"$i","location":[1400,57,1400,59],"description":"Current arguments array position","scope":"preprocessLongOption","type":"int"}]}]}]}}