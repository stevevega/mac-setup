{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/kigkonsult/icalcreator/lib/iCalUtilityFunctions.class.php","root":{"kind":0,"name":"","children":[{"kind":1,"name":"iCalUtilityFunctions","location":[34,0,2507,1],"description":"moving all utility (static) functions to a utility class","children":[{"kind":16,"name":"$baseDelim","modifiers":36,"location":[36,17,36,34],"description":"tmp line delimiter, used in convEolChar (parse)","scope":"iCalUtilityFunctions","type":"string"},{"kind":16,"name":"$parValPrefix","modifiers":36,"location":[38,17,41,72],"description":"protocol prefix, used in _splitContent()","scope":"iCalUtilityFunctions","type":"array"},{"kind":16,"name":"$geoLatFmt","modifiers":33,"location":[43,16,43,38],"description":"output format for geo latitude and longitude (before rtrim)","scope":"iCalUtilityFunctions","type":"string"},{"kind":16,"name":"$geoLongFmt","modifiers":33,"location":[44,16,44,37],"description":"output format for geo latitude and longitude (before rtrim)","scope":"iCalUtilityFunctions","type":"string"},{"kind":16,"name":"$fmt","modifiers":33,"location":[46,16,57,36],"description":"date/datetime formats","scope":"iCalUtilityFunctions","type":"array"},{"kind":16,"name":"$vComps","modifiers":33,"location":[59,16,59,81],"description":"component property UID value","scope":"iCalUtilityFunctions","type":"array"},{"kind":16,"name":"$mComps","modifiers":33,"location":[60,16,60,104],"description":"component property UID value","scope":"iCalUtilityFunctions","type":"array"},{"kind":16,"name":"$miscComps","modifiers":33,"location":[61,16,61,84],"description":"component property UID value","scope":"iCalUtilityFunctions","type":"array"},{"kind":16,"name":"$tzComps","modifiers":33,"location":[62,16,62,74],"description":"component property UID value","scope":"iCalUtilityFunctions","type":"array"},{"kind":16,"name":"$allComps","modifiers":33,"location":[63,16,63,128],"description":"component property UID value","scope":"iCalUtilityFunctions","type":"array"},{"kind":16,"name":"$mProps1","modifiers":33,"location":[65,16,65,101],"description":"component property collections","scope":"iCalUtilityFunctions","type":"array"},{"kind":16,"name":"$mProps2","modifiers":33,"location":[66,16,67,138],"description":"component property collections","scope":"iCalUtilityFunctions","type":"array"},{"kind":16,"name":"$dateProps","modifiers":33,"location":[68,16,68,133],"description":"component property collections","scope":"iCalUtilityFunctions","type":"array"},{"kind":16,"name":"$otherProps","modifiers":33,"location":[69,16,69,173],"description":"component property collections","scope":"iCalUtilityFunctions","type":"array"},{"kind":16,"name":"$m_pInstance","modifiers":36,"location":[71,17,71,29],"description":"Store the single instance of iCalUtilityFunctions","scope":"iCalUtilityFunctions","type":"object"},{"kind":32,"name":"__construct","modifiers":4,"location":[77,2,79,3],"description":"Private constructor to limit object instantiation to within the class","scope":"iCalUtilityFunctions"},{"kind":32,"name":"getInstance","modifiers":33,"location":[86,2,90,3],"description":"Getter method for creating/returning the single instance of this class","scope":"iCalUtilityFunctions"},{"kind":32,"name":"_chkDateArr","modifiers":33,"location":[100,2,134,3],"description":"ensures internal date-time/date format (keyed array) for an input date-time/date array (keyed or unkeyed)","scope":"iCalUtilityFunctions","type":"array","children":[{"kind":128,"name":"$datetime","location":[100,38,100,47],"scope":"_chkDateArr","type":"array"},{"kind":128,"name":"$parno","location":[100,49,100,61],"description":"optional, default FALSE","scope":"_chkDateArr","value":"FALSE","type":"int"}]},{"kind":32,"name":"_chkdatecfg","modifiers":33,"location":[147,2,191,3],"description":"check date(-time) and params arrays for an opt. timezone and if it is a DATE-TIME or DATE (updates $parno and params)","scope":"iCalUtilityFunctions","type":"void","children":[{"kind":128,"name":"$theDate","location":[147,38,147,46],"description":"date to check","scope":"_chkdatecfg","type":"array"},{"kind":128,"name":"$parno","location":[147,48,147,56],"description":"no of date parts (i.e. year, month.. .)","scope":"_chkdatecfg","type":"int"},{"kind":128,"name":"$params","location":[147,58,147,67],"description":"property parameters","scope":"_chkdatecfg","type":"array"}]},{"kind":32,"name":"_cmpfcn","modifiers":33,"location":[202,2,237,3],"description":"vcalendar sort callback function","scope":"iCalUtilityFunctions","type":"int","children":[{"kind":128,"name":"$a","location":[202,34,202,36],"scope":"_cmpfcn","type":"array"},{"kind":128,"name":"$b","location":[202,38,202,40],"scope":"_cmpfcn","type":"array"}]},{"kind":32,"name":"convEolChar","modifiers":33,"location":[252,2,271,3],"description":"byte oriented line folding fix\n\nremove any line-endings that may include spaces or tabs\nand convert all line endings (iCal default '\\r\\n'),\ntakes care of '\\r\\n', '\\r' and '\\n' and mixed '\\r\\n'+'\\r', '\\r\\n'+'\\n'","scope":"iCalUtilityFunctions","type":"string","children":[{"kind":128,"name":"$text","location":[252,38,252,45],"scope":"convEolChar","type":"string"},{"kind":128,"name":"$nl","location":[252,47,252,50],"scope":"convEolChar","type":"string"}]},{"kind":32,"name":"createTimezone","modifiers":33,"location":[309,2,432,3],"description":"create a calendar timezone and standard/daylight components\n\nResult when 'Europe/Stockholm' and no from/to arguments is used as timezone:\n\nBEGIN:VTIMEZONE\nTZID:Europe/Stockholm\nBEGIN:STANDARD\nDTSTART:20101031T020000\nTZOFFSETFROM:+0200\nTZOFFSETTO:+0100\nTZNAME:CET\nEND:STANDARD\nBEGIN:DAYLIGHT\nDTSTART:20100328T030000\nTZOFFSETFROM:+0100\nTZOFFSETTO:+0200\nTZNAME:CEST\nEND:DAYLIGHT\nEND:VTIMEZONE","scope":"iCalUtilityFunctions","type":"bool","children":[{"kind":128,"name":"$calendar","location":[309,41,309,52],"description":"iCalcreator calendar instance","scope":"createTimezone","type":"object"},{"kind":128,"name":"$timezone","location":[309,54,309,63],"description":"PHP5 (DateTimeZone) valid timezone","scope":"createTimezone","type":"string"},{"kind":128,"name":"$xProp","location":[309,65,309,79],"description":"*[x-propName => x-propValue], optional","scope":"createTimezone","value":"array()","type":"array"},{"kind":128,"name":"$from","location":[309,81,309,91],"description":"unix timestamp","scope":"createTimezone","value":"null","type":"int"},{"kind":128,"name":"$to","location":[309,93,309,101],"description":"unix timestamp","scope":"createTimezone","value":"null","type":"int"}]},{"kind":32,"name":"_date2strdate","modifiers":33,"location":[445,2,484,3],"description":"creates formatted output for calendar component property data value type date/date-time","scope":"iCalUtilityFunctions","type":"string","children":[{"kind":128,"name":"$datetime","location":[445,40,445,49],"scope":"_date2strdate","type":"array"},{"kind":128,"name":"$parno","location":[445,51,445,59],"description":"optional, default 6","scope":"_date2strdate","value":"6","type":"int"}]},{"kind":32,"name":"_duration2arr","modifiers":33,"location":[493,2,531,3],"description":"ensures internal duration format for input in array format","scope":"iCalUtilityFunctions","type":"array","children":[{"kind":128,"name":"$duration","location":[493,40,493,49],"scope":"_duration2arr","type":"array"}]},{"kind":32,"name":"_duration2date","modifiers":33,"location":[542,2,562,3],"description":"convert startdate+duration to a array format datetime","scope":"iCalUtilityFunctions","type":"array,","children":[{"kind":128,"name":"$startdate","location":[542,41,542,51],"scope":"_duration2date","type":"array"},{"kind":128,"name":"$duration","location":[542,53,542,62],"scope":"_duration2date","type":"array"}]},{"kind":32,"name":"_durationStr2arr","modifiers":33,"location":[572,2,615,3],"description":"ensures internal duration format for an input string (iCal) formatted duration","scope":"iCalUtilityFunctions","type":"array","children":[{"kind":128,"name":"$duration","location":[572,43,572,52],"scope":"_durationStr2arr","type":"string"}]},{"kind":32,"name":"_duration2str","modifiers":33,"location":[624,2,649,3],"description":"creates formatted output for calendar component property data value type duration","scope":"iCalUtilityFunctions","type":"string","children":[{"kind":128,"name":"$duration","location":[624,40,624,55],"scope":"_duration2str"}]},{"kind":32,"name":"_existRem","modifiers":33,"location":[663,2,677,3],"description":"removes expkey+expvalue from array and returns hitval (if found) else returns elseval","scope":"iCalUtilityFunctions","type":"int","children":[{"kind":128,"name":"$array","location":[663,36,663,44],"description":"iCal property parameters","scope":"_existRem","type":"array"},{"kind":128,"name":"$expkey","location":[663,46,663,53],"description":"expected key","scope":"_existRem","type":"string"},{"kind":128,"name":"$expval","location":[663,55,663,68],"description":"expected value","scope":"_existRem","value":"FALSE","type":"string"},{"kind":128,"name":"$hitVal","location":[663,70,663,82],"description":"return value if found","scope":"_existRem","value":"null","type":"int"},{"kind":128,"name":"$elseVal","location":[663,84,663,97],"description":"return value if not found","scope":"_existRem","value":"null","type":"int"},{"kind":128,"name":"$preSet","location":[663,99,663,111],"description":"return value if already preset","scope":"_existRem","value":"null","type":"int"}]},{"kind":32,"name":"_inScope","modifiers":33,"location":[690,2,693,1],"description":"check if dates are in scope","scope":"iCalUtilityFunctions","type":"bool","children":[{"kind":128,"name":"$start","location":[690,35,690,41],"description":"datetime","scope":"_inScope","type":"object"},{"kind":128,"name":"$scopeStart","location":[690,43,690,54],"description":"datetime","scope":"_inScope","type":"object"},{"kind":128,"name":"$end","location":[690,56,690,60],"description":"datetime","scope":"_inScope","type":"object"},{"kind":128,"name":"$scopeEnd","location":[690,62,690,71],"description":"datetime","scope":"_inScope","type":"object"},{"kind":128,"name":"$format","location":[690,73,690,80],"scope":"_inScope","type":"string"}]},{"kind":32,"name":"_geo2str2","modifiers":33,"location":[703,2,709,3],"description":"mgnt geo part output","scope":"iCalUtilityFunctions","type":"string","children":[{"kind":128,"name":"$ll","location":[703,36,703,39],"scope":"_geo2str2","type":"float"},{"kind":128,"name":"$format","location":[703,41,703,48],"scope":"_geo2str2","type":"string"}]},{"kind":32,"name":"_isArrayDate","modifiers":33,"location":[719,2,739,3],"description":"checks if input contains a (array formatted) date/time","scope":"iCalUtilityFunctions","type":"bool","children":[{"kind":128,"name":"$input","location":[719,39,719,45],"scope":"_isArrayDate","type":"array"}]},{"kind":32,"name":"_isArrayTimestampDate","modifiers":33,"location":[748,2,750,3],"description":"checks if input array contains a timestamp date","scope":"iCalUtilityFunctions","type":"bool","children":[{"kind":128,"name":"$input","location":[748,48,748,54],"scope":"_isArrayTimestampDate","type":"array"}]},{"kind":32,"name":"_isOffset","modifiers":33,"location":[759,2,772,3],"description":"controls if input string contains (trailing) UTC/iCal offset","scope":"iCalUtilityFunctions","type":"bool","children":[{"kind":128,"name":"$input","location":[759,36,759,42],"scope":"_isOffset","type":"string"}]},{"kind":32,"name":"ms2phpTZ","modifiers":33,"location":[783,2,842,3],"description":"(very simple) conversion of a MS timezone to a PHP5 valid (Date-)timezone\nmatching (MS) UCT offset and time zone descriptors","scope":"iCalUtilityFunctions","type":"bool","children":[{"kind":128,"name":"$timezone","location":[783,35,783,46],"description":"to convert","scope":"ms2phpTZ","type":"string"}]},{"kind":32,"name":"offsetSec2His","modifiers":33,"location":[851,2,879,3],"description":"transforms offset in seconds to [-/+]hhmm[ss]","scope":"iCalUtilityFunctions","type":"string","children":[{"kind":128,"name":"$seconds","location":[851,40,851,48],"scope":"offsetSec2His","type":"string"}]},{"kind":32,"name":"_recur2date","modifiers":33,"location":[900,2,1289,3],"description":"updates an array with dates based on a recur pattern\n\nif missing, UNTIL is set 1 year from startdate (emergency break)","scope":"iCalUtilityFunctions","type":"void","children":[{"kind":128,"name":"$result","location":[900,38,900,47],"description":"array to update, array([Y-m-d] => bool)","scope":"_recur2date","type":"array"},{"kind":128,"name":"$recur","location":[900,49,900,55],"description":"pattern for recurrency (only value part, params ignored)","scope":"_recur2date","type":"array"},{"kind":128,"name":"$wdate","location":[900,57,900,63],"description":"component start date, string / array / (datetime) obj","scope":"_recur2date","type":"mixed"},{"kind":128,"name":"$fcnStart","location":[900,65,900,74],"description":"start date, string / array / (datetime) obj","scope":"_recur2date","type":"mixed"},{"kind":128,"name":"$fcnEnd","location":[900,76,900,89],"description":"end date, string / array / (datetime) obj","scope":"_recur2date","value":"FALSE","type":"mixed"}]},{"kind":32,"name":"_recurBYcntcheck","modifiers":33,"location":[1300,2,1308,3],"description":"_recur2date help function, checking BYDAY (etc) hits","scope":"iCalUtilityFunctions","type":"bool","children":[{"kind":128,"name":"$BYvalue","location":[1300,43,1300,51],"scope":"_recurBYcntcheck","type":"array"},{"kind":128,"name":"$upValue","location":[1300,53,1300,61],"scope":"_recurBYcntcheck","type":"int"},{"kind":128,"name":"$downValue","location":[1300,63,1300,73],"scope":"_recurBYcntcheck","type":"int"}]},{"kind":32,"name":"_recurIntervalIx","modifiers":33,"location":[1319,2,1337,3],"description":"_recur2date help function, (re-)calculate internal index","scope":"iCalUtilityFunctions","type":"bool","children":[{"kind":128,"name":"$freq","location":[1319,43,1319,48],"scope":"_recurIntervalIx","type":"string"},{"kind":128,"name":"$date","location":[1319,50,1319,55],"scope":"_recurIntervalIx","type":"array"},{"kind":128,"name":"$wkst","location":[1319,57,1319,62],"scope":"_recurIntervalIx","type":"int"}]},{"kind":32,"name":"_recurBydaySort","modifiers":33,"location":[1347,2,1350,3],"description":"sort recur dates","scope":"iCalUtilityFunctions","type":"int","children":[{"kind":128,"name":"$bydaya","location":[1347,42,1347,49],"scope":"_recurBydaySort","type":"array"},{"kind":128,"name":"$bydayb","location":[1347,51,1347,58],"scope":"_recurBydaySort","type":"array"}]},{"kind":32,"name":"_setRexrule","modifiers":33,"location":[1366,2,1447,3],"description":"convert input format for exrule and rrule to internal format","scope":"iCalUtilityFunctions","type":"array","children":[{"kind":128,"name":"$rexrule","location":[1366,38,1366,46],"scope":"_setRexrule","type":"array"}]},{"kind":32,"name":"_setDate","modifiers":33,"location":[1477,2,1664,3],"description":"convert format for input date to internal date with parameters","scope":"iCalUtilityFunctions","type":"array","children":[{"kind":128,"name":"$year","location":[1477,35,1477,40],"scope":"_setDate","type":"mixed"},{"kind":128,"name":"$month","location":[1477,42,1477,54],"description":"optional","scope":"_setDate","value":"FALSE","type":"mixed"},{"kind":128,"name":"$day","location":[1477,56,1477,66],"description":"optional","scope":"_setDate","value":"FALSE","type":"int"},{"kind":128,"name":"$hour","location":[1477,68,1477,79],"description":"optional","scope":"_setDate","value":"FALSE","type":"int"},{"kind":128,"name":"$min","location":[1477,81,1477,91],"description":"optional","scope":"_setDate","value":"FALSE","type":"int"},{"kind":128,"name":"$sec","location":[1477,93,1477,103],"description":"optional","scope":"_setDate","value":"FALSE","type":"int"},{"kind":128,"name":"$tz","location":[1477,105,1477,114],"description":"optional","scope":"_setDate","value":"FALSE","type":"string"},{"kind":128,"name":"$params","location":[1477,116,1477,129],"description":"optional","scope":"_setDate","value":"FALSE","type":"array"},{"kind":128,"name":"$caller","location":[1477,131,1477,143],"description":"optional","scope":"_setDate","value":"null","type":"string"},{"kind":128,"name":"$objName","location":[1477,145,1477,158],"description":"optional","scope":"_setDate","value":"null","type":"string"},{"kind":128,"name":"$tzid","location":[1477,160,1477,171],"description":"optional","scope":"_setDate","value":"FALSE","type":"string"}]},{"kind":32,"name":"_setDate2","modifiers":33,"location":[1690,2,1762,3],"description":"convert format for input date (UTC) to internal date with parameters","scope":"iCalUtilityFunctions","type":"array","children":[{"kind":128,"name":"$year","location":[1690,36,1690,41],"scope":"_setDate2","type":"mixed"},{"kind":128,"name":"$month","location":[1690,43,1690,55],"description":"optional","scope":"_setDate2","value":"FALSE","type":"mixed"},{"kind":128,"name":"$day","location":[1690,57,1690,67],"description":"optional","scope":"_setDate2","value":"FALSE","type":"int"},{"kind":128,"name":"$hour","location":[1690,69,1690,80],"description":"optional","scope":"_setDate2","value":"FALSE","type":"int"},{"kind":128,"name":"$min","location":[1690,82,1690,92],"description":"optional","scope":"_setDate2","value":"FALSE","type":"int"},{"kind":128,"name":"$sec","location":[1690,94,1690,104],"description":"optional","scope":"_setDate2","value":"FALSE","type":"int"},{"kind":128,"name":"$params","location":[1690,106,1690,119],"description":"optional","scope":"_setDate2","value":"FALSE","type":"array"}]},{"kind":32,"name":"_setMval","modifiers":33,"location":[1776,2,1788,3],"description":"check index and set (an indexed) content in multiple value array","scope":"iCalUtilityFunctions","type":"void","children":[{"kind":128,"name":"$valArr","location":[1776,35,1776,44],"scope":"_setMval","type":"array"},{"kind":128,"name":"$value","location":[1776,46,1776,52],"scope":"_setMval","type":"mixed"},{"kind":128,"name":"$params","location":[1776,54,1776,67],"scope":"_setMval","value":"FALSE","type":"array"},{"kind":128,"name":"$defaults","location":[1776,69,1776,84],"scope":"_setMval","value":"FALSE","type":"array"},{"kind":128,"name":"$index","location":[1776,86,1776,98],"scope":"_setMval","value":"FALSE","type":"int"}]},{"kind":32,"name":"_setParams","modifiers":33,"location":[1800,2,1826,3],"description":"set input (formatted) parameters- component property attributes\n\ndefault parameters can be set, if missing","scope":"iCalUtilityFunctions","type":"array","children":[{"kind":128,"name":"$params","location":[1800,37,1800,44],"scope":"_setParams","type":"array"},{"kind":128,"name":"$defaults","location":[1800,46,1800,61],"scope":"_setParams","value":"FALSE","type":"array"}]},{"kind":32,"name":"_setSortArgs","modifiers":33,"location":[1843,2,1901,3],"description":"set sort arguments/parameters in component","scope":"iCalUtilityFunctions","type":"void","children":[{"kind":128,"name":"$c","location":[1843,39,1843,41],"description":"valendar component","scope":"_setSortArgs","type":"object"},{"kind":128,"name":"$sortArg","location":[1843,43,1843,57],"scope":"_setSortArgs","value":"FALSE","type":"string"}]},{"kind":32,"name":"_size75","modifiers":33,"location":[1924,2,1992,3],"description":"break lines at pos 75\n\nLines of text SHOULD NOT be longer than 75 octets, excluding the line\nbreak. Long content lines SHOULD be split into a multiple line\nrepresentations using a line \"folding\" technique. That is, a long\nline can be split between any two characters by inserting a CRLF\nimmediately followed by a single linear white space character (i.e.,\nSPACE, US-ASCII decimal 32 or HTAB, US-ASCII decimal 9). Any sequence\nof CRLF followed immediately by a single linear white space character\nis ignored (i.e., removed) when processing the content type.\n\nEdited 2007-08-26 by Anders Litzell, anders@litzell.se to fix bug where\nthe reserved expression \"\\n\" in the arg $string could be broken up by the\nfolding of lines, causing ambiguity in the return string.","scope":"iCalUtilityFunctions","type":"string","children":[{"kind":128,"name":"$string","location":[1924,34,1924,41],"scope":"_size75","type":"string"},{"kind":128,"name":"$nl","location":[1924,43,1924,46],"scope":"_size75","type":"string"}]},{"kind":32,"name":"_sortExdate1","modifiers":33,"location":[2003,2,2009,3],"description":"sort callback function for exdate","scope":"iCalUtilityFunctions","type":"int","children":[{"kind":128,"name":"$a","location":[2003,39,2003,41],"scope":"_sortExdate1","type":"array"},{"kind":128,"name":"$b","location":[2003,43,2003,45],"scope":"_sortExdate1","type":"array"}]},{"kind":32,"name":"_sortExdate2","modifiers":33,"location":[2020,2,2028,3],"description":"sort callback function for exdate","scope":"iCalUtilityFunctions","type":"int","children":[{"kind":128,"name":"$a","location":[2020,39,2020,41],"scope":"_sortExdate2","type":"array"},{"kind":128,"name":"$b","location":[2020,43,2020,45],"scope":"_sortExdate2","type":"array"}]},{"kind":32,"name":"_sortRdate1","modifiers":33,"location":[2039,2,2047,3],"description":"sort callback function for rdate","scope":"iCalUtilityFunctions","type":"int","children":[{"kind":128,"name":"$a","location":[2039,38,2039,40],"scope":"_sortRdate1","type":"array"},{"kind":128,"name":"$b","location":[2039,42,2039,44],"scope":"_sortRdate1","type":"array"}]},{"kind":32,"name":"_sortRdate2","modifiers":33,"location":[2058,2,2074,3],"description":"sort callback function for rdate","scope":"iCalUtilityFunctions","type":"int","children":[{"kind":128,"name":"$a","location":[2058,38,2058,40],"scope":"_sortRdate2","type":"array"},{"kind":128,"name":"$b","location":[2058,42,2058,44],"scope":"_sortRdate2","type":"array"}]},{"kind":32,"name":"_splitContent","modifiers":33,"location":[2085,2,2129,3],"description":"separate property attributes from property value","scope":"iCalUtilityFunctions","type":"void","children":[{"kind":128,"name":"$line","location":[2085,40,2085,47],"description":"property content","scope":"_splitContent","type":"string"},{"kind":128,"name":"$propAttr","location":[2085,49,2085,65],"description":"property parameters","scope":"_splitContent","value":"null","type":"array"}]},{"kind":32,"name":"_stepdate","modifiers":33,"location":[2141,2,2167,3],"description":"step date, return updated date, array and timpstamp","scope":"iCalUtilityFunctions","type":"void","children":[{"kind":128,"name":"$date","location":[2141,36,2141,43],"description":"date to step","scope":"_stepdate","type":"array"},{"kind":128,"name":"$dateYMD","location":[2141,45,2141,55],"description":"date YMD","scope":"_stepdate","type":"string"},{"kind":128,"name":"$step","location":[2141,57,2141,82],"description":"default array( 'day' => 1 )","scope":"_stepdate","value":"array( 'day' => 1 )","type":"array"}]},{"kind":32,"name":"_strDate2arr","modifiers":33,"location":[2176,2,2226,3],"description":"convert a date from specific string to array format","scope":"iCalUtilityFunctions","type":"bool,","children":[{"kind":128,"name":"$input","location":[2176,39,2176,47],"scope":"_strDate2arr","type":"mixed"}]},{"kind":32,"name":"_strdate2date","modifiers":33,"location":[2243,2,2332,3],"description":"ensures internal date-time/date format for input date-time/date in string fromat","scope":"iCalUtilityFunctions","type":"array","children":[{"kind":128,"name":"$datetime","location":[2243,40,2243,49],"scope":"_strdate2date","type":"array"},{"kind":128,"name":"$parno","location":[2243,51,2243,63],"description":"optional, default FALSE","scope":"_strdate2date","value":"FALSE","type":"int"},{"kind":128,"name":"$wtz","location":[2243,65,2243,74],"description":"optional, default null","scope":"_strdate2date","value":"null","type":"moxed"}]},{"kind":32,"name":"_strrep","modifiers":33,"location":[2344,2,2382,3],"description":"special characters management output","scope":"iCalUtilityFunctions","type":"string","children":[{"kind":128,"name":"$string","location":[2344,34,2344,41],"scope":"_strrep","type":"string"},{"kind":128,"name":"$format","location":[2344,43,2344,50],"scope":"_strrep","type":"string"},{"kind":128,"name":"$nl","location":[2344,52,2344,55],"scope":"_strrep","type":"string"}]},{"kind":32,"name":"_strunrep","modifiers":33,"location":[2391,2,2397,3],"description":"special characters management input (from iCal file)","scope":"iCalUtilityFunctions","type":"string","children":[{"kind":128,"name":"$string","location":[2391,36,2391,43],"scope":"_strunrep","type":"string"}]},{"kind":32,"name":"_timestamp2date","modifiers":33,"location":[2411,2,2445,3],"description":"convert timestamp to date array, default UTC or adjusted for offset/timezone","scope":"iCalUtilityFunctions","type":"array","children":[{"kind":128,"name":"$timestamp","location":[2411,42,2411,52],"scope":"_timestamp2date","type":"mixed"},{"kind":128,"name":"$parno","location":[2411,54,2411,62],"scope":"_timestamp2date","value":"6","type":"int"},{"kind":128,"name":"$wtz","location":[2411,64,2411,73],"scope":"_timestamp2date","value":"null","type":"string"}]},{"kind":32,"name":"transformDateTime","modifiers":33,"location":[2460,2,2483,3],"description":"transforms a dateTime from a timezone to another using PHP DateTime and DateTimeZone class (PHP >= PHP 5.2.0)","scope":"iCalUtilityFunctions","type":"bool","children":[{"kind":128,"name":"$date","location":[2460,44,2460,51],"description":"date to alter","scope":"transformDateTime","type":"mixed"},{"kind":128,"name":"$tzFrom","location":[2460,53,2460,60],"description":"PHP valid 'from' timezone","scope":"transformDateTime","type":"string"},{"kind":128,"name":"$tzTo","location":[2460,62,2460,73],"description":"PHP valid 'to' timezone, default 'UTC'","scope":"transformDateTime","value":"'UTC'","type":"string"},{"kind":128,"name":"$format","location":[2460,75,2460,95],"description":"date output format, default 'Ymd\\THis'","scope":"transformDateTime","value":"'Ymd\\THis'","type":"string"}]},{"kind":32,"name":"_tz2offset","modifiers":33,"location":[2492,2,2506,3],"description":"convert offset, [+/-]HHmm[ss], to seconds, used when correcting UTC to localtime or v.v.","scope":"iCalUtilityFunctions","type":"integer","children":[{"kind":128,"name":"$tz","location":[2492,37,2492,40],"scope":"_tz2offset","type":"string"}]}]}]}}