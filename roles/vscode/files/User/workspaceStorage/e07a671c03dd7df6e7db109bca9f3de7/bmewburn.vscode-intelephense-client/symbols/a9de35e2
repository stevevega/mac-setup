{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/phpunit/phpunit/src/Framework/Assert.php","root":{"kind":0,"name":"","children":[{"kind":1,"name":"PHPUnit_Framework_Assert","modifiers":16,"location":[13,0,2951,1],"description":"A set of assertion methods.","children":[{"kind":16,"name":"$count","modifiers":36,"location":[18,19,18,29],"scope":"PHPUnit_Framework_Assert","type":"int"},{"kind":32,"name":"assertArrayHasKey","modifiers":33,"location":[27,4,46,5],"description":"Asserts that an array has a specified key.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$key","location":[27,45,27,49],"scope":"assertArrayHasKey","type":"mixed"},{"kind":128,"name":"$array","location":[27,51,27,57],"scope":"assertArrayHasKey","type":"array|ArrayAccess"},{"kind":128,"name":"$message","location":[27,59,27,72],"scope":"assertArrayHasKey","value":"''","type":"string"}]},{"kind":32,"name":"assertArraySubset","modifiers":33,"location":[56,4,75,5],"description":"Asserts that an array has a specified subset.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$subset","location":[56,45,56,52],"scope":"assertArraySubset","type":"array|ArrayAccess"},{"kind":128,"name":"$array","location":[56,54,56,60],"scope":"assertArraySubset","type":"array|ArrayAccess"},{"kind":128,"name":"$strict","location":[56,62,56,77],"description":"Check for object identity","scope":"assertArraySubset","value":"false","type":"bool"},{"kind":128,"name":"$message","location":[56,79,56,92],"scope":"assertArraySubset","value":"''","type":"string"}]},{"kind":32,"name":"assertArrayNotHasKey","modifiers":33,"location":[84,4,105,5],"description":"Asserts that an array does not have a specified key.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$key","location":[84,48,84,52],"scope":"assertArrayNotHasKey","type":"mixed"},{"kind":128,"name":"$array","location":[84,54,84,60],"scope":"assertArrayNotHasKey","type":"array|ArrayAccess"},{"kind":128,"name":"$message","location":[84,62,84,75],"scope":"assertArrayNotHasKey","value":"''","type":"string"}]},{"kind":32,"name":"assertContains","modifiers":33,"location":[117,4,146,5],"description":"Asserts that a haystack contains a needle.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$needle","location":[117,42,117,49],"scope":"assertContains","type":"mixed"},{"kind":128,"name":"$haystack","location":[117,51,117,60],"scope":"assertContains","type":"mixed"},{"kind":128,"name":"$message","location":[117,62,117,75],"scope":"assertContains","value":"''","type":"string"},{"kind":128,"name":"$ignoreCase","location":[117,77,117,96],"scope":"assertContains","value":"false","type":"bool"},{"kind":128,"name":"$checkForObjectIdentity","location":[117,98,117,128],"scope":"assertContains","value":"true","type":"bool"},{"kind":128,"name":"$checkForNonObjectIdentity","location":[117,130,117,164],"scope":"assertContains","value":"false","type":"bool"}]},{"kind":32,"name":"assertAttributeContains","modifiers":33,"location":[160,4,170,5],"description":"Asserts that a haystack that is stored in a static attribute of a class\nor an attribute of an object contains a needle.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$needle","location":[160,51,160,58],"scope":"assertAttributeContains","type":"mixed"},{"kind":128,"name":"$haystackAttributeName","location":[160,60,160,82],"scope":"assertAttributeContains","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[160,84,160,106],"scope":"assertAttributeContains","type":"string|object"},{"kind":128,"name":"$message","location":[160,108,160,121],"scope":"assertAttributeContains","value":"''","type":"string"},{"kind":128,"name":"$ignoreCase","location":[160,123,160,142],"scope":"assertAttributeContains","value":"false","type":"bool"},{"kind":128,"name":"$checkForObjectIdentity","location":[160,144,160,174],"scope":"assertAttributeContains","value":"true","type":"bool"},{"kind":128,"name":"$checkForNonObjectIdentity","location":[160,176,160,210],"scope":"assertAttributeContains","value":"false","type":"bool"}]},{"kind":32,"name":"assertNotContains","modifiers":33,"location":[182,4,215,5],"description":"Asserts that a haystack does not contain a needle.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$needle","location":[182,45,182,52],"scope":"assertNotContains","type":"mixed"},{"kind":128,"name":"$haystack","location":[182,54,182,63],"scope":"assertNotContains","type":"mixed"},{"kind":128,"name":"$message","location":[182,65,182,78],"scope":"assertNotContains","value":"''","type":"string"},{"kind":128,"name":"$ignoreCase","location":[182,80,182,99],"scope":"assertNotContains","value":"false","type":"bool"},{"kind":128,"name":"$checkForObjectIdentity","location":[182,101,182,131],"scope":"assertNotContains","value":"true","type":"bool"},{"kind":128,"name":"$checkForNonObjectIdentity","location":[182,133,182,167],"scope":"assertNotContains","value":"false","type":"bool"}]},{"kind":32,"name":"assertAttributeNotContains","modifiers":33,"location":[229,4,239,5],"description":"Asserts that a haystack that is stored in a static attribute of a class\nor an attribute of an object does not contain a needle.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$needle","location":[229,54,229,61],"scope":"assertAttributeNotContains","type":"mixed"},{"kind":128,"name":"$haystackAttributeName","location":[229,63,229,85],"scope":"assertAttributeNotContains","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[229,87,229,109],"scope":"assertAttributeNotContains","type":"string|object"},{"kind":128,"name":"$message","location":[229,111,229,124],"scope":"assertAttributeNotContains","value":"''","type":"string"},{"kind":128,"name":"$ignoreCase","location":[229,126,229,145],"scope":"assertAttributeNotContains","value":"false","type":"bool"},{"kind":128,"name":"$checkForObjectIdentity","location":[229,147,229,177],"scope":"assertAttributeNotContains","value":"true","type":"bool"},{"kind":128,"name":"$checkForNonObjectIdentity","location":[229,179,229,213],"scope":"assertAttributeNotContains","value":"false","type":"bool"}]},{"kind":32,"name":"assertContainsOnly","modifiers":33,"location":[249,4,271,5],"description":"Asserts that a haystack contains only values of a given type.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$type","location":[249,46,249,51],"scope":"assertContainsOnly","type":"string"},{"kind":128,"name":"$haystack","location":[249,53,249,62],"scope":"assertContainsOnly","type":"mixed"},{"kind":128,"name":"$isNativeType","location":[249,64,249,84],"scope":"assertContainsOnly","value":"null","type":"bool"},{"kind":128,"name":"$message","location":[249,86,249,99],"scope":"assertContainsOnly","value":"''","type":"string"}]},{"kind":32,"name":"assertContainsOnlyInstancesOf","modifiers":33,"location":[280,4,298,5],"description":"Asserts that a haystack contains only instances of a given classname","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$classname","location":[280,57,280,67],"scope":"assertContainsOnlyInstancesOf","type":"string"},{"kind":128,"name":"$haystack","location":[280,69,280,78],"scope":"assertContainsOnlyInstancesOf","type":"array|Traversable"},{"kind":128,"name":"$message","location":[280,80,280,93],"scope":"assertContainsOnlyInstancesOf","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeContainsOnly","modifiers":33,"location":[310,4,318,5],"description":"Asserts that a haystack that is stored in a static attribute of a class\nor an attribute of an object contains only values of a given type.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$type","location":[310,55,310,60],"scope":"assertAttributeContainsOnly","type":"string"},{"kind":128,"name":"$haystackAttributeName","location":[310,62,310,84],"scope":"assertAttributeContainsOnly","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[310,86,310,108],"scope":"assertAttributeContainsOnly","type":"string|object"},{"kind":128,"name":"$isNativeType","location":[310,110,310,130],"scope":"assertAttributeContainsOnly","value":"null","type":"bool"},{"kind":128,"name":"$message","location":[310,132,310,145],"scope":"assertAttributeContainsOnly","value":"''","type":"string"}]},{"kind":32,"name":"assertNotContainsOnly","modifiers":33,"location":[328,4,352,5],"description":"Asserts that a haystack does not contain only values of a given type.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$type","location":[328,49,328,54],"scope":"assertNotContainsOnly","type":"string"},{"kind":128,"name":"$haystack","location":[328,56,328,65],"scope":"assertNotContainsOnly","type":"mixed"},{"kind":128,"name":"$isNativeType","location":[328,67,328,87],"scope":"assertNotContainsOnly","value":"null","type":"bool"},{"kind":128,"name":"$message","location":[328,89,328,102],"scope":"assertNotContainsOnly","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeNotContainsOnly","modifiers":33,"location":[365,4,373,5],"description":"Asserts that a haystack that is stored in a static attribute of a class\nor an attribute of an object does not contain only values of a given\ntype.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$type","location":[365,58,365,63],"scope":"assertAttributeNotContainsOnly","type":"string"},{"kind":128,"name":"$haystackAttributeName","location":[365,65,365,87],"scope":"assertAttributeNotContainsOnly","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[365,89,365,111],"scope":"assertAttributeNotContainsOnly","type":"string|object"},{"kind":128,"name":"$isNativeType","location":[365,113,365,133],"scope":"assertAttributeNotContainsOnly","value":"null","type":"bool"},{"kind":128,"name":"$message","location":[365,135,365,148],"scope":"assertAttributeNotContainsOnly","value":"''","type":"string"}]},{"kind":32,"name":"assertCount","modifiers":33,"location":[382,4,399,5],"description":"Asserts the number of elements of an array, Countable or Traversable.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedCount","location":[382,39,382,53],"scope":"assertCount","type":"int"},{"kind":128,"name":"$haystack","location":[382,55,382,64],"scope":"assertCount","type":"mixed"},{"kind":128,"name":"$message","location":[382,66,382,79],"scope":"assertCount","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeCount","modifiers":33,"location":[410,4,417,5],"description":"Asserts the number of elements of an array, Countable or Traversable\nthat is stored in an attribute.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedCount","location":[410,48,410,62],"scope":"assertAttributeCount","type":"int"},{"kind":128,"name":"$haystackAttributeName","location":[410,64,410,86],"scope":"assertAttributeCount","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[410,88,410,110],"scope":"assertAttributeCount","type":"string|object"},{"kind":128,"name":"$message","location":[410,112,410,125],"scope":"assertAttributeCount","value":"''","type":"string"}]},{"kind":32,"name":"assertNotCount","modifiers":33,"location":[426,4,443,5],"description":"Asserts the number of elements of an array, Countable or Traversable.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedCount","location":[426,42,426,56],"scope":"assertNotCount","type":"int"},{"kind":128,"name":"$haystack","location":[426,58,426,67],"scope":"assertNotCount","type":"mixed"},{"kind":128,"name":"$message","location":[426,69,426,82],"scope":"assertNotCount","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeNotCount","modifiers":33,"location":[454,4,461,5],"description":"Asserts the number of elements of an array, Countable or Traversable\nthat is stored in an attribute.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedCount","location":[454,51,454,65],"scope":"assertAttributeNotCount","type":"int"},{"kind":128,"name":"$haystackAttributeName","location":[454,67,454,89],"scope":"assertAttributeNotCount","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[454,91,454,113],"scope":"assertAttributeNotCount","type":"string|object"},{"kind":128,"name":"$message","location":[454,115,454,128],"scope":"assertAttributeNotCount","value":"''","type":"string"}]},{"kind":32,"name":"assertEquals","modifiers":33,"location":[474,4,485,5],"description":"Asserts that two variables are equal.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[474,40,474,49],"scope":"assertEquals","type":"mixed"},{"kind":128,"name":"$actual","location":[474,51,474,58],"scope":"assertEquals","type":"mixed"},{"kind":128,"name":"$message","location":[474,60,474,73],"scope":"assertEquals","value":"''","type":"string"},{"kind":128,"name":"$delta","location":[474,75,474,87],"scope":"assertEquals","value":"0.0","type":"float"},{"kind":128,"name":"$maxDepth","location":[474,89,474,103],"scope":"assertEquals","value":"10","type":"int"},{"kind":128,"name":"$canonicalize","location":[474,105,474,126],"scope":"assertEquals","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[474,128,474,147],"scope":"assertEquals","value":"false","type":"bool"}]},{"kind":32,"name":"assertAttributeEquals","modifiers":33,"location":[499,4,510,5],"description":"Asserts that a variable is equal to an attribute of an object.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[499,49,499,58],"scope":"assertAttributeEquals","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[499,60,499,80],"scope":"assertAttributeEquals","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[499,82,499,102],"scope":"assertAttributeEquals","type":"string|object"},{"kind":128,"name":"$message","location":[499,104,499,117],"scope":"assertAttributeEquals","value":"''","type":"string"},{"kind":128,"name":"$delta","location":[499,119,499,131],"scope":"assertAttributeEquals","value":"0.0","type":"float"},{"kind":128,"name":"$maxDepth","location":[499,133,499,147],"scope":"assertAttributeEquals","value":"10","type":"int"},{"kind":128,"name":"$canonicalize","location":[499,149,499,170],"scope":"assertAttributeEquals","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[499,172,499,191],"scope":"assertAttributeEquals","value":"false","type":"bool"}]},{"kind":32,"name":"assertNotEquals","modifiers":33,"location":[523,4,536,5],"description":"Asserts that two variables are not equal.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[523,43,523,52],"scope":"assertNotEquals","type":"mixed"},{"kind":128,"name":"$actual","location":[523,54,523,61],"scope":"assertNotEquals","type":"mixed"},{"kind":128,"name":"$message","location":[523,63,523,76],"scope":"assertNotEquals","value":"''","type":"string"},{"kind":128,"name":"$delta","location":[523,78,523,90],"scope":"assertNotEquals","value":"0.0","type":"float"},{"kind":128,"name":"$maxDepth","location":[523,92,523,106],"scope":"assertNotEquals","value":"10","type":"int"},{"kind":128,"name":"$canonicalize","location":[523,108,523,129],"scope":"assertNotEquals","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[523,131,523,150],"scope":"assertNotEquals","value":"false","type":"bool"}]},{"kind":32,"name":"assertAttributeNotEquals","modifiers":33,"location":[550,4,561,5],"description":"Asserts that a variable is not equal to an attribute of an object.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[550,52,550,61],"scope":"assertAttributeNotEquals","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[550,63,550,83],"scope":"assertAttributeNotEquals","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[550,85,550,105],"scope":"assertAttributeNotEquals","type":"string|object"},{"kind":128,"name":"$message","location":[550,107,550,120],"scope":"assertAttributeNotEquals","value":"''","type":"string"},{"kind":128,"name":"$delta","location":[550,122,550,134],"scope":"assertAttributeNotEquals","value":"0.0","type":"float"},{"kind":128,"name":"$maxDepth","location":[550,136,550,150],"scope":"assertAttributeNotEquals","value":"10","type":"int"},{"kind":128,"name":"$canonicalize","location":[550,152,550,173],"scope":"assertAttributeNotEquals","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[550,175,550,194],"scope":"assertAttributeNotEquals","value":"false","type":"bool"}]},{"kind":32,"name":"assertEmpty","modifiers":33,"location":[571,4,574,5],"description":"Asserts that a variable is empty.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$actual","location":[571,39,571,46],"scope":"assertEmpty","type":"mixed"},{"kind":128,"name":"$message","location":[571,48,571,61],"scope":"assertEmpty","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeEmpty","modifiers":33,"location":[584,4,590,5],"description":"Asserts that a static attribute of a class or an attribute of an object\nis empty.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$haystackAttributeName","location":[584,48,584,70],"scope":"assertAttributeEmpty","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[584,72,584,94],"scope":"assertAttributeEmpty","type":"string|object"},{"kind":128,"name":"$message","location":[584,96,584,109],"scope":"assertAttributeEmpty","value":"''","type":"string"}]},{"kind":32,"name":"assertNotEmpty","modifiers":33,"location":[600,4,603,5],"description":"Asserts that a variable is not empty.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$actual","location":[600,42,600,49],"scope":"assertNotEmpty","type":"mixed"},{"kind":128,"name":"$message","location":[600,51,600,64],"scope":"assertNotEmpty","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeNotEmpty","modifiers":33,"location":[613,4,619,5],"description":"Asserts that a static attribute of a class or an attribute of an object\nis not empty.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$haystackAttributeName","location":[613,51,613,73],"scope":"assertAttributeNotEmpty","type":"string"},{"kind":128,"name":"$haystackClassOrObject","location":[613,75,613,97],"scope":"assertAttributeNotEmpty","type":"string|object"},{"kind":128,"name":"$message","location":[613,99,613,112],"scope":"assertAttributeNotEmpty","value":"''","type":"string"}]},{"kind":32,"name":"assertGreaterThan","modifiers":33,"location":[628,4,631,5],"description":"Asserts that a value is greater than another value.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[628,45,628,54],"scope":"assertGreaterThan","type":"mixed"},{"kind":128,"name":"$actual","location":[628,56,628,63],"scope":"assertGreaterThan","type":"mixed"},{"kind":128,"name":"$message","location":[628,65,628,78],"scope":"assertGreaterThan","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeGreaterThan","modifiers":33,"location":[641,4,648,5],"description":"Asserts that an attribute is greater than another value.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[641,54,641,63],"scope":"assertAttributeGreaterThan","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[641,65,641,85],"scope":"assertAttributeGreaterThan","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[641,87,641,107],"scope":"assertAttributeGreaterThan","type":"string|object"},{"kind":128,"name":"$message","location":[641,109,641,122],"scope":"assertAttributeGreaterThan","value":"''","type":"string"}]},{"kind":32,"name":"assertGreaterThanOrEqual","modifiers":33,"location":[657,4,664,5],"description":"Asserts that a value is greater than or equal to another value.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[657,52,657,61],"scope":"assertGreaterThanOrEqual","type":"mixed"},{"kind":128,"name":"$actual","location":[657,63,657,70],"scope":"assertGreaterThanOrEqual","type":"mixed"},{"kind":128,"name":"$message","location":[657,72,657,85],"scope":"assertGreaterThanOrEqual","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeGreaterThanOrEqual","modifiers":33,"location":[674,4,681,5],"description":"Asserts that an attribute is greater than or equal to another value.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[674,61,674,70],"scope":"assertAttributeGreaterThanOrEqual","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[674,72,674,92],"scope":"assertAttributeGreaterThanOrEqual","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[674,94,674,114],"scope":"assertAttributeGreaterThanOrEqual","type":"string|object"},{"kind":128,"name":"$message","location":[674,116,674,129],"scope":"assertAttributeGreaterThanOrEqual","value":"''","type":"string"}]},{"kind":32,"name":"assertLessThan","modifiers":33,"location":[690,4,693,5],"description":"Asserts that a value is smaller than another value.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[690,42,690,51],"scope":"assertLessThan","type":"mixed"},{"kind":128,"name":"$actual","location":[690,53,690,60],"scope":"assertLessThan","type":"mixed"},{"kind":128,"name":"$message","location":[690,62,690,75],"scope":"assertLessThan","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeLessThan","modifiers":33,"location":[703,4,710,5],"description":"Asserts that an attribute is smaller than another value.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[703,51,703,60],"scope":"assertAttributeLessThan","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[703,62,703,82],"scope":"assertAttributeLessThan","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[703,84,703,104],"scope":"assertAttributeLessThan","type":"string|object"},{"kind":128,"name":"$message","location":[703,106,703,119],"scope":"assertAttributeLessThan","value":"''","type":"string"}]},{"kind":32,"name":"assertLessThanOrEqual","modifiers":33,"location":[719,4,722,5],"description":"Asserts that a value is smaller than or equal to another value.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[719,49,719,58],"scope":"assertLessThanOrEqual","type":"mixed"},{"kind":128,"name":"$actual","location":[719,60,719,67],"scope":"assertLessThanOrEqual","type":"mixed"},{"kind":128,"name":"$message","location":[719,69,719,82],"scope":"assertLessThanOrEqual","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeLessThanOrEqual","modifiers":33,"location":[732,4,739,5],"description":"Asserts that an attribute is smaller than or equal to another value.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[732,58,732,67],"scope":"assertAttributeLessThanOrEqual","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[732,69,732,89],"scope":"assertAttributeLessThanOrEqual","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[732,91,732,111],"scope":"assertAttributeLessThanOrEqual","type":"string|object"},{"kind":128,"name":"$message","location":[732,113,732,126],"scope":"assertAttributeLessThanOrEqual","value":"''","type":"string"}]},{"kind":32,"name":"assertFileEquals","modifiers":33,"location":[751,4,765,5],"description":"Asserts that the contents of one file is equal to the contents of another\nfile.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[751,44,751,53],"scope":"assertFileEquals","type":"string"},{"kind":128,"name":"$actual","location":[751,55,751,62],"scope":"assertFileEquals","type":"string"},{"kind":128,"name":"$message","location":[751,64,751,77],"scope":"assertFileEquals","value":"''","type":"string"},{"kind":128,"name":"$canonicalize","location":[751,79,751,100],"scope":"assertFileEquals","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[751,102,751,121],"scope":"assertFileEquals","value":"false","type":"bool"}]},{"kind":32,"name":"assertFileNotEquals","modifiers":33,"location":[777,4,791,5],"description":"Asserts that the contents of one file is not equal to the contents of\nanother file.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[777,47,777,56],"scope":"assertFileNotEquals","type":"string"},{"kind":128,"name":"$actual","location":[777,58,777,65],"scope":"assertFileNotEquals","type":"string"},{"kind":128,"name":"$message","location":[777,67,777,80],"scope":"assertFileNotEquals","value":"''","type":"string"},{"kind":128,"name":"$canonicalize","location":[777,82,777,103],"scope":"assertFileNotEquals","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[777,105,777,124],"scope":"assertFileNotEquals","value":"false","type":"bool"}]},{"kind":32,"name":"assertStringEqualsFile","modifiers":33,"location":[803,4,816,5],"description":"Asserts that the contents of a string is equal\nto the contents of a file.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedFile","location":[803,50,803,63],"scope":"assertStringEqualsFile","type":"string"},{"kind":128,"name":"$actualString","location":[803,65,803,78],"scope":"assertStringEqualsFile","type":"string"},{"kind":128,"name":"$message","location":[803,80,803,93],"scope":"assertStringEqualsFile","value":"''","type":"string"},{"kind":128,"name":"$canonicalize","location":[803,95,803,116],"scope":"assertStringEqualsFile","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[803,118,803,137],"scope":"assertStringEqualsFile","value":"false","type":"bool"}]},{"kind":32,"name":"assertStringNotEqualsFile","modifiers":33,"location":[828,4,841,5],"description":"Asserts that the contents of a string is not equal\nto the contents of a file.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedFile","location":[828,53,828,66],"scope":"assertStringNotEqualsFile","type":"string"},{"kind":128,"name":"$actualString","location":[828,68,828,81],"scope":"assertStringNotEqualsFile","type":"string"},{"kind":128,"name":"$message","location":[828,83,828,96],"scope":"assertStringNotEqualsFile","value":"''","type":"string"},{"kind":128,"name":"$canonicalize","location":[828,98,828,119],"scope":"assertStringNotEqualsFile","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[828,121,828,140],"scope":"assertStringNotEqualsFile","value":"false","type":"bool"}]},{"kind":32,"name":"assertIsReadable","modifiers":33,"location":[849,4,858,5],"description":"Asserts that a file/dir is readable.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$filename","location":[849,44,849,53],"scope":"assertIsReadable","type":"string"},{"kind":128,"name":"$message","location":[849,55,849,68],"scope":"assertIsReadable","value":"''","type":"string"}]},{"kind":32,"name":"assertNotIsReadable","modifiers":33,"location":[866,4,877,5],"description":"Asserts that a file/dir exists and is not readable.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$filename","location":[866,47,866,56],"scope":"assertNotIsReadable","type":"string"},{"kind":128,"name":"$message","location":[866,58,866,71],"scope":"assertNotIsReadable","value":"''","type":"string"}]},{"kind":32,"name":"assertIsWritable","modifiers":33,"location":[885,4,894,5],"description":"Asserts that a file/dir exists and is writable.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$filename","location":[885,44,885,53],"scope":"assertIsWritable","type":"string"},{"kind":128,"name":"$message","location":[885,55,885,68],"scope":"assertIsWritable","value":"''","type":"string"}]},{"kind":32,"name":"assertNotIsWritable","modifiers":33,"location":[902,4,913,5],"description":"Asserts that a file/dir exists and is not writable.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$filename","location":[902,47,902,56],"scope":"assertNotIsWritable","type":"string"},{"kind":128,"name":"$message","location":[902,58,902,71],"scope":"assertNotIsWritable","value":"''","type":"string"}]},{"kind":32,"name":"assertDirectoryExists","modifiers":33,"location":[921,4,930,5],"description":"Asserts that a directory exists.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$directory","location":[921,49,921,59],"scope":"assertDirectoryExists","type":"string"},{"kind":128,"name":"$message","location":[921,61,921,74],"scope":"assertDirectoryExists","value":"''","type":"string"}]},{"kind":32,"name":"assertDirectoryNotExists","modifiers":33,"location":[938,4,949,5],"description":"Asserts that a directory does not exist.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$directory","location":[938,52,938,62],"scope":"assertDirectoryNotExists","type":"string"},{"kind":128,"name":"$message","location":[938,64,938,77],"scope":"assertDirectoryNotExists","value":"''","type":"string"}]},{"kind":32,"name":"assertDirectoryIsReadable","modifiers":33,"location":[957,4,961,5],"description":"Asserts that a directory exists and is readable.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$directory","location":[957,53,957,63],"scope":"assertDirectoryIsReadable","type":"string"},{"kind":128,"name":"$message","location":[957,65,957,78],"scope":"assertDirectoryIsReadable","value":"''","type":"string"}]},{"kind":32,"name":"assertDirectoryNotIsReadable","modifiers":33,"location":[969,4,973,5],"description":"Asserts that a directory exists and is not readable.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$directory","location":[969,56,969,66],"scope":"assertDirectoryNotIsReadable","type":"string"},{"kind":128,"name":"$message","location":[969,68,969,81],"scope":"assertDirectoryNotIsReadable","value":"''","type":"string"}]},{"kind":32,"name":"assertDirectoryIsWritable","modifiers":33,"location":[981,4,985,5],"description":"Asserts that a directory exists and is writable.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$directory","location":[981,53,981,63],"scope":"assertDirectoryIsWritable","type":"string"},{"kind":128,"name":"$message","location":[981,65,981,78],"scope":"assertDirectoryIsWritable","value":"''","type":"string"}]},{"kind":32,"name":"assertDirectoryNotIsWritable","modifiers":33,"location":[993,4,997,5],"description":"Asserts that a directory exists and is not writable.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$directory","location":[993,56,993,66],"scope":"assertDirectoryNotIsWritable","type":"string"},{"kind":128,"name":"$message","location":[993,68,993,81],"scope":"assertDirectoryNotIsWritable","value":"''","type":"string"}]},{"kind":32,"name":"assertFileExists","modifiers":33,"location":[1005,4,1014,5],"description":"Asserts that a file exists.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$filename","location":[1005,44,1005,53],"scope":"assertFileExists","type":"string"},{"kind":128,"name":"$message","location":[1005,55,1005,68],"scope":"assertFileExists","value":"''","type":"string"}]},{"kind":32,"name":"assertFileNotExists","modifiers":33,"location":[1022,4,1033,5],"description":"Asserts that a file does not exist.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$filename","location":[1022,47,1022,56],"scope":"assertFileNotExists","type":"string"},{"kind":128,"name":"$message","location":[1022,58,1022,71],"scope":"assertFileNotExists","value":"''","type":"string"}]},{"kind":32,"name":"assertFileIsReadable","modifiers":33,"location":[1041,4,1045,5],"description":"Asserts that a file exists and is readable.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$file","location":[1041,48,1041,53],"scope":"assertFileIsReadable","type":"string"},{"kind":128,"name":"$message","location":[1041,55,1041,68],"scope":"assertFileIsReadable","value":"''","type":"string"}]},{"kind":32,"name":"assertFileNotIsReadable","modifiers":33,"location":[1053,4,1057,5],"description":"Asserts that a file exists and is not readable.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$file","location":[1053,51,1053,56],"scope":"assertFileNotIsReadable","type":"string"},{"kind":128,"name":"$message","location":[1053,58,1053,71],"scope":"assertFileNotIsReadable","value":"''","type":"string"}]},{"kind":32,"name":"assertFileIsWritable","modifiers":33,"location":[1065,4,1069,5],"description":"Asserts that a file exists and is writable.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$file","location":[1065,48,1065,53],"scope":"assertFileIsWritable","type":"string"},{"kind":128,"name":"$message","location":[1065,55,1065,68],"scope":"assertFileIsWritable","value":"''","type":"string"}]},{"kind":32,"name":"assertFileNotIsWritable","modifiers":33,"location":[1077,4,1081,5],"description":"Asserts that a file exists and is not writable.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$file","location":[1077,51,1077,56],"scope":"assertFileNotIsWritable","type":"string"},{"kind":128,"name":"$message","location":[1077,58,1077,71],"scope":"assertFileNotIsWritable","value":"''","type":"string"}]},{"kind":32,"name":"assertTrue","modifiers":33,"location":[1091,4,1094,5],"description":"Asserts that a condition is true.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$condition","location":[1091,38,1091,48],"scope":"assertTrue","type":"bool"},{"kind":128,"name":"$message","location":[1091,50,1091,63],"scope":"assertTrue","value":"''","type":"string"}]},{"kind":32,"name":"assertNotTrue","modifiers":33,"location":[1104,4,1107,5],"description":"Asserts that a condition is not true.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$condition","location":[1104,41,1104,51],"scope":"assertNotTrue","type":"bool"},{"kind":128,"name":"$message","location":[1104,53,1104,66],"scope":"assertNotTrue","value":"''","type":"string"}]},{"kind":32,"name":"assertFalse","modifiers":33,"location":[1117,4,1120,5],"description":"Asserts that a condition is false.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$condition","location":[1117,39,1117,49],"scope":"assertFalse","type":"bool"},{"kind":128,"name":"$message","location":[1117,51,1117,64],"scope":"assertFalse","value":"''","type":"string"}]},{"kind":32,"name":"assertNotFalse","modifiers":33,"location":[1130,4,1133,5],"description":"Asserts that a condition is not false.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$condition","location":[1130,42,1130,52],"scope":"assertNotFalse","type":"bool"},{"kind":128,"name":"$message","location":[1130,54,1130,67],"scope":"assertNotFalse","value":"''","type":"string"}]},{"kind":32,"name":"assertNull","modifiers":33,"location":[1141,4,1144,5],"description":"Asserts that a variable is null.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$actual","location":[1141,38,1141,45],"scope":"assertNull","type":"mixed"},{"kind":128,"name":"$message","location":[1141,47,1141,60],"scope":"assertNull","value":"''","type":"string"}]},{"kind":32,"name":"assertNotNull","modifiers":33,"location":[1152,4,1155,5],"description":"Asserts that a variable is not null.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$actual","location":[1152,41,1152,48],"scope":"assertNotNull","type":"mixed"},{"kind":128,"name":"$message","location":[1152,50,1152,63],"scope":"assertNotNull","value":"''","type":"string"}]},{"kind":32,"name":"assertFinite","modifiers":33,"location":[1163,4,1166,5],"description":"Asserts that a variable is finite.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$actual","location":[1163,40,1163,47],"scope":"assertFinite","type":"mixed"},{"kind":128,"name":"$message","location":[1163,49,1163,62],"scope":"assertFinite","value":"''","type":"string"}]},{"kind":32,"name":"assertInfinite","modifiers":33,"location":[1174,4,1177,5],"description":"Asserts that a variable is infinite.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$actual","location":[1174,42,1174,49],"scope":"assertInfinite","type":"mixed"},{"kind":128,"name":"$message","location":[1174,51,1174,64],"scope":"assertInfinite","value":"''","type":"string"}]},{"kind":32,"name":"assertNan","modifiers":33,"location":[1185,4,1188,5],"description":"Asserts that a variable is nan.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$actual","location":[1185,37,1185,44],"scope":"assertNan","type":"mixed"},{"kind":128,"name":"$message","location":[1185,46,1185,59],"scope":"assertNan","value":"''","type":"string"}]},{"kind":32,"name":"assertClassHasAttribute","modifiers":33,"location":[1197,4,1216,5],"description":"Asserts that a class has a specified attribute.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$attributeName","location":[1197,51,1197,65],"scope":"assertClassHasAttribute","type":"string"},{"kind":128,"name":"$className","location":[1197,67,1197,77],"scope":"assertClassHasAttribute","type":"string"},{"kind":128,"name":"$message","location":[1197,79,1197,92],"scope":"assertClassHasAttribute","value":"''","type":"string"}]},{"kind":32,"name":"assertClassNotHasAttribute","modifiers":33,"location":[1225,4,1244,5],"description":"Asserts that a class does not have a specified attribute.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$attributeName","location":[1225,54,1225,68],"scope":"assertClassNotHasAttribute","type":"string"},{"kind":128,"name":"$className","location":[1225,70,1225,80],"scope":"assertClassNotHasAttribute","type":"string"},{"kind":128,"name":"$message","location":[1225,82,1225,95],"scope":"assertClassNotHasAttribute","value":"''","type":"string"}]},{"kind":32,"name":"assertClassHasStaticAttribute","modifiers":33,"location":[1253,4,1272,5],"description":"Asserts that a class has a specified static attribute.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$attributeName","location":[1253,57,1253,71],"scope":"assertClassHasStaticAttribute","type":"string"},{"kind":128,"name":"$className","location":[1253,73,1253,83],"scope":"assertClassHasStaticAttribute","type":"string"},{"kind":128,"name":"$message","location":[1253,85,1253,98],"scope":"assertClassHasStaticAttribute","value":"''","type":"string"}]},{"kind":32,"name":"assertClassNotHasStaticAttribute","modifiers":33,"location":[1281,4,1302,5],"description":"Asserts that a class does not have a specified static attribute.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$attributeName","location":[1281,60,1281,74],"scope":"assertClassNotHasStaticAttribute","type":"string"},{"kind":128,"name":"$className","location":[1281,76,1281,86],"scope":"assertClassNotHasStaticAttribute","type":"string"},{"kind":128,"name":"$message","location":[1281,88,1281,101],"scope":"assertClassNotHasStaticAttribute","value":"''","type":"string"}]},{"kind":32,"name":"assertObjectHasAttribute","modifiers":33,"location":[1311,4,1330,5],"description":"Asserts that an object has a specified attribute.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$attributeName","location":[1311,52,1311,66],"scope":"assertObjectHasAttribute","type":"string"},{"kind":128,"name":"$object","location":[1311,68,1311,75],"scope":"assertObjectHasAttribute","type":"object"},{"kind":128,"name":"$message","location":[1311,77,1311,90],"scope":"assertObjectHasAttribute","value":"''","type":"string"}]},{"kind":32,"name":"assertObjectNotHasAttribute","modifiers":33,"location":[1339,4,1358,5],"description":"Asserts that an object does not have a specified attribute.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$attributeName","location":[1339,55,1339,69],"scope":"assertObjectNotHasAttribute","type":"string"},{"kind":128,"name":"$object","location":[1339,71,1339,78],"scope":"assertObjectNotHasAttribute","type":"object"},{"kind":128,"name":"$message","location":[1339,80,1339,93],"scope":"assertObjectNotHasAttribute","value":"''","type":"string"}]},{"kind":32,"name":"assertSame","modifiers":33,"location":[1369,4,1380,5],"description":"Asserts that two variables have the same type and value.\nUsed on objects, it asserts that two variables reference\nthe same object.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[1369,38,1369,47],"scope":"assertSame","type":"mixed"},{"kind":128,"name":"$actual","location":[1369,49,1369,56],"scope":"assertSame","type":"mixed"},{"kind":128,"name":"$message","location":[1369,58,1369,71],"scope":"assertSame","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeSame","modifiers":33,"location":[1391,4,1398,5],"description":"Asserts that a variable and an attribute of an object have the same type\nand value.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[1391,47,1391,56],"scope":"assertAttributeSame","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[1391,58,1391,78],"scope":"assertAttributeSame","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[1391,80,1391,100],"scope":"assertAttributeSame","type":"string|object"},{"kind":128,"name":"$message","location":[1391,102,1391,115],"scope":"assertAttributeSame","value":"''","type":"string"}]},{"kind":32,"name":"assertNotSame","modifiers":33,"location":[1409,4,1420,5],"description":"Asserts that two variables do not have the same type and value.\nUsed on objects, it asserts that two variables do not reference\nthe same object.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[1409,41,1409,50],"scope":"assertNotSame","type":"mixed"},{"kind":128,"name":"$actual","location":[1409,52,1409,59],"scope":"assertNotSame","type":"mixed"},{"kind":128,"name":"$message","location":[1409,61,1409,74],"scope":"assertNotSame","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeNotSame","modifiers":33,"location":[1431,4,1438,5],"description":"Asserts that a variable and an attribute of an object do not have the\nsame type and value.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[1431,50,1431,59],"scope":"assertAttributeNotSame","type":"mixed"},{"kind":128,"name":"$actualAttributeName","location":[1431,61,1431,81],"scope":"assertAttributeNotSame","type":"string"},{"kind":128,"name":"$actualClassOrObject","location":[1431,83,1431,103],"scope":"assertAttributeNotSame","type":"string|object"},{"kind":128,"name":"$message","location":[1431,105,1431,118],"scope":"assertAttributeNotSame","value":"''","type":"string"}]},{"kind":32,"name":"assertInstanceOf","modifiers":33,"location":[1447,4,1458,5],"description":"Asserts that a variable is of a given type.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[1447,44,1447,53],"scope":"assertInstanceOf","type":"string"},{"kind":128,"name":"$actual","location":[1447,55,1447,62],"scope":"assertInstanceOf","type":"mixed"},{"kind":128,"name":"$message","location":[1447,64,1447,77],"scope":"assertInstanceOf","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeInstanceOf","modifiers":33,"location":[1468,4,1475,5],"description":"Asserts that an attribute is of a given type.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[1468,53,1468,62],"scope":"assertAttributeInstanceOf","type":"string"},{"kind":128,"name":"$attributeName","location":[1468,64,1468,78],"scope":"assertAttributeInstanceOf","type":"string"},{"kind":128,"name":"$classOrObject","location":[1468,80,1468,94],"scope":"assertAttributeInstanceOf","type":"string|object"},{"kind":128,"name":"$message","location":[1468,96,1468,109],"scope":"assertAttributeInstanceOf","value":"''","type":"string"}]},{"kind":32,"name":"assertNotInstanceOf","modifiers":33,"location":[1484,4,1495,5],"description":"Asserts that a variable is not of a given type.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[1484,47,1484,56],"scope":"assertNotInstanceOf","type":"string"},{"kind":128,"name":"$actual","location":[1484,58,1484,65],"scope":"assertNotInstanceOf","type":"mixed"},{"kind":128,"name":"$message","location":[1484,67,1484,80],"scope":"assertNotInstanceOf","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeNotInstanceOf","modifiers":33,"location":[1505,4,1512,5],"description":"Asserts that an attribute is of a given type.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[1505,56,1505,65],"scope":"assertAttributeNotInstanceOf","type":"string"},{"kind":128,"name":"$attributeName","location":[1505,67,1505,81],"scope":"assertAttributeNotInstanceOf","type":"string"},{"kind":128,"name":"$classOrObject","location":[1505,83,1505,97],"scope":"assertAttributeNotInstanceOf","type":"string|object"},{"kind":128,"name":"$message","location":[1505,99,1505,112],"scope":"assertAttributeNotInstanceOf","value":"''","type":"string"}]},{"kind":32,"name":"assertInternalType","modifiers":33,"location":[1521,4,1532,5],"description":"Asserts that a variable is of a given type.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[1521,46,1521,55],"scope":"assertInternalType","type":"string"},{"kind":128,"name":"$actual","location":[1521,57,1521,64],"scope":"assertInternalType","type":"mixed"},{"kind":128,"name":"$message","location":[1521,66,1521,79],"scope":"assertInternalType","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeInternalType","modifiers":33,"location":[1542,4,1549,5],"description":"Asserts that an attribute is of a given type.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[1542,55,1542,64],"scope":"assertAttributeInternalType","type":"string"},{"kind":128,"name":"$attributeName","location":[1542,66,1542,80],"scope":"assertAttributeInternalType","type":"string"},{"kind":128,"name":"$classOrObject","location":[1542,82,1542,96],"scope":"assertAttributeInternalType","type":"string|object"},{"kind":128,"name":"$message","location":[1542,98,1542,111],"scope":"assertAttributeInternalType","value":"''","type":"string"}]},{"kind":32,"name":"assertNotInternalType","modifiers":33,"location":[1558,4,1569,5],"description":"Asserts that a variable is not of a given type.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[1558,49,1558,58],"scope":"assertNotInternalType","type":"string"},{"kind":128,"name":"$actual","location":[1558,60,1558,67],"scope":"assertNotInternalType","type":"mixed"},{"kind":128,"name":"$message","location":[1558,69,1558,82],"scope":"assertNotInternalType","value":"''","type":"string"}]},{"kind":32,"name":"assertAttributeNotInternalType","modifiers":33,"location":[1579,4,1586,5],"description":"Asserts that an attribute is of a given type.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[1579,58,1579,67],"scope":"assertAttributeNotInternalType","type":"string"},{"kind":128,"name":"$attributeName","location":[1579,69,1579,83],"scope":"assertAttributeNotInternalType","type":"string"},{"kind":128,"name":"$classOrObject","location":[1579,85,1579,99],"scope":"assertAttributeNotInternalType","type":"string|object"},{"kind":128,"name":"$message","location":[1579,101,1579,114],"scope":"assertAttributeNotInternalType","value":"''","type":"string"}]},{"kind":32,"name":"assertRegExp","modifiers":33,"location":[1595,4,1608,5],"description":"Asserts that a string matches a given regular expression.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$pattern","location":[1595,40,1595,48],"scope":"assertRegExp","type":"string"},{"kind":128,"name":"$string","location":[1595,50,1595,57],"scope":"assertRegExp","type":"string"},{"kind":128,"name":"$message","location":[1595,59,1595,72],"scope":"assertRegExp","value":"''","type":"string"}]},{"kind":32,"name":"assertNotRegExp","modifiers":33,"location":[1617,4,1632,5],"description":"Asserts that a string does not match a given regular expression.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$pattern","location":[1617,43,1617,51],"scope":"assertNotRegExp","type":"string"},{"kind":128,"name":"$string","location":[1617,53,1617,60],"scope":"assertNotRegExp","type":"string"},{"kind":128,"name":"$message","location":[1617,62,1617,75],"scope":"assertNotRegExp","value":"''","type":"string"}]},{"kind":32,"name":"assertSameSize","modifiers":33,"location":[1642,4,1661,5],"description":"Assert that the size of two arrays (or `Countable` or `Traversable` objects)\nis the same.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[1642,42,1642,51],"scope":"assertSameSize","type":"array|Countable|Traversable"},{"kind":128,"name":"$actual","location":[1642,53,1642,60],"scope":"assertSameSize","type":"array|Countable|Traversable"},{"kind":128,"name":"$message","location":[1642,62,1642,75],"scope":"assertSameSize","value":"''","type":"string"}]},{"kind":32,"name":"assertNotSameSize","modifiers":33,"location":[1671,4,1690,5],"description":"Assert that the size of two arrays (or `Countable` or `Traversable` objects)\nis not the same.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expected","location":[1671,45,1671,54],"scope":"assertNotSameSize","type":"array|Countable|Traversable"},{"kind":128,"name":"$actual","location":[1671,56,1671,63],"scope":"assertNotSameSize","type":"array|Countable|Traversable"},{"kind":128,"name":"$message","location":[1671,65,1671,78],"scope":"assertNotSameSize","value":"''","type":"string"}]},{"kind":32,"name":"assertStringMatchesFormat","modifiers":33,"location":[1699,4,1712,5],"description":"Asserts that a string matches a given format string.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$format","location":[1699,53,1699,60],"scope":"assertStringMatchesFormat","type":"string"},{"kind":128,"name":"$string","location":[1699,62,1699,69],"scope":"assertStringMatchesFormat","type":"string"},{"kind":128,"name":"$message","location":[1699,71,1699,84],"scope":"assertStringMatchesFormat","value":"''","type":"string"}]},{"kind":32,"name":"assertStringNotMatchesFormat","modifiers":33,"location":[1721,4,1736,5],"description":"Asserts that a string does not match a given format string.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$format","location":[1721,56,1721,63],"scope":"assertStringNotMatchesFormat","type":"string"},{"kind":128,"name":"$string","location":[1721,65,1721,72],"scope":"assertStringNotMatchesFormat","type":"string"},{"kind":128,"name":"$message","location":[1721,74,1721,87],"scope":"assertStringNotMatchesFormat","value":"''","type":"string"}]},{"kind":32,"name":"assertStringMatchesFormatFile","modifiers":33,"location":[1745,4,1758,5],"description":"Asserts that a string matches a given format file.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$formatFile","location":[1745,57,1745,68],"scope":"assertStringMatchesFormatFile","type":"string"},{"kind":128,"name":"$string","location":[1745,70,1745,77],"scope":"assertStringMatchesFormatFile","type":"string"},{"kind":128,"name":"$message","location":[1745,79,1745,92],"scope":"assertStringMatchesFormatFile","value":"''","type":"string"}]},{"kind":32,"name":"assertStringNotMatchesFormatFile","modifiers":33,"location":[1767,4,1782,5],"description":"Asserts that a string does not match a given format string.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$formatFile","location":[1767,60,1767,71],"scope":"assertStringNotMatchesFormatFile","type":"string"},{"kind":128,"name":"$string","location":[1767,73,1767,80],"scope":"assertStringNotMatchesFormatFile","type":"string"},{"kind":128,"name":"$message","location":[1767,82,1767,95],"scope":"assertStringNotMatchesFormatFile","value":"''","type":"string"}]},{"kind":32,"name":"assertStringStartsWith","modifiers":33,"location":[1791,4,1806,5],"description":"Asserts that a string starts with a given prefix.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$prefix","location":[1791,50,1791,57],"scope":"assertStringStartsWith","type":"string"},{"kind":128,"name":"$string","location":[1791,59,1791,66],"scope":"assertStringStartsWith","type":"string"},{"kind":128,"name":"$message","location":[1791,68,1791,81],"scope":"assertStringStartsWith","value":"''","type":"string"}]},{"kind":32,"name":"assertStringStartsNotWith","modifiers":33,"location":[1815,4,1830,5],"description":"Asserts that a string starts not with a given prefix.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$prefix","location":[1815,53,1815,60],"scope":"assertStringStartsNotWith","type":"string"},{"kind":128,"name":"$string","location":[1815,62,1815,69],"scope":"assertStringStartsNotWith","type":"string"},{"kind":128,"name":"$message","location":[1815,71,1815,84],"scope":"assertStringStartsNotWith","value":"''","type":"string"}]},{"kind":32,"name":"assertStringEndsWith","modifiers":33,"location":[1839,4,1852,5],"description":"Asserts that a string ends with a given suffix.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$suffix","location":[1839,48,1839,55],"scope":"assertStringEndsWith","type":"string"},{"kind":128,"name":"$string","location":[1839,57,1839,64],"scope":"assertStringEndsWith","type":"string"},{"kind":128,"name":"$message","location":[1839,66,1839,79],"scope":"assertStringEndsWith","value":"''","type":"string"}]},{"kind":32,"name":"assertStringEndsNotWith","modifiers":33,"location":[1861,4,1876,5],"description":"Asserts that a string ends not with a given suffix.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$suffix","location":[1861,51,1861,58],"scope":"assertStringEndsNotWith","type":"string"},{"kind":128,"name":"$string","location":[1861,60,1861,67],"scope":"assertStringEndsNotWith","type":"string"},{"kind":128,"name":"$message","location":[1861,69,1861,82],"scope":"assertStringEndsNotWith","value":"''","type":"string"}]},{"kind":32,"name":"assertXmlFileEqualsXmlFile","modifiers":33,"location":[1885,4,1891,5],"description":"Asserts that two XML files are equal.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedFile","location":[1885,54,1885,67],"scope":"assertXmlFileEqualsXmlFile","type":"string"},{"kind":128,"name":"$actualFile","location":[1885,69,1885,80],"scope":"assertXmlFileEqualsXmlFile","type":"string"},{"kind":128,"name":"$message","location":[1885,82,1885,95],"scope":"assertXmlFileEqualsXmlFile","value":"''","type":"string"}]},{"kind":32,"name":"assertXmlFileNotEqualsXmlFile","modifiers":33,"location":[1900,4,1906,5],"description":"Asserts that two XML files are not equal.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedFile","location":[1900,57,1900,70],"scope":"assertXmlFileNotEqualsXmlFile","type":"string"},{"kind":128,"name":"$actualFile","location":[1900,72,1900,83],"scope":"assertXmlFileNotEqualsXmlFile","type":"string"},{"kind":128,"name":"$message","location":[1900,85,1900,98],"scope":"assertXmlFileNotEqualsXmlFile","value":"''","type":"string"}]},{"kind":32,"name":"assertXmlStringEqualsXmlFile","modifiers":33,"location":[1915,4,1921,5],"description":"Asserts that two XML documents are equal.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedFile","location":[1915,56,1915,69],"scope":"assertXmlStringEqualsXmlFile","type":"string"},{"kind":128,"name":"$actualXml","location":[1915,71,1915,81],"scope":"assertXmlStringEqualsXmlFile","type":"string"},{"kind":128,"name":"$message","location":[1915,83,1915,96],"scope":"assertXmlStringEqualsXmlFile","value":"''","type":"string"}]},{"kind":32,"name":"assertXmlStringNotEqualsXmlFile","modifiers":33,"location":[1930,4,1936,5],"description":"Asserts that two XML documents are not equal.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedFile","location":[1930,59,1930,72],"scope":"assertXmlStringNotEqualsXmlFile","type":"string"},{"kind":128,"name":"$actualXml","location":[1930,74,1930,84],"scope":"assertXmlStringNotEqualsXmlFile","type":"string"},{"kind":128,"name":"$message","location":[1930,86,1930,99],"scope":"assertXmlStringNotEqualsXmlFile","value":"''","type":"string"}]},{"kind":32,"name":"assertXmlStringEqualsXmlString","modifiers":33,"location":[1945,4,1951,5],"description":"Asserts that two XML documents are equal.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedXml","location":[1945,58,1945,70],"scope":"assertXmlStringEqualsXmlString","type":"string"},{"kind":128,"name":"$actualXml","location":[1945,72,1945,82],"scope":"assertXmlStringEqualsXmlString","type":"string"},{"kind":128,"name":"$message","location":[1945,84,1945,97],"scope":"assertXmlStringEqualsXmlString","value":"''","type":"string"}]},{"kind":32,"name":"assertXmlStringNotEqualsXmlString","modifiers":33,"location":[1960,4,1966,5],"description":"Asserts that two XML documents are not equal.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedXml","location":[1960,61,1960,73],"scope":"assertXmlStringNotEqualsXmlString","type":"string"},{"kind":128,"name":"$actualXml","location":[1960,75,1960,85],"scope":"assertXmlStringNotEqualsXmlString","type":"string"},{"kind":128,"name":"$message","location":[1960,87,1960,100],"scope":"assertXmlStringNotEqualsXmlString","value":"''","type":"string"}]},{"kind":32,"name":"assertEqualXMLStructure","modifiers":33,"location":[1976,4,2046,5],"description":"Asserts that a hierarchy of DOMElements matches.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedElement","location":[1976,51,1976,78],"scope":"assertEqualXMLStructure","typeSource":1,"type":"DOMElement"},{"kind":128,"name":"$actualElement","location":[1976,80,1976,105],"scope":"assertEqualXMLStructure","typeSource":1,"type":"DOMElement"},{"kind":128,"name":"$checkAttributes","location":[1976,107,1976,131],"scope":"assertEqualXMLStructure","value":"false","type":"bool"},{"kind":128,"name":"$message","location":[1976,133,1976,146],"scope":"assertEqualXMLStructure","value":"''","type":"string"}]},{"kind":32,"name":"assertThat","modifiers":33,"location":[2055,4,2060,5],"description":"Evaluates a PHPUnit_Framework_Constraint matcher object.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$value","location":[2055,38,2055,44],"scope":"assertThat","type":"mixed"},{"kind":128,"name":"$constraint","location":[2055,46,2055,86],"scope":"assertThat","typeSource":1,"type":"PHPUnit_Framework_Constraint"},{"kind":128,"name":"$message","location":[2055,88,2055,101],"scope":"assertThat","value":"''","type":"string"}]},{"kind":32,"name":"assertJson","modifiers":33,"location":[2068,4,2075,5],"description":"Asserts that a string is a valid JSON string.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$actualJson","location":[2068,38,2068,49],"scope":"assertJson","type":"string"},{"kind":128,"name":"$message","location":[2068,51,2068,64],"scope":"assertJson","value":"''","type":"string"}]},{"kind":32,"name":"assertJsonStringEqualsJsonString","modifiers":33,"location":[2084,4,2093,5],"description":"Asserts that two given JSON encoded objects or arrays are equal.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedJson","location":[2084,60,2084,73],"scope":"assertJsonStringEqualsJsonString","type":"string"},{"kind":128,"name":"$actualJson","location":[2084,75,2084,86],"scope":"assertJsonStringEqualsJsonString","type":"string"},{"kind":128,"name":"$message","location":[2084,88,2084,101],"scope":"assertJsonStringEqualsJsonString","value":"''","type":"string"}]},{"kind":32,"name":"assertJsonStringNotEqualsJsonString","modifiers":33,"location":[2102,4,2111,5],"description":"Asserts that two given JSON encoded objects or arrays are not equal.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedJson","location":[2102,63,2102,76],"scope":"assertJsonStringNotEqualsJsonString","type":"string"},{"kind":128,"name":"$actualJson","location":[2102,78,2102,89],"scope":"assertJsonStringNotEqualsJsonString","type":"string"},{"kind":128,"name":"$message","location":[2102,91,2102,104],"scope":"assertJsonStringNotEqualsJsonString","value":"''","type":"string"}]},{"kind":32,"name":"assertJsonStringEqualsJsonFile","modifiers":33,"location":[2120,4,2134,5],"description":"Asserts that the generated JSON encoded object and the content of the given file are equal.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedFile","location":[2120,58,2120,71],"scope":"assertJsonStringEqualsJsonFile","type":"string"},{"kind":128,"name":"$actualJson","location":[2120,73,2120,84],"scope":"assertJsonStringEqualsJsonFile","type":"string"},{"kind":128,"name":"$message","location":[2120,86,2120,99],"scope":"assertJsonStringEqualsJsonFile","value":"''","type":"string"}]},{"kind":32,"name":"assertJsonStringNotEqualsJsonFile","modifiers":33,"location":[2143,4,2157,5],"description":"Asserts that the generated JSON encoded object and the content of the given file are not equal.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedFile","location":[2143,61,2143,74],"scope":"assertJsonStringNotEqualsJsonFile","type":"string"},{"kind":128,"name":"$actualJson","location":[2143,76,2143,87],"scope":"assertJsonStringNotEqualsJsonFile","type":"string"},{"kind":128,"name":"$message","location":[2143,89,2143,102],"scope":"assertJsonStringNotEqualsJsonFile","value":"''","type":"string"}]},{"kind":32,"name":"assertJsonFileEqualsJsonFile","modifiers":33,"location":[2166,4,2186,5],"description":"Asserts that two JSON files are equal.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedFile","location":[2166,56,2166,69],"scope":"assertJsonFileEqualsJsonFile","type":"string"},{"kind":128,"name":"$actualFile","location":[2166,71,2166,82],"scope":"assertJsonFileEqualsJsonFile","type":"string"},{"kind":128,"name":"$message","location":[2166,84,2166,97],"scope":"assertJsonFileEqualsJsonFile","value":"''","type":"string"}]},{"kind":32,"name":"assertJsonFileNotEqualsJsonFile","modifiers":33,"location":[2195,4,2215,5],"description":"Asserts that two JSON files are not equal.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$expectedFile","location":[2195,59,2195,72],"scope":"assertJsonFileNotEqualsJsonFile","type":"string"},{"kind":128,"name":"$actualFile","location":[2195,74,2195,85],"scope":"assertJsonFileNotEqualsJsonFile","type":"string"},{"kind":128,"name":"$message","location":[2195,87,2195,100],"scope":"assertJsonFileNotEqualsJsonFile","value":"''","type":"string"}]},{"kind":32,"name":"logicalAnd","modifiers":33,"location":[2222,4,2230,5],"description":"Returns a PHPUnit_Framework_Constraint_And matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_And"},{"kind":32,"name":"logicalOr","modifiers":33,"location":[2237,4,2245,5],"description":"Returns a PHPUnit_Framework_Constraint_Or matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_Or"},{"kind":32,"name":"logicalNot","modifiers":33,"location":[2254,4,2257,5],"description":"Returns a PHPUnit_Framework_Constraint_Not matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_Not","children":[{"kind":128,"name":"$constraint","location":[2254,38,2254,78],"scope":"logicalNot","typeSource":1,"type":"PHPUnit_Framework_Constraint"}]},{"kind":32,"name":"logicalXor","modifiers":33,"location":[2264,4,2272,5],"description":"Returns a PHPUnit_Framework_Constraint_Xor matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_Xor"},{"kind":32,"name":"anything","modifiers":33,"location":[2279,4,2282,5],"description":"Returns a PHPUnit_Framework_Constraint_IsAnything matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsAnything"},{"kind":32,"name":"isTrue","modifiers":33,"location":[2289,4,2292,5],"description":"Returns a PHPUnit_Framework_Constraint_IsTrue matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsTrue"},{"kind":32,"name":"callback","modifiers":33,"location":[2301,4,2304,5],"description":"Returns a PHPUnit_Framework_Constraint_Callback matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_Callback","children":[{"kind":128,"name":"$callback","location":[2301,36,2301,45],"scope":"callback","type":"callable"}]},{"kind":32,"name":"isFalse","modifiers":33,"location":[2311,4,2314,5],"description":"Returns a PHPUnit_Framework_Constraint_IsFalse matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsFalse"},{"kind":32,"name":"isJson","modifiers":33,"location":[2321,4,2324,5],"description":"Returns a PHPUnit_Framework_Constraint_IsJson matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsJson"},{"kind":32,"name":"isNull","modifiers":33,"location":[2331,4,2334,5],"description":"Returns a PHPUnit_Framework_Constraint_IsNull matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsNull"},{"kind":32,"name":"isFinite","modifiers":33,"location":[2341,4,2344,5],"description":"Returns a PHPUnit_Framework_Constraint_IsFinite matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsFinite"},{"kind":32,"name":"isInfinite","modifiers":33,"location":[2351,4,2354,5],"description":"Returns a PHPUnit_Framework_Constraint_IsInfinite matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsInfinite"},{"kind":32,"name":"isNan","modifiers":33,"location":[2361,4,2364,5],"description":"Returns a PHPUnit_Framework_Constraint_IsNan matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsNan"},{"kind":32,"name":"attribute","modifiers":33,"location":[2374,4,2380,5],"description":"Returns a PHPUnit_Framework_Constraint_Attribute matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_Attribute","children":[{"kind":128,"name":"$constraint","location":[2374,37,2374,77],"scope":"attribute","typeSource":1,"type":"PHPUnit_Framework_Constraint"},{"kind":128,"name":"$attributeName","location":[2374,79,2374,93],"scope":"attribute","type":"string"}]},{"kind":32,"name":"contains","modifiers":33,"location":[2392,4,2395,5],"description":"Returns a PHPUnit_Framework_Constraint_TraversableContains matcher\nobject.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_TraversableContains","children":[{"kind":128,"name":"$value","location":[2392,36,2392,42],"scope":"contains","type":"mixed"},{"kind":128,"name":"$checkForObjectIdentity","location":[2392,44,2392,74],"scope":"contains","value":"true","type":"bool"},{"kind":128,"name":"$checkForNonObjectIdentity","location":[2392,76,2392,110],"scope":"contains","value":"false","type":"bool"}]},{"kind":32,"name":"containsOnly","modifiers":33,"location":[2405,4,2408,5],"description":"Returns a PHPUnit_Framework_Constraint_TraversableContainsOnly matcher\nobject.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_TraversableContainsOnly","children":[{"kind":128,"name":"$type","location":[2405,40,2405,45],"scope":"containsOnly","type":"string"}]},{"kind":32,"name":"containsOnlyInstancesOf","modifiers":33,"location":[2418,4,2421,5],"description":"Returns a PHPUnit_Framework_Constraint_TraversableContainsOnly matcher\nobject.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_TraversableContainsOnly","children":[{"kind":128,"name":"$classname","location":[2418,51,2418,61],"scope":"containsOnlyInstancesOf","type":"string"}]},{"kind":32,"name":"arrayHasKey","modifiers":33,"location":[2430,4,2433,5],"description":"Returns a PHPUnit_Framework_Constraint_ArrayHasKey matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_ArrayHasKey","children":[{"kind":128,"name":"$key","location":[2430,39,2430,43],"scope":"arrayHasKey","type":"mixed"}]},{"kind":32,"name":"equalTo","modifiers":33,"location":[2446,4,2455,5],"description":"Returns a PHPUnit_Framework_Constraint_IsEqual matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsEqual","children":[{"kind":128,"name":"$value","location":[2446,35,2446,41],"scope":"equalTo","type":"mixed"},{"kind":128,"name":"$delta","location":[2446,43,2446,55],"scope":"equalTo","value":"0.0","type":"float"},{"kind":128,"name":"$maxDepth","location":[2446,57,2446,71],"scope":"equalTo","value":"10","type":"int"},{"kind":128,"name":"$canonicalize","location":[2446,73,2446,94],"scope":"equalTo","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[2446,96,2446,115],"scope":"equalTo","value":"false","type":"bool"}]},{"kind":32,"name":"attributeEqualTo","modifiers":33,"location":[2471,4,2483,5],"description":"Returns a PHPUnit_Framework_Constraint_IsEqual matcher object\nthat is wrapped in a PHPUnit_Framework_Constraint_Attribute matcher\nobject.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_Attribute","children":[{"kind":128,"name":"$attributeName","location":[2471,44,2471,58],"scope":"attributeEqualTo","type":"string"},{"kind":128,"name":"$value","location":[2471,60,2471,66],"scope":"attributeEqualTo","type":"mixed"},{"kind":128,"name":"$delta","location":[2471,68,2471,80],"scope":"attributeEqualTo","value":"0.0","type":"float"},{"kind":128,"name":"$maxDepth","location":[2471,82,2471,96],"scope":"attributeEqualTo","value":"10","type":"int"},{"kind":128,"name":"$canonicalize","location":[2471,98,2471,119],"scope":"attributeEqualTo","value":"false","type":"bool"},{"kind":128,"name":"$ignoreCase","location":[2471,121,2471,140],"scope":"attributeEqualTo","value":"false","type":"bool"}]},{"kind":32,"name":"isEmpty","modifiers":33,"location":[2490,4,2493,5],"description":"Returns a PHPUnit_Framework_Constraint_IsEmpty matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsEmpty"},{"kind":32,"name":"isWritable","modifiers":33,"location":[2500,4,2503,5],"description":"Returns a PHPUnit_Framework_Constraint_IsWritable matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsWritable"},{"kind":32,"name":"isReadable","modifiers":33,"location":[2510,4,2513,5],"description":"Returns a PHPUnit_Framework_Constraint_IsReadable matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsReadable"},{"kind":32,"name":"directoryExists","modifiers":33,"location":[2520,4,2523,5],"description":"Returns a PHPUnit_Framework_Constraint_DirectoryExists matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_DirectoryExists"},{"kind":32,"name":"fileExists","modifiers":33,"location":[2530,4,2533,5],"description":"Returns a PHPUnit_Framework_Constraint_FileExists matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_FileExists"},{"kind":32,"name":"greaterThan","modifiers":33,"location":[2542,4,2545,5],"description":"Returns a PHPUnit_Framework_Constraint_GreaterThan matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_GreaterThan","children":[{"kind":128,"name":"$value","location":[2542,39,2542,45],"scope":"greaterThan","type":"mixed"}]},{"kind":32,"name":"greaterThanOrEqual","modifiers":33,"location":[2556,4,2562,5],"description":"Returns a PHPUnit_Framework_Constraint_Or matcher object that wraps\na PHPUnit_Framework_Constraint_IsEqual and a\nPHPUnit_Framework_Constraint_GreaterThan matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_Or","children":[{"kind":128,"name":"$value","location":[2556,46,2556,52],"scope":"greaterThanOrEqual","type":"mixed"}]},{"kind":32,"name":"classHasAttribute","modifiers":33,"location":[2571,4,2576,5],"description":"Returns a PHPUnit_Framework_Constraint_ClassHasAttribute matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_ClassHasAttribute","children":[{"kind":128,"name":"$attributeName","location":[2571,45,2571,59],"scope":"classHasAttribute","type":"string"}]},{"kind":32,"name":"classHasStaticAttribute","modifiers":33,"location":[2586,4,2591,5],"description":"Returns a PHPUnit_Framework_Constraint_ClassHasStaticAttribute matcher\nobject.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_ClassHasStaticAttribute","children":[{"kind":128,"name":"$attributeName","location":[2586,51,2586,65],"scope":"classHasStaticAttribute","type":"string"}]},{"kind":32,"name":"objectHasAttribute","modifiers":33,"location":[2600,4,2605,5],"description":"Returns a PHPUnit_Framework_Constraint_ObjectHasAttribute matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_ObjectHasAttribute","children":[{"kind":128,"name":"$attributeName","location":[2600,46,2600,60],"scope":"objectHasAttribute","type":"string"}]},{"kind":32,"name":"identicalTo","modifiers":33,"location":[2614,4,2617,5],"description":"Returns a PHPUnit_Framework_Constraint_IsIdentical matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsIdentical","children":[{"kind":128,"name":"$value","location":[2614,39,2614,45],"scope":"identicalTo","type":"mixed"}]},{"kind":32,"name":"isInstanceOf","modifiers":33,"location":[2626,4,2629,5],"description":"Returns a PHPUnit_Framework_Constraint_IsInstanceOf matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsInstanceOf","children":[{"kind":128,"name":"$className","location":[2626,40,2626,50],"scope":"isInstanceOf","type":"string"}]},{"kind":32,"name":"isType","modifiers":33,"location":[2638,4,2641,5],"description":"Returns a PHPUnit_Framework_Constraint_IsType matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_IsType","children":[{"kind":128,"name":"$type","location":[2638,34,2638,39],"scope":"isType","type":"string"}]},{"kind":32,"name":"lessThan","modifiers":33,"location":[2650,4,2653,5],"description":"Returns a PHPUnit_Framework_Constraint_LessThan matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_LessThan","children":[{"kind":128,"name":"$value","location":[2650,36,2650,42],"scope":"lessThan","type":"mixed"}]},{"kind":32,"name":"lessThanOrEqual","modifiers":33,"location":[2664,4,2670,5],"description":"Returns a PHPUnit_Framework_Constraint_Or matcher object that wraps\na PHPUnit_Framework_Constraint_IsEqual and a\nPHPUnit_Framework_Constraint_LessThan matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_Or","children":[{"kind":128,"name":"$value","location":[2664,43,2664,49],"scope":"lessThanOrEqual","type":"mixed"}]},{"kind":32,"name":"matchesRegularExpression","modifiers":33,"location":[2679,4,2682,5],"description":"Returns a PHPUnit_Framework_Constraint_PCREMatch matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_PCREMatch","children":[{"kind":128,"name":"$pattern","location":[2679,52,2679,60],"scope":"matchesRegularExpression","type":"string"}]},{"kind":32,"name":"matches","modifiers":33,"location":[2691,4,2694,5],"description":"Returns a PHPUnit_Framework_Constraint_StringMatches matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_StringMatches","children":[{"kind":128,"name":"$string","location":[2691,35,2691,42],"scope":"matches","type":"string"}]},{"kind":32,"name":"stringStartsWith","modifiers":33,"location":[2703,4,2706,5],"description":"Returns a PHPUnit_Framework_Constraint_StringStartsWith matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_StringStartsWith","children":[{"kind":128,"name":"$prefix","location":[2703,44,2703,51],"scope":"stringStartsWith","type":"mixed"}]},{"kind":32,"name":"stringContains","modifiers":33,"location":[2716,4,2719,5],"description":"Returns a PHPUnit_Framework_Constraint_StringContains matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_StringContains","children":[{"kind":128,"name":"$string","location":[2716,42,2716,49],"scope":"stringContains","type":"string"},{"kind":128,"name":"$case","location":[2716,51,2716,63],"scope":"stringContains","value":"true","type":"bool"}]},{"kind":32,"name":"stringEndsWith","modifiers":33,"location":[2728,4,2731,5],"description":"Returns a PHPUnit_Framework_Constraint_StringEndsWith matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_StringEndsWith","children":[{"kind":128,"name":"$suffix","location":[2728,42,2728,49],"scope":"stringEndsWith","type":"mixed"}]},{"kind":32,"name":"countOf","modifiers":33,"location":[2740,4,2743,5],"description":"Returns a PHPUnit_Framework_Constraint_Count matcher object.","scope":"PHPUnit_Framework_Assert","type":"PHPUnit_Framework_Constraint_Count","children":[{"kind":128,"name":"$count","location":[2740,35,2740,41],"scope":"countOf","type":"int"}]},{"kind":32,"name":"fail","modifiers":33,"location":[2751,4,2754,5],"description":"Fails a test with the given message.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$message","location":[2751,32,2751,45],"scope":"fail","value":"''","type":"string"}]},{"kind":32,"name":"readAttribute","modifiers":33,"location":[2767,4,2800,5],"description":"Returns the value of an attribute of a class or an object.\nThis also works for attributes that are declared protected or private.","scope":"PHPUnit_Framework_Assert","type":"mixed","children":[{"kind":128,"name":"$classOrObject","location":[2767,41,2767,55],"scope":"readAttribute","type":"string|object"},{"kind":128,"name":"$attributeName","location":[2767,57,2767,71],"scope":"readAttribute","type":"string"}]},{"kind":32,"name":"getStaticAttribute","modifiers":33,"location":[2813,4,2849,5],"description":"Returns the value of a static attribute.\nThis also works for attributes that are declared protected or private.","scope":"PHPUnit_Framework_Assert","type":"mixed","children":[{"kind":128,"name":"$className","location":[2813,46,2813,56],"scope":"getStaticAttribute","type":"string"},{"kind":128,"name":"$attributeName","location":[2813,58,2813,72],"scope":"getStaticAttribute","type":"string"}]},{"kind":32,"name":"getObjectAttribute","modifiers":33,"location":[2862,4,2908,5],"description":"Returns the value of an object's attribute.\nThis also works for attributes that are declared protected or private.","scope":"PHPUnit_Framework_Assert","type":"mixed","children":[{"kind":128,"name":"$object","location":[2862,46,2862,53],"scope":"getObjectAttribute","type":"object"},{"kind":128,"name":"$attributeName","location":[2862,55,2862,69],"scope":"getObjectAttribute","type":"string"}]},{"kind":32,"name":"markTestIncomplete","modifiers":33,"location":[2917,4,2920,5],"description":"Mark the test as incomplete.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$message","location":[2917,46,2917,59],"scope":"markTestIncomplete","value":"''","type":"string"}]},{"kind":32,"name":"markTestSkipped","modifiers":33,"location":[2929,4,2932,5],"description":"Mark the test as skipped.","scope":"PHPUnit_Framework_Assert","children":[{"kind":128,"name":"$message","location":[2929,43,2929,56],"scope":"markTestSkipped","value":"''","type":"string"}]},{"kind":32,"name":"getCount","modifiers":33,"location":[2939,4,2942,5],"description":"Return the current assertion count.","scope":"PHPUnit_Framework_Assert","type":"int"},{"kind":32,"name":"resetCount","modifiers":33,"location":[2947,4,2950,5],"description":"Reset the assertion counter.","scope":"PHPUnit_Framework_Assert"}]}]}}