{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/zetacomponents/console-tools/src/table.php","root":{"kind":0,"name":"","children":[{"kind":1,"name":"ezcConsoleTable","location":[92,0,889,1],"associated":[{"kind":2,"name":"Countable"},{"kind":2,"name":"Iterator"},{"kind":2,"name":"ArrayAccess"}],"description":"Creating tables to be printed to the console. \n\nEvery ezcConsoleTable object can be accessed as if it was a multidimensional,\nnumerically indexed array. The first dimension represents the rows of the \ntable, so $table[0] gives you access to the first row of the table, which is \nrepresented by a {@link ezcConsoleTableRow} object. You can access its \nproperties directly, using e.g. $table[0]->format. The second dimension gives \nyou direct access to the cells of your table, like $table[0][0] accesses the \nfirst cell in the first row of your table. You can access its properties \ndiretly here, too. This works like e.g. $table[0][0]->format. Table row and\ncell objects are created on the fly, when you access them for the first time.\nYou can also create them as if you simply create new array elements. E.g.\n$table[] creates a new row in the table.\n\n<code>\n// Initialize the console output handler\n$out = new ezcConsoleOutput();\n// Define a new format \"headline\"\n$out->formats->headline->color = 'red';\n$out->formats->headline->style = array( 'bold' );\n// Define a new format \"sum\"\n$out->formats->sum->color = 'blue';\n$out->formats->sum->style = array( 'negative' );\n\n// Create a new table\n$table = new ezcConsoleTable( $out, 60 );\n\n// Create first row and in it the first cell\n$table[0][0]->content = 'Headline 1';\n\n// Create 3 more cells in row 0\nfor ( $i = 2; $i < 5; $i++ )\n{\n$table[0][]->content = \"Headline $i\";\n}\n\n$data = array( 1, 2, 3, 4 );\n\n// Create some more data in the table...\nforeach ( $data as $value )\n{\n// Create a new row each time and set it's contents to the actual value\n$table[][0]->content = $value;\n}\n\n// Set another border format for our headline row\n$table[0]->borderFormat = 'headline';\n\n// Set the content format for all cells of the 3rd row to \"sum\"\n$table[2]->format = 'sum';\n\n$table->outputTable();\n</code>","children":[{"kind":16,"name":"$options","modifiers":256,"location":[27,0,91,3],"description":"Contains the options for this class.","type":"ezcConsoleTableOptions"},{"kind":16,"name":"$width","modifiers":256,"location":[27,0,91,3],"description":"Width of the table.\n","type":"int"},{"kind":1024,"name":"WRAP_AUTO","modifiers":1,"location":[98,10,98,23],"scope":"ezcConsoleTable","value":"1"},{"kind":1024,"name":"WRAP_NONE","modifiers":1,"location":[105,10,105,23],"scope":"ezcConsoleTable","value":"2"},{"kind":1024,"name":"WRAP_CUT","modifiers":1,"location":[111,10,111,23],"scope":"ezcConsoleTable","value":"3"},{"kind":1024,"name":"ALIGN_DEFAULT","modifiers":1,"location":[116,10,116,28],"scope":"ezcConsoleTable","value":"-1"},{"kind":1024,"name":"ALIGN_LEFT","modifiers":1,"location":[120,10,120,38],"scope":"ezcConsoleTable","value":"STR_PAD_RIGHT"},{"kind":1024,"name":"ALIGN_RIGHT","modifiers":1,"location":[124,10,124,37],"scope":"ezcConsoleTable","value":"STR_PAD_LEFT"},{"kind":1024,"name":"ALIGN_CENTER","modifiers":1,"location":[128,10,128,37],"scope":"ezcConsoleTable","value":"STR_PAD_BOTH"},{"kind":1024,"name":"WIDTH_FIXED","modifiers":1,"location":[133,10,133,25],"scope":"ezcConsoleTable","value":"1"},{"kind":1024,"name":"WIDTH_MAX","modifiers":1,"location":[137,10,137,23],"scope":"ezcConsoleTable","value":"2"},{"kind":16,"name":"$properties","modifiers":2,"location":[144,14,144,25],"scope":"ezcConsoleTable","type":"array(string=>mixed)"},{"kind":16,"name":"$outputHandler","modifiers":2,"location":[151,14,151,28],"scope":"ezcConsoleTable","type":"ezcConsoleOutput"},{"kind":16,"name":"$rows","modifiers":2,"location":[158,14,158,19],"scope":"ezcConsoleTable","type":"array(ezcConsoleTableRow)"},{"kind":16,"name":"$stringTool","modifiers":4,"location":[165,12,165,23],"scope":"ezcConsoleTable","type":"ezcConsoleStringTool"},{"kind":32,"name":"__construct","modifiers":1,"location":[178,4,197,5],"description":"Creates a new table.","scope":"ezcConsoleTable","children":[{"kind":128,"name":"$outHandler","location":[178,33,178,61],"description":"Output handler to utilize","scope":"__construct","typeSource":1,"type":"ezcConsoleOutput"},{"kind":128,"name":"$width","location":[178,63,178,69],"description":"Overall width of the table (chars).","scope":"__construct","type":"int"},{"kind":128,"name":"$options","location":[178,71,178,89],"description":"Options\n","scope":"__construct","value":"array()","type":"array"}]},{"kind":32,"name":"setOptions","modifiers":1,"location":[213,4,227,5],"description":"Set new options.\nThis method allows you to change the options of the table.","scope":"ezcConsoleTable","children":[{"kind":128,"name":"$options","location":[213,32,213,50],"description":"The options to set.\n","scope":"setOptions","value":"array()","type":"ezcConsoleTableOptions"}]},{"kind":32,"name":"getOptions","modifiers":1,"location":[235,4,238,5],"description":"Returns the current options.\nReturns the options currently set for this table.","scope":"ezcConsoleTable","type":"ezcConsoleTableOptions"},{"kind":32,"name":"getTable","modifiers":1,"location":[253,4,256,5],"description":"Returns the table in an array.\n\nReturns the entire table as an array of printable lines. Each element of\nthe array represents a physical line of the drawn table, including all\nborders and stuff, so you can simply print the table using\n<code>\necho implode( \"\\n\" , $table->getTable() ):\n</code>\nwhich is basically what {@link ezcConsoleTable::outputTable()} does.","scope":"ezcConsoleTable","type":"array"},{"kind":32,"name":"outputTable","modifiers":1,"location":[264,4,267,5],"description":"Output the table.\nPrints the complete table to the console.","scope":"ezcConsoleTable","type":"void"},{"kind":32,"name":"__toString","modifiers":1,"location":[274,4,277,5],"description":"Returns the table in a string.","scope":"ezcConsoleTable","type":"string"},{"kind":32,"name":"offsetExists","modifiers":1,"location":[290,4,297,5],"description":"Returns if the given offset exists.\nThis method is part of the ArrayAccess interface to allow access to the\ndata of this object as if it was an array.","scope":"ezcConsoleTable","type":"bool","children":[{"kind":128,"name":"$offset","location":[290,34,290,41],"description":"The offset to check.","scope":"offsetExists","type":"int"}]},{"kind":32,"name":"offsetGet","modifiers":1,"location":[314,4,326,5],"description":"Returns the element with the given offset. \nThis method is part of the ArrayAccess interface to allow access to the\ndata of this object as if it was an array. In case of the\nezcConsoleTable class this method always returns a valid row object\nsince it creates them on the fly, if a given item does not exist.","scope":"ezcConsoleTable","type":"ezcConsoleTableCell","children":[{"kind":128,"name":"$offset","location":[314,31,314,38],"description":"The offset to check.","scope":"offsetGet","type":"int"}]},{"kind":32,"name":"offsetSet","modifiers":1,"location":[342,4,357,5],"description":"Set the element with the given offset. \nThis method is part of the ArrayAccess interface to allow access to the\ndata of this object as if it was an array.","scope":"ezcConsoleTable","type":"void","children":[{"kind":128,"name":"$offset","location":[342,31,342,38],"description":"The offset to assign an item to.","scope":"offsetSet","type":"int"},{"kind":128,"name":"$value","location":[342,40,342,46],"description":"The row to assign.","scope":"offsetSet","type":"ezcConsoleTableRow"}]},{"kind":32,"name":"offsetUnset","modifiers":1,"location":[370,4,380,5],"description":"Unset the element with the given offset. \nThis method is part of the ArrayAccess interface to allow access to the\ndata of this object as if it was an array.","scope":"ezcConsoleTable","type":"void","children":[{"kind":128,"name":"$offset","location":[370,33,370,40],"description":"The offset to unset the value for.","scope":"offsetUnset","type":"int"}]},{"kind":32,"name":"count","modifiers":1,"location":[389,4,393,5],"description":"Returns the number of cells in the row.\nThis method is part of the Countable interface to allow the usage of\nPHP's count() function to check how many cells this row has.","scope":"ezcConsoleTable","type":"int"},{"kind":32,"name":"current","modifiers":1,"location":[403,4,406,5],"description":"Returns the currently selected cell.\nThis method is part of the Iterator interface to allow access to the \ncells of this row by iterating over it like an array (e.g. using\nforeach).","scope":"ezcConsoleTable","type":"ezcConsoleTableCell"},{"kind":32,"name":"key","modifiers":1,"location":[416,4,419,5],"description":"Returns the key of the currently selected cell.\nThis method is part of the Iterator interface to allow access to the \ncells of this row by iterating over it like an array (e.g. using\nforeach).","scope":"ezcConsoleTable","type":"int"},{"kind":32,"name":"next","modifiers":1,"location":[429,4,432,5],"description":"Returns the next cell and selects it or false on the last cell.\nThis method is part of the Iterator interface to allow access to the \ncells of this row by iterating over it like an array (e.g. using\nforeach).","scope":"ezcConsoleTable","type":"mixed"},{"kind":32,"name":"rewind","modifiers":1,"location":[442,4,445,5],"description":"Selects the very first cell and returns it.\nThis method is part of the Iterator interface to allow access to the \ncells of this row by iterating over it like an array (e.g. using\nforeach).","scope":"ezcConsoleTable","type":"ezcConsoleTableCell"},{"kind":32,"name":"valid","modifiers":1,"location":[455,4,458,5],"description":"Returns if the current cell is valid.\nThis method is part of the Iterator interface to allow access to the \ncells of this row by iterating over it like an array (e.g. using\nforeach).","scope":"ezcConsoleTable","type":"ezcConsoleTableCell"},{"kind":32,"name":"__get","modifiers":1,"location":[470,4,481,5],"description":"Property read access.","scope":"ezcConsoleTable","type":"mixed","children":[{"kind":128,"name":"$key","location":[470,27,470,31],"description":"Name of the property.","scope":"__get","type":"string"}]},{"kind":32,"name":"__set","modifiers":1,"location":[495,4,517,5],"description":"Property write access.","scope":"ezcConsoleTable","children":[{"kind":128,"name":"$key","location":[495,27,495,31],"description":"Name of the property.","scope":"__set","type":"string"},{"kind":128,"name":"$val","location":[495,33,495,37],"description":"The value for the property.\n","scope":"__set","type":"mixed"}]},{"kind":32,"name":"__isset","modifiers":1,"location":[526,4,536,5],"description":"Property isset access.","scope":"ezcConsoleTable","type":"bool","children":[{"kind":128,"name":"$key","location":[526,29,526,33],"description":"Name of the property.","scope":"__isset","type":"string"}]},{"kind":32,"name":"generateTable","modifiers":4,"location":[543,4,578,5],"description":"Generate the complete table as an array.","scope":"ezcConsoleTable","type":"array(string)"},{"kind":32,"name":"generateBorder","modifiers":4,"location":[587,4,603,5],"description":"Generate top/bottom borders of rows.","scope":"ezcConsoleTable","type":"string","children":[{"kind":128,"name":"$colWidth","location":[587,37,587,46],"description":"Array of column width.","scope":"generateBorder","type":"array(int)"},{"kind":128,"name":"$format","location":[587,48,587,55],"description":"Format name.","scope":"generateBorder","type":"string"}]},{"kind":32,"name":"generateRow","modifiers":4,"location":[614,4,637,5],"description":"Generate a single physical row.\nThis method generates the string for a single physical table row.","scope":"ezcConsoleTable","type":"string","children":[{"kind":128,"name":"$cells","location":[614,34,614,40],"description":"Cells of the row.","scope":"generateRow","type":"array(string)"},{"kind":128,"name":"$colWidth","location":[614,42,614,51],"description":"Calculated columns widths.","scope":"generateRow","type":"array(int)"},{"kind":128,"name":"$row","location":[614,53,614,57],"description":"The row to generate.","scope":"generateRow","type":"ezcConsoleTableRow"}]},{"kind":32,"name":"determineAlign","modifiers":4,"location":[650,4,659,5],"description":"Determine the alignment of a cell.\nWalks the inheritance path upwards to determine the alignment of a \ncell. Checks first, if the cell has it's own alignment (apart from \nezcConsoleTable::ALIGN_DEFAULT). If not, checks the row for an \nalignment setting and uses the default alignment if not found.","scope":"ezcConsoleTable","type":"int","children":[{"kind":128,"name":"$row","location":[650,37,650,41],"description":"The row this cell belongs to.","scope":"determineAlign","type":"ezcConsoleTableRow"},{"kind":128,"name":"$cellId","location":[650,43,650,54],"description":"Index of the desired cell.","scope":"determineAlign","value":"0","type":"int"}]},{"kind":32,"name":"determineFormat","modifiers":4,"location":[672,4,679,5],"description":"Determine the format of a cells content.\nWalks the inheritance path upwards to determine the format of a \ncells content. Checks first, if the cell has it's own format (apart \nfrom 'default'). If not, checks the row for a format setting and \nuses the default format if not found.","scope":"ezcConsoleTable","type":"string","children":[{"kind":128,"name":"$row","location":[672,38,672,42],"description":"The row this cell belongs to.","scope":"determineFormat","type":"ezcConsoleTableRow"},{"kind":128,"name":"$cellId","location":[672,44,672,51],"description":"Index of the desired cell.","scope":"determineFormat","type":"int"}]},{"kind":32,"name":"determineBorderFormat","modifiers":4,"location":[690,4,695,5],"description":"Determine the format of a rows border.\nWalks the inheritance path upwards to determine the format of a \nrows border. Checks first, if the row has it's own format (apart \nfrom 'default'). If not, uses the default format.","scope":"ezcConsoleTable","type":"string","children":[{"kind":128,"name":"$row","location":[690,44,690,48],"description":"The row this cell belongs to.","scope":"determineBorderFormat","type":"ezcConsoleTableRow"}]},{"kind":32,"name":"breakRows","modifiers":4,"location":[707,4,751,5],"description":"Returns auto broken rows from an array of cells.\nThe data provided by a user may not fit into a cell calculated by the \nclass. In this case, the data can be automatically wrapped. The table \nrow then spans over multiple physical console lines.","scope":"ezcConsoleTable","type":"array(string)","children":[{"kind":128,"name":"$cells","location":[707,32,707,38],"description":"Array of cells in one row.","scope":"breakRows","type":"array(string)"},{"kind":128,"name":"$colWidth","location":[707,40,707,49],"description":"Columns widths array.","scope":"breakRows","type":"array(int)"}]},{"kind":32,"name":"getColWidths","modifiers":4,"location":[758,4,866,5],"description":"Determine width of each single column.","scope":"ezcConsoleTable","type":"void"},{"kind":32,"name":"formatText","modifiers":4,"location":[878,4,888,5],"description":"Returns the given $text formatted with $format.\n\nIn case $useFormats is set to false in the output handler, the text is \nreturned as given, without any formatting.","scope":"ezcConsoleTable","type":"string","children":[{"kind":128,"name":"$text","location":[878,33,878,38],"scope":"formatText","type":"string"},{"kind":128,"name":"$format","location":[878,40,878,47],"scope":"formatText","type":"string"}]}]}]}}