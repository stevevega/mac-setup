{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/zetacomponents/console-tools/src/input/option.php","root":{"kind":0,"name":"","children":[{"kind":1,"name":"ezcConsoleOption","location":[73,0,598,1],"description":"Objects of this class store data about a single option for ezcConsoleInput.\n\nThis class represents a single command line option, which can be handled by \nthe ezcConsoleInput class. This classes only purpose is the storage of\nthe parameter data, the handling of options and arguments is done by the\nclass {@link ezcConsoleInput}.","children":[{"kind":16,"name":"$short","modifiers":320,"location":[27,0,72,3],"description":"Short name of the parameter without '-' (eg. 'f').","type":"string"},{"kind":16,"name":"$long","modifiers":320,"location":[27,0,72,3],"description":"Long name of the parameter without '--' (eg. 'file').","type":"string"},{"kind":16,"name":"$type","modifiers":256,"location":[27,0,72,3],"description":"Value type of this parameter, default is ezcConsoleInput::TYPE_NONE.\nSee {@link ezcConsoleInput::TYPE_NONE},\n{@link ezcConsoleInput::TYPE_INT} and\n{@link ezcConsoleInput::TYPE_STRING}.","type":"int"},{"kind":16,"name":"$default","modifiers":256,"location":[27,0,72,3],"description":"Default value if the parameter is submitted without value.  If a\nparameter is eg. of type ezcConsoleInput::TYPE_STRING and\ntherefore expects a value when being submitted, it may be\nsubmitted without a value and automatically get the default value\nspecified here.","type":"mixed"},{"kind":16,"name":"$multiple","modifiers":256,"location":[27,0,72,3],"description":"Is the submission of multiple instances of this parameters\nallowed? ","type":"bool"},{"kind":16,"name":"$shorthelp","modifiers":256,"location":[27,0,72,3],"description":"Short help text. Usually displayed when showing parameter help\noverview.","type":"string"},{"kind":16,"name":"$longhelp","modifiers":256,"location":[27,0,72,3],"description":"Long help text. Usually displayed when showing parameter detailed\nhelp.","type":"string"},{"kind":16,"name":"$arguments","modifiers":256,"location":[27,0,72,3],"description":"Whether arguments to the program are allowed, when this parameter\nis submitted. ","type":"bool"},{"kind":16,"name":"$mandatory","modifiers":256,"location":[27,0,72,3],"description":"Whether a parameter is mandatory to be set.  If this flag is true,\nthe parameter must be submitted whenever the program is run.","type":"bool"},{"kind":16,"name":"$isHelpOption","modifiers":256,"location":[27,0,72,3],"description":"Whether a parameter is a help option.  If this flag is true, and\nthe parameter is set, all options marked as mandatory may be\nskipped.\n","type":"bool"},{"kind":16,"name":"$properties","modifiers":2,"location":[80,14,80,25],"scope":"ezcConsoleOption","type":"array(string=>mixed)"},{"kind":16,"name":"$dependencies","modifiers":2,"location":[93,14,93,37],"scope":"ezcConsoleOption","type":"array(string=>ezcConsoleParamemterRule)"},{"kind":16,"name":"$exclusions","modifiers":2,"location":[106,14,106,35],"scope":"ezcConsoleOption","type":"array(string=>ezcConsoleParamemterRule)"},{"kind":16,"name":"$value","modifiers":1,"location":[116,11,116,25],"scope":"ezcConsoleOption","type":"mixed"},{"kind":32,"name":"__construct","modifiers":1,"location":[164,4,215,5],"description":"Create a new parameter struct.\nCreates a new basic parameter struct with the base information \"$short\"\n(the short name of the parameter) and \"$long\" (the long version). You\nsimply apply these parameters as strings (without '-' or '--'). So\n\n<code>\n$param = new ezcConsoleOption( 'f', 'file' );\n</code>\n\nwill result in a parameter that can be accessed using\n\n<code>\n$ mytool -f\n</code>\n\nor\n\n<code>\n$ mytool --file\n</code>\n.\n\nThe newly created parameter contains only it's 2 names and each other \nattribute is set to it's default value. You can simply manipulate\nthose attributes by accessing them directly.","scope":"ezcConsoleOption","children":[{"kind":128,"name":"$short","location":[165,8,165,19],"description":"Short name of the parameter without '-' (eg. 'f').","scope":"__construct","value":"''","type":"string"},{"kind":128,"name":"$long","location":[166,8,166,13],"description":"Long name of the parameter without '--' (eg. 'file').","scope":"__construct","type":"string"},{"kind":128,"name":"$type","location":[167,8,167,42],"description":"Value type of the parameter. One of ezcConsoleInput::TYPE_*.","scope":"__construct","value":"ezcConsoleInput::TYPE_NONE","type":"int"},{"kind":128,"name":"$default","location":[168,8,168,23],"description":"Default value the parameter holds if not submitted.","scope":"__construct","value":"null","type":"mixed"},{"kind":128,"name":"$multiple","location":[169,8,169,25],"description":"If the parameter may be submitted multiple times.","scope":"__construct","value":"false","type":"bool"},{"kind":128,"name":"$shorthelp","location":[170,8,170,41],"description":"Short help text.","scope":"__construct","value":"'No help available.'","type":"string"},{"kind":128,"name":"$longhelp","location":[171,8,171,80],"description":"Long help text.","scope":"__construct","value":"'Sorry, there is no help text available for this parameter.'","type":"string"},{"kind":128,"name":"$dependencies","location":[172,8,172,37],"description":"Dependency rules.","scope":"__construct","value":"array()","type":"array(ezcConsoleOptionRule)"},{"kind":128,"name":"$exclusions","location":[173,8,173,35],"description":"Exclusion rules.","scope":"__construct","value":"array()","type":"array(ezcConsoleOptionRule)"},{"kind":128,"name":"$arguments","location":[174,8,174,25],"description":"Whether supplying arguments is allowed when this parameter is set.","scope":"__construct","value":"true","type":"bool"},{"kind":128,"name":"$mandatory","location":[175,8,175,26],"description":"Whether the parameter must be always submitted.","scope":"__construct","value":"false","type":"bool"},{"kind":128,"name":"$isHelpOption","location":[176,8,176,29],"description":"Indicates that the given parameter is a help \noption. If a help option is set, all rule \nchecking is skipped (dependency/exclusion/\nmandatory).\n","scope":"__construct","value":"false","type":"bool"}]},{"kind":32,"name":"addDependency","modifiers":1,"location":[226,4,236,5],"description":"Add a new dependency for a parameter.\nThis registeres a new dependency rule with the parameter. If you try\nto add an already registered rule it will simply be ignored. Else,\nthe submitted rule will be added to the parameter as a dependency.","scope":"ezcConsoleOption","type":"void","children":[{"kind":128,"name":"$rule","location":[226,35,226,61],"description":"The rule to add.","scope":"addDependency","typeSource":1,"type":"ezcConsoleOptionRule"}]},{"kind":32,"name":"removeDependency","modifiers":1,"location":[246,4,255,5],"description":"Remove a dependency rule from a parameter.\nThis removes a given rule from a parameter, if it exists. If the rule is\nnot registered with the parameter, the method call will simply be ignored.","scope":"ezcConsoleOption","type":"void","children":[{"kind":128,"name":"$rule","location":[246,38,246,64],"description":"The rule to be removed.","scope":"removeDependency","typeSource":1,"type":"ezcConsoleOptionRule"}]},{"kind":32,"name":"removeAllDependencies","modifiers":1,"location":[266,4,275,5],"description":"Remove all dependency rule referring to a parameter.\nThis removes all dependency rules from a parameter, that refer to as specific \nparameter. If no rule is registered with this parameter as reference, the \nmethod call will simply be ignored.","scope":"ezcConsoleOption","type":"void","children":[{"kind":128,"name":"$param","location":[266,43,266,66],"description":"The param to be check for rules.","scope":"removeAllDependencies","typeSource":1,"type":"ezcConsoleOption"}]},{"kind":32,"name":"hasDependency","modifiers":1,"location":[285,4,295,5],"description":"Returns if a dependency to the given option exists.\nReturns true if a dependency rule to the given option is registered,\notherwise false.","scope":"ezcConsoleOption","type":"bool","children":[{"kind":128,"name":"$param","location":[285,35,285,58],"description":"The param to check if a dependency exists to.","scope":"hasDependency","typeSource":1,"type":"ezcConsoleOption"}]},{"kind":32,"name":"getDependencies","modifiers":1,"location":[312,4,315,5],"description":"Returns the dependency rules registered with this parameter.\nReturns an array of registered dependencies.\n\nFor example:\n<code>\narray(\n0 => ezcConsoleOptionRule,\n1 => ezcConsoleOptionRule,\n2 => ezcConsoleOptionRule,\n);\n</code>","scope":"ezcConsoleOption","type":"array(ezcConsoleOptionRule)"},{"kind":32,"name":"resetDependencies","modifiers":1,"location":[323,4,326,5],"description":"Reset existing dependency rules.\nDeletes all registered dependency rules from the option definition.","scope":"ezcConsoleOption","type":"void"},{"kind":32,"name":"addExclusion","modifiers":1,"location":[337,4,347,5],"description":"Add a new exclusion for an option.\nThis registeres a new exclusion rule with the option. If you try\nto add an already registered rule it will simply be ignored. Else,\nthe submitted rule will be added to the option as a exclusion.","scope":"ezcConsoleOption","type":"void","children":[{"kind":128,"name":"$rule","location":[337,34,337,60],"description":"The rule to add.","scope":"addExclusion","typeSource":1,"type":"ezcConsoleOptionRule"}]},{"kind":32,"name":"removeExclusion","modifiers":1,"location":[357,4,366,5],"description":"Remove a exclusion rule from a option.\nThis removes a given rule from a option, if it exists. If the rule is\nnot registered with the option, the method call will simply be ignored.","scope":"ezcConsoleOption","type":"void","children":[{"kind":128,"name":"$rule","location":[357,37,357,63],"description":"The rule to be removed.","scope":"removeExclusion","typeSource":1,"type":"ezcConsoleOptionRule"}]},{"kind":32,"name":"removeAllExclusions","modifiers":1,"location":[377,4,386,5],"description":"Remove all exclusion rule referring to a option.\nThis removes all exclusion rules from a option, that refer to as specific \noption. If no rule is registered with this option as reference, the \nmethod call will simply be ignored.","scope":"ezcConsoleOption","type":"void","children":[{"kind":128,"name":"$param","location":[377,41,377,64],"description":"The option to remove rule for.","scope":"removeAllExclusions","typeSource":1,"type":"ezcConsoleOption"}]},{"kind":32,"name":"hasExclusion","modifiers":1,"location":[396,4,406,5],"description":"Returns if a given exclusion rule is registered with the option.\nReturns true if a exclusion rule to the given option is registered,\notherwise false.","scope":"ezcConsoleOption","type":"bool","children":[{"kind":128,"name":"$param","location":[396,34,396,57],"description":"The param to check if exclusions exist for.","scope":"hasExclusion","typeSource":1,"type":"ezcConsoleOption"}]},{"kind":32,"name":"getExclusions","modifiers":1,"location":[423,4,426,5],"description":"Returns the exclusion rules registered with this parameter.\nReturns an array of registered exclusions.\n\nFor example:\n<code>\narray(\n0 => ezcConsoleOptionRule,\n1 => ezcConsoleOptionRule,\n2 => ezcConsoleOptionRule,\n);\n</code>","scope":"ezcConsoleOption","type":"array(ezcConsoleOptionRule)"},{"kind":32,"name":"resetExclusions","modifiers":1,"location":[434,4,437,5],"description":"Reset existing exclusion rules.\nDeletes all registered exclusion rules from the option definition.","scope":"ezcConsoleOption","type":"void"},{"kind":32,"name":"__get","modifiers":1,"location":[447,4,466,5],"description":"Property read access.\nProvides read access to the properties of the object.","scope":"ezcConsoleOption","type":"mixed","children":[{"kind":128,"name":"$key","location":[447,27,447,31],"description":"The name of the property.","scope":"__get","type":"string"}]},{"kind":32,"name":"__set","modifiers":1,"location":[480,4,552,5],"description":"Property write access.","scope":"ezcConsoleOption","children":[{"kind":128,"name":"$key","location":[480,27,480,31],"description":"Name of the property.","scope":"__set","type":"string"},{"kind":128,"name":"$val","location":[480,33,480,37],"description":"The value for the property.\n","scope":"__set","type":"mixed"}]},{"kind":32,"name":"__isset","modifiers":1,"location":[561,4,578,5],"description":"Property isset access.","scope":"ezcConsoleOption","type":"bool","children":[{"kind":128,"name":"$key","location":[561,29,561,33],"description":"Name of the property.","scope":"__isset","type":"string"}]},{"kind":32,"name":"validateOptionName","modifiers":33,"location":[590,4,597,5],"description":"Returns if a given name if valid for use as a parameter name a parameter. \nChecks if a given parameter name is generally valid for use. It checks a)\nthat the name does not start with '-' or '--' and b) if it contains\nwhitespaces. Note, that this method does not check any conflicts with already\nused parameter names.","scope":"ezcConsoleOption","type":"bool","children":[{"kind":128,"name":"$name","location":[590,47,590,52],"description":"The name to check.","scope":"validateOptionName","type":"string"}]}]}]}}