{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/guzzlehttp/promises/src/functions.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"GuzzleHttp\\Promise","location":[1,0,1,29]},{"kind":64,"name":"GuzzleHttp\\Promise\\queue","location":[20,0,31,1],"description":"Get the global task queue used for promise resolution.\n\nThis task queue MUST be run in an event loop in order for promises to be\nsettled asynchronously. It will be automatically run when synchronously\nwaiting on a promise.\n\n<code>\nwhile ($eventLoop->isRunning()) {\nGuzzleHttp\\Promise\\queue()->run();\n}\n</code>","type":"GuzzleHttp\\Promise\\TaskQueueInterface","children":[{"kind":128,"name":"$assign","location":[20,15,20,48],"description":"Optionally specify a new queue instance.\n","scope":"GuzzleHttp\\Promise\\queue","value":"null","typeSource":1,"type":"GuzzleHttp\\Promise\\TaskQueueInterface"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\task","location":[41,0,56,1],"description":"Adds a function to run in the task queue when it is next `run()` and returns\na promise that is fulfilled or rejected with the result.","type":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$task","location":[41,14,41,28],"description":"Task function to run.\n","scope":"GuzzleHttp\\Promise\\task","type":"callable"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\promise_for","location":[65,0,81,1],"description":"Creates a promise for a value if the value is not a promise.","type":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$value","location":[65,21,65,27],"description":"Promise or value.\n","scope":"GuzzleHttp\\Promise\\promise_for","type":"mixed"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\rejection_for","location":[91,0,98,1],"description":"Creates a rejected promise for a reason if the reason is not a promise. If\nthe provided reason is a promise, then it is returned as-is.","type":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$reason","location":[91,23,91,30],"description":"Promise or reason.\n","scope":"GuzzleHttp\\Promise\\rejection_for","type":"mixed"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\exception_for","location":[107,0,112,1],"description":"Create an exception for a rejected promise value.","type":"Exception|Throwable","children":[{"kind":128,"name":"$reason","location":[107,23,107,30],"scope":"GuzzleHttp\\Promise\\exception_for","type":"mixed"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\iter_for","location":[121,0,130,1],"description":"Returns an iterator for the given value.","type":"Iterator","children":[{"kind":128,"name":"$value","location":[121,18,121,24],"scope":"GuzzleHttp\\Promise\\iter_for","type":"mixed"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\inspect","location":[146,0,160,1],"description":"Synchronously waits on a promise to resolve and returns an inspection state\narray.\n\nReturns a state associative array containing a \"state\" key mapping to a\nvalid promise state. If the state of the promise is \"fulfilled\", the array\nwill contain a \"value\" key mapping to the fulfilled value of the promise. If\nthe promise is rejected, the array will contain a \"reason\" key mapping to\nthe rejection reason of the promise.","type":"array","children":[{"kind":128,"name":"$promise","location":[146,17,146,42],"description":"Promise or value.\n","scope":"GuzzleHttp\\Promise\\inspect","typeSource":1,"type":"GuzzleHttp\\Promise\\PromiseInterface"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\inspect_all","location":[173,0,181,1],"description":"Waits on all of the provided promises, but does not unwrap rejected promises\nas thrown exception.\n\nReturns an array of inspection state arrays.","type":"array","children":[{"kind":128,"name":"$promises","location":[173,21,173,30],"description":"Traversable of promises to wait upon.\n","scope":"GuzzleHttp\\Promise\\inspect_all","type":"GuzzleHttp\\Promise\\PromiseInterface[]"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\unwrap","location":[196,0,204,1],"description":"Waits on all of the provided promises and returns the fulfilled values.\n\nReturns an array that contains the value of each promise (in the same order\nthe promises were provided). An exception is thrown if any of the promises\nare rejected.","type":"array","children":[{"kind":128,"name":"$promises","location":[196,16,196,25],"description":"Iterable of PromiseInterface objects to wait on.\n","scope":"GuzzleHttp\\Promise\\unwrap","type":"mixed"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\all","location":[218,0,233,1],"description":"Given an array of promises, return a promise that is fulfilled when all the\nitems in the array are fulfilled.\n\nThe promise's fulfillment value is an array with fulfillment values at\nrespective positions to the original array. If any promise in the array\nrejects, the returned promise is rejected with the rejection reason.","type":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$promises","location":[218,13,218,22],"description":"Promises or values.\n","scope":"GuzzleHttp\\Promise\\all","type":"mixed"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\some","location":[251,0,282,1],"description":"Initiate a competitive race between multiple promises or values (values will\nbecome immediately fulfilled promises).\n\nWhen count amount of promises have been fulfilled, the returned promise is\nfulfilled with an array that contains the fulfillment values of the winners\nin order of resolution.\n\nThis prommise is rejected with a {@see GuzzleHttp\\Promise\\AggregateException}\nif the number of fulfilled promises is less than the desired $count.","type":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$count","location":[251,14,251,20],"description":"Total number of promises.","scope":"GuzzleHttp\\Promise\\some","type":"int"},{"kind":128,"name":"$promises","location":[251,22,251,31],"description":"Promises or values.\n","scope":"GuzzleHttp\\Promise\\some","type":"mixed"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\any","location":[292,0,295,1],"description":"Like some(), with 1 as count. However, if the promise fulfills, the\nfulfillment value is not an array of 1 but the value directly.","type":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$promises","location":[292,13,292,22],"description":"Promises or values.\n","scope":"GuzzleHttp\\Promise\\any","type":"mixed"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\settle","location":[308,0,324,1],"description":"Returns a promise that is fulfilled when all of the provided promises have\nbeen fulfilled or rejected.\n\nThe returned promise is fulfilled with an array of inspection state arrays.","type":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$promises","location":[308,16,308,25],"description":"Promises or values.\n","scope":"GuzzleHttp\\Promise\\settle","type":"mixed"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\each","location":[345,0,354,1],"description":"Given an iterator that yields promises or values, returns a promise that is\nfulfilled with a null value when the iterator has been consumed or the\naggregate promise has been fulfilled or rejected.\n\n$onFulfilled is a function that accepts the fulfilled value, iterator\nindex, and the aggregate promise. The callback can invoke any necessary side\neffects and choose to resolve or reject the aggregate promise if needed.\n\n$onRejected is a function that accepts the rejection reason, iterator\nindex, and the aggregate promise. The callback can invoke any necessary side\neffects and choose to resolve or reject the aggregate promise if needed.","type":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$iterable","location":[346,4,346,13],"description":"Iterator or array to iterate over.","scope":"GuzzleHttp\\Promise\\each","type":"mixed"},{"kind":128,"name":"$onFulfilled","location":[347,4,347,32],"scope":"GuzzleHttp\\Promise\\each","value":"null","type":"callable"},{"kind":128,"name":"$onRejected","location":[348,4,348,31],"scope":"GuzzleHttp\\Promise\\each","value":"null","type":"callable"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\each_limit","location":[371,0,382,1],"description":"Like each, but only allows a certain number of outstanding promises at any\ngiven time.\n\n$concurrency may be an integer or a function that accepts the number of\npending promises and returns a numeric concurrency limit value to allow for\ndynamic a concurrency size.","type":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$iterable","location":[372,4,372,13],"scope":"GuzzleHttp\\Promise\\each_limit","type":"mixed"},{"kind":128,"name":"$concurrency","location":[373,4,373,16],"scope":"GuzzleHttp\\Promise\\each_limit","type":"int|callable"},{"kind":128,"name":"$onFulfilled","location":[374,4,374,32],"scope":"GuzzleHttp\\Promise\\each_limit","value":"null","type":"callable"},{"kind":128,"name":"$onRejected","location":[375,4,375,31],"scope":"GuzzleHttp\\Promise\\each_limit","value":"null","type":"callable"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\each_limit_all","location":[395,0,408,1],"description":"Like each_limit, but ensures that no promise in the given $iterable argument\nis rejected. If any promise is rejected, then the aggregate promise is\nrejected with the encountered rejection.","type":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$iterable","location":[396,4,396,13],"scope":"GuzzleHttp\\Promise\\each_limit_all","type":"mixed"},{"kind":128,"name":"$concurrency","location":[397,4,397,16],"scope":"GuzzleHttp\\Promise\\each_limit_all","type":"int|callable"},{"kind":128,"name":"$onFulfilled","location":[398,4,398,32],"scope":"GuzzleHttp\\Promise\\each_limit_all","value":"null","type":"callable"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\is_fulfilled","location":[417,0,420,1],"description":"Returns true if a promise is fulfilled.","type":"bool","children":[{"kind":128,"name":"$promise","location":[417,22,417,47],"scope":"GuzzleHttp\\Promise\\is_fulfilled","typeSource":1,"type":"GuzzleHttp\\Promise\\PromiseInterface"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\is_rejected","location":[429,0,432,1],"description":"Returns true if a promise is rejected.","type":"bool","children":[{"kind":128,"name":"$promise","location":[429,21,429,46],"scope":"GuzzleHttp\\Promise\\is_rejected","typeSource":1,"type":"GuzzleHttp\\Promise\\PromiseInterface"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\is_settled","location":[441,0,444,1],"description":"Returns true if a promise is fulfilled or rejected.","type":"bool","children":[{"kind":128,"name":"$promise","location":[441,20,441,45],"scope":"GuzzleHttp\\Promise\\is_settled","typeSource":1,"type":"GuzzleHttp\\Promise\\PromiseInterface"}]},{"kind":64,"name":"GuzzleHttp\\Promise\\coroutine","location":[453,0,456,1],"type":"GuzzleHttp\\Promise\\PromiseInterface","children":[{"kind":128,"name":"$generatorFn","location":[453,19,453,40],"scope":"GuzzleHttp\\Promise\\coroutine","type":"callable"}]}]}}