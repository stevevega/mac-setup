{"uri":"file:///Users/vega/Code/huli/manager-web/src/vendor/guzzlehttp/promises/src/Promise.php","root":{"kind":0,"name":"","children":[{"kind":512,"name":"GuzzleHttp\\Promise","location":[1,0,1,29]},{"kind":1,"name":"GuzzleHttp\\Promise\\Promise","location":[8,0,279,1],"associated":[{"kind":2,"name":"GuzzleHttp\\Promise\\PromiseInterface"}],"description":"Promises/A+ implementation that avoids recursion when possible.","children":[{"kind":16,"name":"$state","modifiers":4,"location":[10,12,10,34],"scope":"GuzzleHttp\\Promise\\Promise"},{"kind":16,"name":"$result","modifiers":4,"location":[11,12,11,19],"scope":"GuzzleHttp\\Promise\\Promise"},{"kind":16,"name":"$cancelFn","modifiers":4,"location":[12,12,12,21],"scope":"GuzzleHttp\\Promise\\Promise"},{"kind":16,"name":"$waitFn","modifiers":4,"location":[13,12,13,19],"scope":"GuzzleHttp\\Promise\\Promise"},{"kind":16,"name":"$waitList","modifiers":4,"location":[14,12,14,21],"scope":"GuzzleHttp\\Promise\\Promise"},{"kind":16,"name":"$handlers","modifiers":4,"location":[15,12,15,26],"scope":"GuzzleHttp\\Promise\\Promise"},{"kind":32,"name":"__construct","modifiers":1,"location":[21,4,27,5],"scope":"GuzzleHttp\\Promise\\Promise","children":[{"kind":128,"name":"$waitFn","location":[22,8,22,31],"description":"Fn that when invoked resolves the promise.","scope":"__construct","value":"null","type":"callable"},{"kind":128,"name":"$cancelFn","location":[23,8,23,33],"description":"Fn that when invoked cancels the promise.","scope":"__construct","value":"null","type":"callable"}]},{"kind":32,"name":"then","modifiers":1,"location":[29,4,52,5],"scope":"GuzzleHttp\\Promise\\Promise","children":[{"kind":128,"name":"$onFulfilled","location":[30,8,30,36],"scope":"then","value":"null"},{"kind":128,"name":"$onRejected","location":[31,8,31,35],"scope":"then","value":"null"}]},{"kind":32,"name":"otherwise","modifiers":1,"location":[54,4,57,5],"scope":"GuzzleHttp\\Promise\\Promise","children":[{"kind":128,"name":"$onRejected","location":[54,30,54,50],"scope":"otherwise"}]},{"kind":32,"name":"wait","modifiers":1,"location":[59,4,77,5],"scope":"GuzzleHttp\\Promise\\Promise","children":[{"kind":128,"name":"$unwrap","location":[59,25,59,39],"scope":"wait","value":"true"}]},{"kind":32,"name":"getState","modifiers":1,"location":[79,4,82,5],"scope":"GuzzleHttp\\Promise\\Promise"},{"kind":32,"name":"cancel","modifiers":1,"location":[84,4,108,5],"scope":"GuzzleHttp\\Promise\\Promise"},{"kind":32,"name":"resolve","modifiers":1,"location":[110,4,113,5],"scope":"GuzzleHttp\\Promise\\Promise","children":[{"kind":128,"name":"$value","location":[110,28,110,34],"scope":"resolve"}]},{"kind":32,"name":"reject","modifiers":1,"location":[115,4,118,5],"scope":"GuzzleHttp\\Promise\\Promise","children":[{"kind":128,"name":"$reason","location":[115,27,115,34],"scope":"reject"}]},{"kind":32,"name":"settle","modifiers":4,"location":[120,4,178,5],"scope":"GuzzleHttp\\Promise\\Promise","children":[{"kind":128,"name":"$state","location":[120,28,120,34],"scope":"settle"},{"kind":128,"name":"$value","location":[120,36,120,42],"scope":"settle"}]},{"kind":32,"name":"callHandler","modifiers":36,"location":[189,4,215,5],"description":"Call a stack of handlers using a specific callback index and value.","scope":"GuzzleHttp\\Promise\\Promise","type":"array","children":[{"kind":128,"name":"$index","location":[189,40,189,46],"description":"1 (resolve) or 2 (reject).","scope":"callHandler","type":"int"},{"kind":128,"name":"$value","location":[189,48,189,54],"description":"Value to pass to the callback.","scope":"callHandler","type":"mixed"},{"kind":128,"name":"$handler","location":[189,56,189,70],"description":"Array of handler data (promise and callbacks).\n","scope":"callHandler","type":"array"}]},{"kind":32,"name":"waitIfPending","modifiers":4,"location":[217,4,238,5],"scope":"GuzzleHttp\\Promise\\Promise"},{"kind":32,"name":"invokeWaitFn","modifiers":4,"location":[240,4,257,5],"scope":"GuzzleHttp\\Promise\\Promise"},{"kind":32,"name":"invokeWaitList","modifiers":4,"location":[259,4,278,5],"scope":"GuzzleHttp\\Promise\\Promise"}]}]}}